<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>Minetest Developer Wiki</sitename>
    <dbname>minetest_devwiki</dbname>
    <base>http://dev.minetest.net/Main_Page</base>
    <generator>MediaWiki 1.35.3</generator>
    <case>case-sensitive</case>
    <namespaces>
      <namespace key="-2" case="case-sensitive">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="case-sensitive" />
      <namespace key="1" case="case-sensitive">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="case-sensitive">MinetestWiki</namespace>
      <namespace key="5" case="case-sensitive">MinetestWiki talk</namespace>
      <namespace key="6" case="case-sensitive">File</namespace>
      <namespace key="7" case="case-sensitive">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="case-sensitive">Template</namespace>
      <namespace key="11" case="case-sensitive">Template talk</namespace>
      <namespace key="12" case="case-sensitive">Help</namespace>
      <namespace key="13" case="case-sensitive">Help talk</namespace>
      <namespace key="14" case="case-sensitive">Category</namespace>
      <namespace key="15" case="case-sensitive">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>All rules regarding to development</title>
    <ns>0</ns>
    <id>712</id>
    <revision>
      <id>6177</id>
      <parentid>2773</parentid>
      <timestamp>2022-08-21T17:49:01Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <comment>/* Rules */</comment>
      <origin>6177</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="503" sha1="hbdwhqhzx22qmmzhnxrgzc2vsphq15l" xml:space="preserve">This page contains all rules and guidelines that developers, contributors and others working on the project should follow.

This is the official hub page for this information.

== Rules ==

==== Core developers ====

[[Organisation]]

==== Git and github usage ====

[[Git Guidelines]]

==== Coding style ====

[[Code style guidelines]]

[[Lua code style guidelines]]

== RFCs and stuff ==

https://forum.minetest.net/viewtopic.php?f=3&amp;t=11172
[[Category:Root-Category]][[Category:Rules and Guidelines]]</text>
      <sha1>hbdwhqhzx22qmmzhnxrgzc2vsphq15l</sha1>
    </revision>
  </page>
  <page>
    <title>Android</title>
    <ns>0</ns>
    <id>477</id>
    <revision>
      <id>6065</id>
      <parentid>6064</parentid>
      <timestamp>2022-06-18T19:42:54Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <origin>6065</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="93" sha1="bazegce092quonq12xtlc6ujxtio6rj" xml:space="preserve">= Building Android =

See https://github.com/minetest/minetest/blob/master/doc/README.android</text>
      <sha1>bazegce092quonq12xtlc6ujxtio6rj</sha1>
    </revision>
  </page>
  <page>
    <title>Build Win32 Minetest including all required libraries</title>
    <ns>0</ns>
    <id>476</id>
    <revision>
      <id>6224</id>
      <parentid>3954</parentid>
      <timestamp>2022-10-24T20:38:55Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <comment>Replaced content with "Please see [https://github.com/minetest/minetest#compiling-on-windows-using-msvc the Minetest README] for MSVC or [[Compiling_Minetest#Cross-compilation]] for cross-compil..."</comment>
      <origin>6224</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="186" sha1="iv6nsp4rrq26pk2d9qxkk2kaql4ycxx" xml:space="preserve">Please see [https://github.com/minetest/minetest#compiling-on-windows-using-msvc the Minetest README] for MSVC or [[Compiling_Minetest#Cross-compilation]] for cross-compiling with MinGW.</text>
      <sha1>iv6nsp4rrq26pk2d9qxkk2kaql4ycxx</sha1>
    </revision>
  </page>
  <page>
    <title>CMake Options</title>
    <ns>0</ns>
    <id>500</id>
    <revision>
      <id>6219</id>
      <parentid>3795</parentid>
      <timestamp>2022-10-24T19:46:20Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <comment>Replaced content with "[https://github.com/minetest/minetest#cmake-options Please see the Minetest README.md for an up-to-date list of CMake options.]  [[Category:Compiling Minetest]] Category..."</comment>
      <origin>6219</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="182" sha1="40oudhtczy8qxjtt9t2iujtvj59gxsb" xml:space="preserve">[https://github.com/minetest/minetest#cmake-options Please see the Minetest README.md for an up-to-date list of CMake options.]

[[Category:Compiling Minetest]]
[[Category:Obsolete]]</text>
      <sha1>40oudhtczy8qxjtt9t2iujtvj59gxsb</sha1>
    </revision>
  </page>
  <page>
    <title>Changelog</title>
    <ns>0</ns>
    <id>366</id>
    <revision>
      <id>6359</id>
      <parentid>6358</parentid>
      <timestamp>2023-04-09T08:12:21Z</timestamp>
      <contributor>
        <username>Sfan5</username>
        <id>10</id>
      </contributor>
      <comment>/* World / Server / Environment */</comment>
      <origin>6359</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="90810" sha1="sdgpcu2ltd0v8je6tkj89xj41kb1825" xml:space="preserve">Note that not all changes made to the code between releases are listed here.  Fixes to bugs that were introduced after the previous release, small internal changes, code style fixes, and changes of the like are not listed.  If you want a list of ''every'' change made between releases see the [https://github.com/minetest/minetest/commits/master commit log].

==  5.6.0 → 5.7.0 ==

Released on 8 April 2023

=== Deprecations and compatibility notes ===
* The default key for pitchmove was removed. Specify a key manually to use this feature.
** See https://github.com/minetest/minetest/pull/13319 for details
* Special handling of &lt;code&gt;${key}&lt;/code&gt; syntax in metadata values are deprecated
** See https://github.com/minetest/minetest/pull/12970 for details
* Worlds with unresolved dependencies can no longer be loaded. This ensures that the specified mods are loaded properly.
** See https://github.com/minetest/minetest/pull/12542 for details
* The default key for (un)limited range was removed. Specify a key manually to use this feature.
** See https://github.com/minetest/minetest/pull/12632 for details
* Development Test is no longer being distributed in official Minetest releases
** This was never meant for players to begin with, this “game” is exclusively meant for engine development
** To get it back, build Minetest from source code (recommended) or download Development Test from [https://content.minetest.net/packages/Minetest/devtest/ ContentDB]

=== Client / Audiovisuals ===
* Fix main menu error when submitting invalid port numbers (''GoodClover'')
* Fix ChatPrompt crash in very narrow windows (''DS'')
* Fix missing shadows when sun tilt is zero (''x2048'')
* Android: Make OpenGLES 2 the default driver (''ROllerozxa'')
* 8x block meshes for improved performance (''x2048'')
** Configuration options and bugfixes (''lhofhansl'', ''x2048'')
* Decrease minimum for repeat_place_time (''DS'')
* Fix Enter key after creating a new world (''srifqi'')
* Improve chat history (''TurkeyMcMac'')
* Add dynamic exposure correction (''x2048'')
** This is also configurable by the Lua API
* Improve the occlusion culling algorithm (i.e. better efficiency) (''x2048'')
* Use multiple threads for mesh generation (i.e. faster rendering) (''x2048'')
* Removed pageflip 3D mode (because broken) (''ROllerozxa'')
* Fix progress bar look on HiDPI displays (''kilbith'')
* Fix &lt;code&gt;plantlike_rooted&lt;/code&gt; world-aligned node base textures (''TurkeyMcMac'')
* Fix issues caused by attached node placement prediction (''TurkeyMcMac'')
* Avoid shadow flicker at certain angles (''x2048'')
* Chat: fix the unicode characters crowded together on prompt (''snowyu'')
* Take geographic distance into account for server list ordering (''sfan5'')
* Fix sneaking on nodes with large collision boxes (''SmallJoker'')
* Faster light calculations for rendering (''TurkeyMcMac'')
* Android: Improve double-tap for jump detection (''srifqi'')
* Add Bloom shader (''x2048'')
* Restore and enhance bouncy behavior (''pecksin'')
** Bouncy nodes now let you control the jump height with the jump/sneak keys
* Fix &lt;code&gt;liquid&lt;/code&gt; drawtype faces sometimes not rendering (''Wuzzy'')
* Apply DPI Scaling to the main menu (''ElliottLester'')
* Improve shadow updates efficiency (''x2048'')
* Textures: introduce world-align overrides (''SmallJoker'')
* Fix crash when stars are reset (''Zughy'')

=== World / Server / Environment ===
* Reduce server CPU consumed by occlusion culling (''lhofhansl'')
* Improve loaded block handling (i.e. better efficiency) (''lhofhansl'')
* Fix &lt;code&gt;/help&lt;/code&gt; privs checks (''TurkeyMcMac'')
* Add mod storage PostgreSQL backend (''TurkeyMcMac'')
* Update floating nodes when liquid underneath vanishes (''TurkeyMcMac'')
* Add zstd compression support to API function (''20kdc'')

=== Script API / Modding ===
* Server: Fix error caused by sending too long chat messages (''SmallJoker'')
* Correct handling of leftover items in &lt;code&gt;core.item_eat&lt;/code&gt; (''DS'')
* Various lua_api.txt clarifications and fixes (''Wuzzy'', ''jordan4ibanez'', ''kab0u'', ''veprogames'', ''aerkiaga'', ''DS'')
* Improve &lt;code&gt;minetest.close_formspec&lt;/code&gt; server-side safety (''luk3yx'')
* Handle nodes changed within another LBM and ABM loop (''TurkeyMcMac'')
* Fix segfault caused by invalid PNG data in &lt;code&gt;[png:&lt;/code&gt; (''SmallJoker'')
* Add &lt;code&gt;minetest.get_player_window_information()&lt;/code&gt; (''rubenwardy'', ''DS'' (bugfix))
* Make &lt;code&gt;body_orbit_tilt&lt;/code&gt; configurable (''sofar'')
* Add chat HUD flag (#13189) (''GreenXenith'')
* Improve &lt;code&gt;MetaDataRef:{get,set}_float&lt;/code&gt; precision (''TurkeyMcMac'')
* Fix error caused by an empty separator for &lt;code&gt;string.split&lt;/code&gt; (''TurkeyMcMac'')
* Add &lt;code&gt;player:set_lighting( {saturation = float} )&lt;/code&gt; (''lhofhansl'')
* Add callback &lt;code&gt;on_mapblocks_changed&lt;/code&gt; (''TurkeyMcMac'')
* Improved Lua error handling (''TurkeyMcMac'')
* Expose &lt;code&gt;dtime_s&lt;/code&gt; to LBM handler (''sfan5'')
* Let mods choose a forceload limit (''TurkeyMcMac'')
* Add &lt;code&gt;minetest.get_mapgen_edges&lt;/code&gt; (''TurkeyMcMac'')
* Add &lt;code&gt;minetest.get_game_info&lt;/code&gt; and allow reading game.conf (''TurkeyMcMac'')
* Add support for facedir/4dir nodes to be attached with &lt;code&gt;attached_node&lt;/code&gt; (''Wuzzy'')
* Add additional &lt;code&gt;attached_node&lt;/code&gt; options: always attach to ceiling, always attach to floor (''Wuzzy'')
* Fix errors caused by schematic reading (''TurkeyMcMac'')
* Fix &lt;code&gt;set_nametag_attributes&lt;/code&gt; resetting the text in subsequent calls (''snowyu'')
* game.conf: Add setting to use volatile a map backend (''SmallJoker'')
* Allow rotating entity selectionboxes (''appgurueu'')
* Add VoxelArea() constructor for easier use (''TurkeyMcMac'')
* Fix formspec focus issue caused by empty element names (''DS'')
* Faster vector, node and content ID access when using LuaJIT (''TurkeyMcMac'')
* Speed up find_nodes_in_area (''TurkeyMcMac'')
* Add an item pick up callback (''DS'')
* Implement tool use sounds (''sfan5'')
* Fix inconsistent craft replacement behavior (''Wuzzy'')
* Fix potential error in craft recipes (''savilli'')
* Add paramtype2s &lt;code&gt;4dir&lt;/code&gt; and &lt;code&gt;color4dir&lt;/code&gt; for 4 horizontal rotations and 64 colors (''Wuzzy'')
* Bugfix: Allow looped animation to be used safely with old clients (''sfan5'')
* Reassure previous nil behaviour for &lt;code&gt;tiles&lt;/code&gt; and &lt;code&gt;special_tiles&lt;/code&gt; (''Zughy'')
* Add buffer argument to &lt;code&gt;VoxelManip:get_light_data&lt;/code&gt; (''TurkeyMcMac'')
* Fix crash when crafting callbacks return strings (''Zughy'')

=== Misc / Maintenance ===
* Fix crash while exiting to the main menu on macOS (''x2048'')
* Rendering code cleanups (''x2048'')
* Fix occasional black screen on startup (''x2048'')
* Android: Build and logging improvements (''sfan5'')
* Improve installation instructions (''lynx197'', ''sofar'', ''tamara-schmitz'')
* Various code cleanups and optimizations (''sfan5'', ''ROllerozxa'', ''nerzhul'', ''GermanAizek'')
* Implement --debugger option to improve UX when debugging crashes (''sfan5'')
* Various Development Test changes
** Many, many additions and improvements (''Wuzzy'')
** Add jukebox and branding iron (''DS'')
* Development Test is no longer officially distributed with Minetest releases
* Android: various maintenance and fixes (''srifqi'')
* Unittest improvements (''Wuzzy'', ''TurkeyMcMac'', ''rubenwardy'')

=== Minetest Game ===
* Limit and sanitize formspec fields (''appgurueu'')
* Fix player_api.set_model not updating the animation (''appgurueu'')
* Ensure chests close properly (''fluxionary'')
* Ensure proper creative hand override (''AntumDeluge'')
* Fix error if /home is executed with an invalid name (''zmv7'')
* Fix wall craft registrations (''alek13'')
* Screwdriver: 4dir node support (''Wuzzy'')

== 5.6.0 → 5.6.1 ==
Released on 19 September 2022.

=== Client / Audiovisuals ===
* Fix tooltips for dropdown, scrollbar and more (''Desour'')
* Allow the comma as clickable URL component (''pecksin'')
* Correct the entity glow calculation (''x2048'')
* Get the setting &lt;code&gt;texture_min_size&lt;/code&gt; to work again (''fluxionary'')
* Scale hardcoded/integrated GUIs with the system-reported DPI (''ElliottLester'')
* Overwriting a package via "Content" no longer triggers an error (''rubenwardy'')

=== World / Server / Environment ===
* Fix potential use-after-free with item metadata (''TurkeyMcMac'')
* Compatibility patch to not freeze older clients due to negative "frame_length" Tile Animation values (''sfan5'')
* Dynamic shadows performance improvement by delaying non-urgent mapblocks (''x2048'')

=== Script API / Modding ===
* Fix several crashes caused by &lt;code&gt;clear_craft&lt;/code&gt; in combination with aliases (''savilli'')
* Serialization: Restore (full) pre-5.6.0 compatibility (''appgurueu'')
* LuaJIT: Workaround to allow larger serializations (''appgurueu'')
* Enforced hp_max &gt; 0 for entities (''appgurueu'')
* Node Definition "tiles" and "special_tiles" again default to &lt;code&gt;nil&lt;/code&gt; when not specified (''Zughy'')
* Allow &lt;code&gt;minetest.register_on_craft&lt;/code&gt; to return strings (was: ItemStack) (''Zughy'')
* &lt;code&gt;ObjectRef:set_stars&lt;/code&gt; to reset the stars no longer throws an error (''Zughy'')

=== Misc / Maintenance ===
* x86 Android build fixes (''savilli'')

== 5.5.0 → 5.6.0 ==
Released on 4 August 2022

=== Deprecations and compatibility notes ===
* &lt;code&gt;name&lt;/code&gt; in game.conf is deprecated for the game title
** For specifying the game title from now on, use &lt;code&gt;title&lt;/code&gt; instead

=== Client / Audiovisuals ===
* Dynamic shader-based shadows for: nodes, entities, wield (''x2048'')
** Includes many, many bugfixes and improvements (tuning, performance)
* Fixed statbar HUD background scaling and numbering (''appgurueu'')
* Apply texture pack main menu textures immediately (''ROllerozxa'')
* Fix footsteps for players whose collision box min y != 0 (''grorp'')
* Add depth sorting for node faces (''x2048'')
** This fixes appearance issues when looking through multiple semi-transparent nodes.
** This works only up to a distance of 16 nodes by default. Use the &lt;code&gt;transparency_sorting_distance&lt;/code&gt; setting to adjust this
* Optimize swapping nodes with equivalent lighting (''TurkeyMcMac'')
* Fix item entity Z-fighting (''appgurueu'')
* Use mod names/titles instead of technical names to display (''GoodClover'')
* Fix texture packs not showing as enabled in mainmenu (''rubenwardy'')
* Debug screen now shows "&lt;unknown node&gt;" at the top if an unknown node is pointed (''Wuzzy'')
* Enable chat clickable weblinks by default (Ctrl+Click) (''Froggo'')
* HUD: Fix outdated selection boxes (''appgurueu'')
* Make &lt;code&gt;no_screenshot&lt;/code&gt; image more clear (''Zughy'')
* Add register dialog to separate login/register (''rubenwardy'')
* No damage effects on &lt;code&gt;hp_max&lt;/code&gt; change (''appgurueu'')
* Fix updating glow and light calculation on entities (''sfan5'')
* Fix unknown nodes sometimes displaying the "no texture" instead of the "unknown node" texture (''Wuzzy'')

=== World / Server / Environment ===
* Distinct mod path values in world.mt to avoid issues with duplicated mod names (''rubenwardy'')
* Fix broken server startup if curl is disabled (''sfan5'')
* Increase max. objects per block defaults (''appgurueu'')
* Builtin: Allow to revoke unknown privileges (''SmallJoker'')
* Fix some textures not being sent correctly to older clients (''Oblomov'')
* Fix several registration/authentication related issues (''sfan5'')
* Fix dependency enabling of mods and modpacks (''rubenwardy'', ''TurkeyMcMac'')
* Fix cooking and fuel crafts with aliases (''TurkeyMcMac'')
* Commands: Some numbers can be replaced or prepended with "&lt;code&gt;~&lt;/code&gt;" for values relative to the current one (''Wuzzy'')
** "&lt;code&gt;~&lt;/code&gt;" is equivalent to "&lt;code&gt;~0&lt;/code&gt;"
** Supported commands: &lt;code&gt;/deleteblocks&lt;/code&gt;, &lt;code&gt;/emergeblocks&lt;/code&gt;, &lt;code&gt;/fixlight&lt;/code&gt;, &lt;code&gt;/spawnentity&lt;/code&gt;, &lt;code&gt;/teleport&lt;/code&gt;, &lt;code&gt;/time&lt;/code&gt;
** Example: "&lt;code&gt;/teleport 15 ~5 ~&lt;/code&gt;" teleports to (15, &lt;current Y coordinate plus 5&gt;, &lt;current Z coordinate&gt;)
* Don't allow banning in singleplayer (''sfan5'')
* Docs: Add description of privileges (''x2048'')
* Increase max FPS on Android to 60 (''ROllerozxa'')
* Add many limits to settingtypes + engine (''Wuzzy'', ''SmallJoker'')
* Reorganise settingtypes.txt (''rubenwardy'')

=== Script API / Modding ===
* Improved formspec documentation (''DS'')
* Optimization: Send HUD flags only if they changed (''appgurueu'')
* Allow to set the displayed item count and its alignment via item meta: &lt;code&gt;count_meta&lt;/code&gt;, &lt;code&gt;count_alignment&lt;/code&gt; (''DS'')
* Add support for 'seed' in &lt;code&gt;disallowed_mapgen_settings&lt;/code&gt; (''Wuzzy'')
* List of documentation improvements:
** &lt;code&gt;AreaStore&lt;/code&gt; (''SmallJoker'')
** Lua &lt;code&gt;vector&lt;/code&gt; helper class (''sfan5'')
** &lt;code&gt;spawn_by&lt;/code&gt; for decorations (''Zughy'')
** LBM documentation (''TurkeyMcMac'')
** Overall improvements (''sfan5'')
* Allow &lt;code&gt;get_sky&lt;/code&gt; to return a table of all sky-related parameters (''Zughy'')
* Add &lt;code&gt;basic_debug&lt;/code&gt; HUD flag to control display of debug info like position in the debug screen (on by default) (''appgurueu'')
* Fix memory leak from &lt;code&gt;SpatialAreaStore&lt;/code&gt; (''setupminimal'')
* Add function &lt;code&gt;ObjectRef:set_lighting()&lt;/code&gt; to control shadow intensity from the game/mod (''x2048'')
* Fix '&lt;code&gt;[combine&lt;/code&gt;' when &lt;code&gt;EVDF_TEXTURE_NPOT&lt;/code&gt; is disabled (''paradust7'')
* &lt;code&gt;hud_get&lt;/code&gt;: Return precision field for waypoint (''appgurueu'')
* Add Async environment for parallelized Lua code execution (''sfan5'')
** &lt;code&gt;minetest.handle_async&lt;/code&gt;
** &lt;code&gt;minetest.register_async_dofile&lt;/code&gt;
* Fix Minetest blaming the wrong mod for errors (''appgurueu'')
* Deprecate game.conf &lt;code&gt;name&lt;/code&gt;, use &lt;code&gt;title&lt;/code&gt; instead (#12030) (''rubenwardy'')
* Protect a few more settings from being set from mods (''sfan5'')
* Add function &lt;code&gt;ObjectRef:respawn()&lt;/code&gt; to invoke player respawn (''sfan5'')
* Handle Lua entity HP changes correctly (like punches) (''sfan5'')
* Add tool helper function &lt;code&gt;ItemStack:add_wear_by_uses()&lt;/code&gt; to add tool wear in such a way that it has a given number of uses (''Wuzzy'')
* Add &lt;code&gt;minetest.get_tool_wear_after_use&lt;/code&gt; to simulate tool wear when expecting it to break after a given number of uses (''Wuzzy'')
* &lt;code&gt;on_deactivate&lt;/code&gt; entity callback: distinguish removal and unloading (''appgurueu'')
* Remove &lt;code&gt;tile_images&lt;/code&gt; and &lt;code&gt;special_materials&lt;/code&gt; obsolete code (''Zughy'')
* &lt;code&gt;set_stars&lt;/code&gt;: Allow to set maximum star opacity at daytime with &lt;code&gt;day_opacity&lt;/code&gt; (''Wuzzy'')
* FormSpec: 9-slice images, &lt;code&gt;animated_image&lt;/code&gt;, and &lt;code&gt;fgimg_middle&lt;/code&gt; (''v-rob'')
* Animated particle spawners (''velartrill'')

=== Misc / Maintenance ===
Code details are intentionally omitted due to the changelog target audience's interests.

* Fix macOS compile instructions (''sfan5'')
* Various C++ code cleanups and improvements (''TurkeyMcMac'', ''sfan5'', ''Oblomov'', ''SmallJoker'', ''Octavian'', ''RichardTry'', ''savilli'', ''JosiahWI'')
* List of DevTest game improvements:
** TGA test nodes (''ehrlemann'')
** Test weapons and armorball modes (''Wuzzy'')
** Nodes and items for testing overlays (''Wuzzy'')
** Entity lifecycle and callbacks (''sfan5'')
** Item metadata editor (''Wuzzy'')
* Minetest now uses C++14
* Remove direct OpenGL(ES) dependency (''sfan5'')
* Compile Lua as C++ to properly catch exceptions (''TurkeyMcMac'')
* Build system improvements (''sfan5'', ''ShadowNinja'', ''LoneWolfHT'')
* Run automated tests when Lua files change (''x2048'')
* Add JSON (de)serialization benchmarks (''paradust7'')
* Performance optimizations by caching (mapblocks, collisionbox) (''sfan5'')
* Add more Prometheus metrics (''sfan5'')
* Add documentation to list breaking changes for the next major release (''Zughy'')
* Patch built-in Lua to fix miscompile on Android (''paradust7'')
* Fix BSD iconv declaration (''savilli'')
* Fix Android input box crash (''ROllerozxa'')


=== Minetest Game ===

* Improved cart movement behavior (''SmallJoker'')
** Improved direction handling
** Smoother-out 'end-of-rail' animation
** Other improvements
* Dynamic shadow intensity increases with cloud density (only has an effect if you have dynamic shadows enabled) (''lhofhansl'')
* Allow mods to override player animation globalstep with &lt;code&gt;player_api.globalstep&lt;/code&gt; (''LoneWolfHT'')
* Log API added (''nixnoxus'')
* Fix crash if player has no model (''Lars Mueller'')
* Fix broken &lt;code&gt;get_animation&lt;/code&gt; in &lt;code&gt;player_api&lt;/code&gt; (''bell07'')
* Fix furnace fire sound continuing to play after being destroyed (''Wuzzy'')
* Fix TNT blowing up &lt;code&gt;ignore&lt;/code&gt; nodes (''Wuzzy'')
* Fix some hoes not breaking after the intended number of uses (''Wuzzy'')
* Fix book duplication glitch (''appgurueu'')
* Fix incorrect behavior of glass and obsidian glass if param2 was changed (''appgurueu'')
* Fix cart sometimes facing the wrong way at slopes (not a 100% perfect bugfix tho) (''SmallJoker'')
* New translation: Polish (''mrubax10'')
* Translation updates: Ukrainian (''baytuch''), Russian (''baytuch''), German (''Wuzzy''), Lojban (''Wuzzy''), Esperanto (''quarthex'')

== 5.5.0 → 5.5.1 ==
Released on 15 May 2022.

=== World / Server / Environment ===

* Fix server crash due to duplicate user registrations (''sfan5'')
* Fix cooking and fuel crafts with aliases (''Jude Melton-Houghton'')
* Fix some textures not being sent correctly to older clients (''Giuseppe Bilotta'')
* Fix broken server startup if curl is disabled (''sfan5'')
* Fix password changing getting stuck if wrong password is entered once (''sfan5'')
* Apply disallow_empty_password to password changes too (''sfan5'')

=== Client / Graphics ===

* Fix various issues with Select Mods and Content (''rubenwardy'', ''Jude Melton-Houghton'', ''Alex'')
* ContentDB: Fix ungraceful crash on aliases when list download fails (''rubenwardy'')
* Fix performance issue due to hardware buffer counters (''paradust7'')
* HUD: Update selection highlight every frame to avoid glitches (''Lars Müller'')
* Fix '[combine' when EVDF_TEXTURE_NPOT is disabled (''paradust7'')
* Fix footsteps for players whose collision box min y != 0 (''Gregor Parzefall'')
* Fix undefined behavior in TileLayer (''Daroc Alden'')
* Use absolute value for bouncy in collision (''pecksin'')
* Fix builtin statbar backgrounds (''Lars Mueller'')

=== Misc ===

* Fix possible unreliable behavior due to uninitialized variables (''Octavian'')
* Fix Minetest blaming the wrong mod for errors (''Lars Müller'')
* Fix some memory leaks (''SmallJoker'', ''Daroc Alden'', ''Daroc Alden'')

=== Minetest Game ===

* player_api mod: Fix crash if player has no model (''appgurueu'')
* player_api mod: Mods can now override globalstep by overriding player_api.globalstep (''LoneWolfHT'')
* Shadow intensity (of dynamic shadows) changes with weather (''lhofhansl'')
* Some cart movement behavior fixes (''SmallJoker'')
* Fix some translations in uk and ru locales (''baytuch'')

== 5.4.0 → 5.5.0 ==
Released on 30 Jan 2022.

=== Deprecations and compatibility notes ===

* FORMSPEC_API_VERSION is now 5
* New maps are now zstd compressed to reach faster and/or more efficient compression
* Switched to our own fork of the rendering engine: IrrlichtMT
** Removed support for DirectX
** Dropped support for obscure and undocumented file formats: pcx, ppm, psd, wal, and rgb
* Modding: Missing "mod.conf" is now deprecated. Results in warnings (''rubenwardy'')
** Add mod.conf with name = yourmodname
* Modding: depends.txt and description.txt are now deprecated
** Specify dependencies using "depends" and "optional_depends" in mod.conf
** Specify description using "description" in mod.conf
* Modding: Creating vectors like this: &lt;code&gt;{x=1, y=2, z=3}&lt;/code&gt; is now deprecated
** Use &lt;code&gt;vector.new&lt;/code&gt; instead
* Bitmap fonts are no longer supported
** Use TTF fonts instead

=== Features: General ===

* Add game name to server status string (''sfan5'')
* Improve TTF support for pixel-style fonts (''v-rob'')
* Joystick support for DragonRise GameCube controller (''Izzette'')
* Add "&lt;code&gt;MINETEST_MOD_PATH&lt;/code&gt;" environment variable (''emixa-d'')
* Touch UI support for desktop builds (#10729) (''TheBrokenRail'')
* Switch MapBlock compression to zstd (''lhofhansl'')
* Joystick sensitivity for player movement (''NeroBurner'') + fixes (''sfan5'')
* Gettext support on Android (''Pevernow'')
* Make web links in chat clickable (Feature disabled by default, use setting &lt;code&gt;clickable_chat_weblinks&lt;/code&gt;) (''pecksin'')
* Add a key to toggle display map block boundaries (F8 by default) (''grapereader'')
* Improved wording of various chat command outputs (''Wuzzy'')
* Normal texture support (for minimap shading) (again) (''numberZero'')
* Scale mouse/joystick sensitivity depending on FOV (''Elias Åström'')
* Various DevTest game additions and improvements (''Wuzzy'')
* Chat commands: Show the execution time if the command takes a long time (''HybridDog'')
* Improved item placement prediction (''sfan5'')
* Anticheat: Faraway inventory access protection (''SmallJoker'') 
* Pause animations while game is paused (''numberZero'')

=== Features: Main menu and ContentDB ===

* Chop game background in mainmenu (''appgurueu'')
* ContentDB: Add support for package aliases / renaming (''rubenwardy'')
* Improved "Join Game" tab (''sfan5'')
* Builtin function translation (''Wuzzy'', ''Zughy'')
* Translation support for the builtin functions (''Wuzzy'', ''snowyu'') + updates (''Wuzzy'', see CONTRIBUTING file)
* Handle modpacks containing modpacks properly (''Elias Fleckenstein'')
* Texture pack toggle by double clicking (''Yaman Qalieh'')

=== Features: Modding ===

* Sky API: Reset by empty arguments (''Zughy'')
* Use a database for mod storage (internal) + CSM auto-migration (''TurkeyMcMac'')
* Add padding[] element to formspecs (#11821) (''v-rob'')
* Disable inventory if player's inventory formspec is blank (''ROllerozxa'')
* Add minetest.disconnect_player (''Corey Powell'')
* Add Lua bitop library (''Lejo'')
* Allow for game-specific menu music (''ExeVirus'')
* Add minetest.rmdir, minetest.cpdir and minetest.mvdir (''octacian'')
* Add no_texture.png as fallback for unspecified textures (''Wuzzy'')
* Add minetest.get_server_max_lag() (''Wuzzy'')
* Split node field 'liquid_viscosity' into two: liquid_viscosity (how fast liquid flows) and move_resistance (how much it slows players) (''Wuzzy'')
* Improved dynamic_add_media functionality (''sfan5'')
* Add group-based tool filtering for node drops (''Treer'')
* Add disable_settings to game.conf to get rid of "Enable Damage"/"Creative Mode"/"Host Server" checkboxes (''Df458'')
* Add a simple PNG image encoder with Lua API + texture modifier &lt;code&gt;[png&lt;/code&gt; (''hecks'')
* Add bold, italic and monospace font styling for HUD text elements (''sfan5'')
* Add wallmounted support for plantlike and plantlike_rooted nodes (''Wuzzy'')
* Add API for mods to hook liquid transformation events (''Warr1024'')
* Add min_y and max_y checks for Active Block Modifiers (ABM) (''sfence'')
* Add metatables to Lua vectors (''DS'')
* Add minetest.compare_block_status function (''SmallJoker'')
* Add minetest.colorspec_to_colorstring (''v-rob'')
* Put torch/signlike node on floor if paramtype2=="none" (''Wuzzy'')
* Return ObjectRef from minetest.spawn_falling_node() (''benrob0329'')
* Modifyable player fall damage via armor group (''Wuzzy'')
* Add vector.to_string and vector.from_string (#10323) (''DS'')
* Add math.round and fix vector.round (''v-rob'')
* Degrotate support for mesh nodes (''numberZero'') + fixes (''sfan5'', ''Wuzzy'')
* lua_api.txt: Fix style selector examples (''Df458'')
* Nested Settings are now also contained in to_table (''SmallJoker'')

=== Bugfixes ===

* Fix Minetest logo when installed system-wide (''ROllerozxa'')
* Cancel emerge callbacks on shutdown (''TurkeyMcMac'')
* Free arguments of cancelled minetest.after() jobs (''sfan5'')
* Fix damage wraparound if very high damage (''Wuzzy'')
* Cap damage overlay duration to 1 second (''Wuzzy'')
* Rendering fixes: Add more neighbors on mesh update (''numberZero'')
* Don't let HTTP API pass through untrusted function (''sfan5'')
* Fix URL escaping in content store (''sfan5'')
* Fix find_nodes_in_area misbehaving with out-of-map coordinates (''sfan5'')
* Minimap: gamma-correct average texture colour calculation (''HybridDog'')
* Fix item duplication if player dies during interact callback (''sfan5'')
* View bobbing fixes (''appgurueu'')
* Fix player HP desync between client and server (''savilli'')
* Rendering fixes: Order drawlist by distance to the camera (''x2048'')
* Fix crash when .conf release field is invalid (''rubenwardy'')
* Performance: Fix client-side performance of chat UI (''DS'')
* Fix HUD multiline text alignment (''appgurueu'')
* Send correct updates to clients after node metadata clear (''TurkeyMcMac'')
* Remove redundant on_dieplayer calls (''savilli'')
* Fix 6th line of infotext being cut off in half (''Wuzzy'')
* Validate staticdata and object property length limits (''sfan5'')
* Fix scaled world-aligned textures being aligned inconsistently for non-normal drawtypes (''Wuzzy'')
* Various lua_api.txt corrections and improvements (''Df458'', ''random-geek'', ''Wuzzy'', ''Francisco'', ''Zughy'')
* Run on_grant and on_revoke callbacks after privs change (''AFCMS'')
* Fix base64 validation and add unittests (''appgurueu'')
* Fix cloud fog being broken for high clouds (''Wuzzy'')
* Attachments: various bugfixes (''SmallJoker'')
* Rendering engine fxes and cleanups (''nerzhul'')
* Multiple OpenGL ES fixes (''sfan5'')
* Make edit boxes respond to string input (IME) (''yw05'')
* cURL timeout fixes and increased default timeout (''sfan5'')
* Fix wield image of plantlike_rooted (''Wuzzy'')
* Fix attached-to-object sounds volume (''Desour'')
* Fix segfault for model[] without animation speed (''kilbith'')
* Crash fix when models fail to load (''sfan5'')
* Access protections for per-player detached inventories (''SmallJoker'')
* mg_name and mg_flags can no longer be set by Lua (minetest.conf) (''sfan5'')
* Interlaced 3D mode fixes (''srifqi'')
* Fix hud_change and hud_remove functionality after hud_add calls (''savilli'')
* Fix number of times a tool can be used before breaking being off by a number between 1 and 32767 (''Wuzzy'')
* Various stability fixes (server and client crashes)

=== Maintenance ===

* Rendering improvements: use dedicated GPU, improve frame calculations (''sfan5'')
* Fully remove bitmap font support (use TTF now) (''sfan5'')
* Restore GCC 5 compatibility (''JosiahWI'')
* Remove creative/damage info in Esc/Pause menu (''Wuzzy'')
* Update to Android target SDK 30 (''rubenwardy'')
* Add macOS build docs (''andkerr'')
* Android: Use scoped app storage (''rubenwardy'')
* Make /status message easier to read (''Wuzzy'')
* Clean up/improve some scriptapi error handling code (''sfan5'')
* Add hint to error message on how to build with in-tree Irrlicht (''20kdc'')
* Optimize vector length calculations (''Lean Rada'')
* Remove hardcoded "You died." message in chat (''Wuzzy'')
* Remove unsupported video drivers (''hecks'')
* Document hypertext formspec element escaping (''Wuzzy'')
* Drop --videomodes, fullscreen_bpp and high_precision_fpu settings (''sfan5'')
* PostgreSQL fixes and improved error messages (''sfan5'')
* Improved liquid documentation (''Wuzzy'')
* Improved mipmapping-related code (''sfan5'')
* Rendering engine was changed from Irrlicht to [[IrrlichtMt]] (Minetest's fork of Irrlicht) (''sfan5'')
* Performance: Draw items as 2D images (instead of meshes) when possible (''sfan5'')
* Sanity check: Block &amp; report player self-interaction (''appgurueu'')
* Multiple font code cleanups and improvements (''sfan5'')
* IrrlichtMt switch related fixups (''kilbith''. ''sfan5'', ''nerzhul''))
* Performance improvements during media/mesh loading (''sfan5'')
* Json is now taken from the system by default (''sfan5'')
* Various build bot and setup changes (''sfan5'')
* Restructured "/teleport" command (''HybridDog'')
* Consistent Aux1 key naming (''Wuzzy'')
* Many many internal cleanups and fixes (''sfan5'', others)

=== Minetest Game ===
* Add “Read” and “Write” tabs to book interface when you own the book (''orbea'')
* Allow to write books without text or title (''orbea'')
* Make identical keys stackable (''Luis Royer'')
* Fix creative inventory trash slot not working for player named “trash” (''Montandalar'')
* Fix sunlight propagation for glass stair/slab (''An0n3m0us'')
* Fix glass bottle with firefly not being placable in vessels shelf (''An0n3m0us'')
* Other bugfixes
* Translations: Esperanto (''Jason Cartwright''), Russian (''ptah-alexs''), Japanese (''nogajun''), German (''Wuzzy''), Slovak (''Daretmavi''), French (''Olivier Dragon''), Swedish (''ROllerozxa''), Chinese (''雷哲翰''), Ukrainian (''baytuch'')

== 5.3.0 → 5.4.0 ==

Released on 23 Feb 2021.

=== Deprecations and compatibility notes ===

* Removed support for bumpmapping, generated normal maps, and parallax occlusion (''Lars'', ''hecks'')
** These features had fundamental issues, several bugs, and were broken on some platforms.
* Deprecated node field value: &lt;code&gt;use_texture_alpha = true/false&lt;/code&gt;
** Fix: Use &lt;code&gt;"clip"&lt;/code&gt;, &lt;code&gt;"blend"&lt;/code&gt; or &lt;code&gt;"opaque"&lt;/code&gt; (see documentation)
* Deprecated &lt;code&gt;get_player_velocity&lt;/code&gt; and &lt;code&gt;add_player_velocity&lt;/code&gt; (''rubenwardy'') 
** Fix: replace with &lt;code&gt;get_velocity()&lt;/code&gt; and &lt;code&gt;add_velocity()&lt;/code&gt;
* Deprecated multiply and divide with two vectors (Schur product and quotient) (''DS'')
** Fix: implement your own version
* By default, the crosshair will now change to an "X" when pointing to objects. If your game had a custom crosshair, this might come as a surprise and break graphical consistency.
** Fix: Specify object_crosshair.png image
* Added deprecation warning for node field: &lt;code&gt;alpha&lt;/code&gt; (only limited compatibility provided)
** This was already deprecated and undocumented.
** Fix: Replace by &lt;code&gt;use_texture_alpha&lt;/code&gt;
* Fixed deprecation warning when certain ores types ("sheet", "puff", "blob" and "vein") are missing noise_params (''rubenwardy'')
** These ore types require noise_params. To keep the same behaviour, you can use the following values:

&lt;pre&gt;
noise_params = {
    offset  = 0,
    scale   = 1,
    spread  = {x=250, y=250, z=250},
    seed    = 12345,
    octaves = 3,
    persist = 0.6,
    lacunarity = 2,
    flags = "defaults",
}
&lt;/pre&gt;

=== Features ===

==== General ====

* Make 'place' and 'dig' keys freely configurable (only via minetest.conf for now: &lt;code&gt;keymap_place&lt;/code&gt; and &lt;code&gt;keymap_dig&lt;/code&gt;) (''ANAND'', ''Markus Koch'')
* Freely bindable mouse buttons (only via minetest.conf for now: &lt;code&gt;KEY_LBUTTON&lt;/code&gt;, &lt;code&gt;KEY_MBUTTON&lt;/code&gt;, &lt;code&gt;KEY_RBUTTON&lt;/code&gt;) (''ANAND'', ''Markus Koch'')
* Add 'ores' global mapgen flag (''Paramat'')
* Mapgen Flat: Add caverns, disabled by default (''Paramat'')
* Semi-transparent background for nametags (''Zughy'', ''rubenwardy'')
* Disable object selectionboxes by default (''LoneWolfHT'')
* Change crosshair when pointing to objects ("X" shape by default) (''LoneWolfHT'')
* Shaders for Android (GLES 2) (''Vitaliy'')
* Load media from subfolders (''DS'')
* Allow configuring block disk and net compression. Change default disk level. (''Lars'')

==== Main menu and ContentDB ====

* ContentDB: Add dependency resolution, update all, and download queues (''rubenwardy'')
* ContentDB: Add overwrite dialog when content is already installed (''rubenwardy'')
* ContentDB: Use icons for buttons (''Zughy'')
* Add open user data button to main menu (''rubenwardy'')
* Main menu: Add clear button and icon for search input (''Andrey'')
* Improve layout of main menu 'local' tab (''Paramat'')

==== Modding: GUI (Formspecs) / HUD ====

* Add sound effect style option (''Pierre-Yves Rollo'')
* Add 3d model formspec element (''Jean-Patrick Guerrero'', ''SmallJoker'', ''Thomas--S'')
* Add minimap and compass HUD elements (''Pierre-Yves Rollo'', ''Jean-Patrick Guerrero'')
* Make bgcolor tint button background images (''Hugues Ross'')
* Add gradients and borders to FormSpec boxes (''v-rob'')
* Add font styling options (''v-rob'')
* Add set_focus[] to initially focus elements (''v-rob'')
* Make dropdowns optionally return event based on index, not value (''v-rob'')
* Avoid drawing clipped out formspec elements (''EvidenceB'')
* Darken tabheader background color (''Kezi'')
* Add inventory list styling: spacing, slot size, and noclip (''v-rob'')
* Add support for custom object crosshair image: object_crosshair.png (''LoneWolfHT'')

==== Modding: Other ====

* Add support for showing attached objects whilst in first person mode (''Jordach'')
* Add ability to cancel a minetest.after call after it was started (''tenplus1'')
* Add on_rightclickplayer callback (''sorcerykid'')
* Add on_deactivate callback for luaentities (''hecks'')
* Add minetest.get_objects_in_area (''Elias Fleckenstein'')
* Add ObjectRef:get_children() (''Zughy'')
* Add a short_description to be used by mods (''DS'')
* Add minetest.get_artificial_light and minetest.get_natural_light (''HybridDog'')
* Add register_on_chatcommand to SSM and CSM (''Elijah Duffy'')
* Add vector.offset (''DS'')
* Register missing get_texture_mod function (''karamel59'')
* content_cao: Support texture animation for upright_sprite (''sfan5'')
* Add PUT and DELETE request + specific method value to HTTP API (''Lejo'')
* Nodes are now allowed to have the "liquid" or "flowingliquid" drawtype for non-liquids (liquidtype=none) (''Wuzzy'')
* Play 'place_failed' sound if trying to place a node into an occupied space or it was an "attachable" node that failed to attach (''Wuzzy'')
* Implement grouped mode for find_nodes_in_area (''sfan5'')
* Clean up sound_fade (''hecks'')
* Chat commands: Show help message if func returns false without message (''HybridDog'')
* Node use_texture_alpha field supports now 3 modes "blend", "clip" and "opaque" (deprecated true/false values)

=== Other enhancements and maintenance ===

* Cross-reference the node level manipulation functions (''Oblomov'')
* Update fallback fonts and mark additional locales as broken (''sfan5'')
* Clean up l_object.cpp (''Zughy'')
* Devtest: Improve various things (''Paramat'', ''HybridDog'', ''Wuzzy'')
* Android: Add CI with saving artifacts (''Maksim'')
* Add NetBSD cpu affinity support code (''David CARLIER'')
* Android: drop simple MainMenu (''Maksim'')
* Add support for Haiku OS (''David CARLIER'')

=== Bug fixes ===

==== Security ====

* Prevent players accessing inventories of other players (''Lars Müller'')
* Inventory: Protect Craft and Drop actions (''SmallJoker'')
* Prevent interacting with items out of the hotbar (''Lejo'')
* Fix inventory swapping not calling all callbacks (''Lars Müller'')
* Patch fast/teleport vulnerability when attached to an entity (''Elias Fleckenstein'')
* Prevent games from setting secure settings (''rubenwardy'')
* Prevent players from being able to modify ItemStack meta (''luk3yx'', ''rubenwardy'')

==== Other ====

* Fix dropped craftitems/tools not using light_source values (''LoneWolfHT'')
* Fix when on_player_hpchange is called (''SmallJoker'')
* Use JSON for favorites list, fixing many bugs (''rubenwardy'')
* Fix hypertext and textarea elementing consuming scroll events (''v-rob'')
* Fix ESC in error dialog from closing Minetest (''Yaman Qalieh'')
* Remove null bytes from TOCLIENT_BLOCKDATA (''luk3yx'')
* Load system-wide texture packs too (''Zughy'')
* Fix Android support in bump version script (''rubenwardy'')
* ContentDB: Ignore content not installed from ContentDB (''rubenwardy'')
* Sanitize server IP field in mainmenu (''Zughy'')
* Fix item tooltip background color not working (''Lars Mueller'')
* Display Minetest header when menu_last_game value isn't available anymore (''Zughy'')
* Fix minetest.is_nan (''Lars Mueller'')
* Fix some minor code issues all over the place (''sfan5'')
* Minor profiler fixes. (''Lars'')
* Fix fallnode rotation of wallmounted nodebox/mesh (''Wuzzy'')
* Make installer create its own Minetest folder (''LoneWolfHT'')
* Implement mapblock camera offset correctly (''hecks'')
* Fix MSAA stripes (''HybridDog'')
* Fix certain connected nodeboxes crashing when falling (''sfan5'')
* Avoid generating the same chunk more than once with multiple emerge threads. (''Lars'')
* Fixed various issues with stars, sky, and clouds (''numzero'')
* Fix falling image of torchlike if paramtype2="none" (''Wuzzy'')
* Fix player sprite visibility in first person (''sfan5'')
* Fix object interaction distance not being checked (''rubenwardy'')
* Block attempts to connect to the client (''red-001'')
* Fix segfault in deprecation logging due to tail call, log by default (''rubenwardy'', ''SmallJoker'')
* Player physics: Ensure larger dtime simulation steps (''Lars Müller'')
* Avoid resending near blocks unnecessarily. (''Lars'')
* Fix CSMs on arm64 (''luk3yx'')
* Fix Media... 0% on loading screen (''Maksim'')
* Implement unloading of static_save=false objects according to existing docs (''sfan5'')
* Decouple entity minimap markers from nametags replacing with show_on_minimap property (''sfan5'')
* Periodically release all mesh HW buffers to avoid an Irrlicht bottleneck. (''Lars'')
* Fix float argument check in minetest.set_timeofday() (''Zughy'')
* Avoid drawing invisible blocks on the client. (''Lars'')
* Fix scroll bar overlapping text (again) (''random-geek'')
* Reduce the FPS when the window is unfocused (''HybridDog'')
* Android: replace InputDialogActivity on simple dialog window (''Maksim'')
* Correct erroneous reported max lag with prometheus (''Buckaroo Banzai'')
* Fix horizontal/vertical merging bug of hardware-colored framed glass (''Paramat'')
* Fix chat/infotext overlap if many chat lines (''Wuzzy'')
* Settings: Fix crash on exit (''SmallJoker'')
* Record player existence in dummy database. (''Lars'')
* Darwin platform build fix (''David CARLIER'')
* Scale inventory image for scaled allfaces nodes (''Wuzzy'')
* Fix NetBSD build (''David CARLIER'')
* shaders: Fix transparency on GC7000L (''mntmn'')
* Fix MSVC compiler warnings (''adrido'')
* Fix light overflow of u8 if light is saturated at 255 (''BenjaminRi'')
* Fix missing translation call in hypertext (''Pierre-Yves Rollo'')
* Render nodeboxes with opaque material if possible (''sfan5'')
* Fix precision not working in hud_change (''Lars Müller'')
* Fix build for Visual Studio (explicitly cast pointers) (''Seeker'')
* Fix GCC class-memaccess warnings (''Paul Ouellette'')
* Falling: Fix error caused by missing param2 (''SmallJoker'')
* Allow starting local server using --go again (''SmallJoker'')
* decode_base64: Allow '=' padding character (''SmallJoker'')
* Sanitize world directory names on create. Keep original name separate (''Hugues Ross'')
* Improve bad/missing default inventory+wield images of node drawtypes, affecting: airlike, signlike, torchlike, raillike, plantlike, plantlike_rooted, firelike, flowingliquid (''Wuzzy'')
* Android: Fix ConfirmRegistration and PasswordChange input and scale size (''Maksim'')
* Formspecs: volume and key settings windows can now be closed by doubleclicking/tapping (''Zughy'')

=== Minetest Game ===
* Add crafting guide (''Paul Ouellette'')
* Added 5 wood variants of Mese Post Light (''An0n3m0us'')
* Add environment sounds for lava and active furnace (''An0n3m0us'')
* Change several block sounds (''An0n3m0us'')
* Fix players sleeping in an occupied bed (''An0n3m0us'', ''Wuzzy'')
* Fix 'sleepwalking' in bed (''An0n3m0us'', ''Wuzzy'')
* Fix sleeping player flying off the bed when damaged and flying far away from the bed after death (''An0n3m0us'')
* Fix sleeping player being immobilized and bed undiggable after death (''An0n3m0us'')
* Fix furnace infotext not always updating when removing item (''orbea'')
* New translation: Slovak (''Daretmavi'')
* New translation: Brazilian Portuguese (''ronaldo'')
* New translation: Lojban (admittedly not a very good translation) (''robintown'', ''Wuzzy'' and others)
* Update existing translations (various people)

== 5.2.0 → 5.3.0 ==

Released on 9 July 2020.

=== Modder Update Guide ===
* Lua API: &lt;code&gt;minetest.PLAYER_MAX_BREATH_DEFAULT&lt;/code&gt; set to 10 (was 11). This can cause problems with “statbar” mods (like [hudbars]) that rely on the old value, so those likely need updating
* Default in Minetest Game was incorrectly overriding dropped items. Make sure to update any overrides to pass new arguments to on_step to the original function

=== Client / Audiovisuals ===
* Smoother camera movement to fix jump glitches (''paramat'')
* More precise player controls handling (''TheTermos'')
* Fix bone-attached entities (''hecktest'')
* Fix incorrect position data on attach (''hecktest'')
* Fix HUD scaling (mainly for Android) (''MoNTE48'')
* Fix incorrect entity light calculations (''SmallJoker'', ''sfan5'')
* Add chat_log_level and chat_font_size setting (''SmallJoker'')
* New default sky color gradient (''TheTermos'')
* Change default keys for camera/minimap to C/V (''Wuzzy'')
* Fix breath bar scaling (''ANAND'')
* Fix bone position changes breaking animations (''theviper121'')
* No grey screen when C++ errors are thrown by Lua (''pauloue'')
* Android: add OpenGL ES 2 support (''MoNTE48'')
* Reuse object_shader for "wielditem" and "item" entities (''dcbrwn'')
* Shaders: Fix OpenGL &lt; 4.3 compatiblity (''SmallJoker'')
* Formspec: properly display altered inventory lists (''DS'')
* Android: Various input-related fixes (''MoNTE48'')
* Android: Android Studio support, improve everything (''MoNTE48'')
* Remove sound menu and show proper msgs if sound is off (''Wuzzy'')
* Highlight hovered formspec elements when pressing F5, for testing (''SmallJoker'')
* Implement DPI scaling for Windows (''sfan5'')
* Allow relative directories for `screenshot_path` (''Calinou'')
* Add (optional) tone mapping for entities (''dcbrwn'')
* Add new mapgen options in world creation dialog (''Wuzzy'')
* Add support for overriding item inventory/wield images in texture packs (''Df458'')

=== GUI (Formspec) ===
* Fix wrong image button scaling (''pyrollo'')
* Document &lt;code&gt;*_hovered&lt;/code&gt; and &lt;code&gt;*_pressed styles&lt;/code&gt; as deprecated (''v-rob'')
* Add buttons to ContentDB in game bar and configure world (''rubenwardy'')
* Add universal style selector “&lt;code&gt;*&lt;/code&gt;” (''v-rob'')
* Add &lt;code&gt;content_offset&lt;/code&gt; and &lt;code&gt;padding&lt;/code&gt; style properties for buttons (''Df458'')
* Add &lt;code&gt;scroll_container&lt;/code&gt; element (''DS'')
* CSS-like state-selection for style elements (''Df458'')

=== World / Server / Environment ===
* Fix liquids refusing to flow in X+ or Z+ in some cases (''sfan5'')
* Rework functionality of leveled nodes (''Wuzzy'')
* New Mapgen V7 floatland implementation (''paramat'')
* Server: Better emerge multithreading, various fixes (''sfan5'')
* Correctly indicate failure in /spawnentity (''sfan5'')
* Add PostgreSQL authentication backend (''nerzhul'')
* Add chat command "/revokeme (priv)"  (''Panquesito7'')
* Optimize get_objects_inside_radius calls (''nerzhul'')
* Fix world migration to PostgreSQL (''sfan5'')
* Collision detection fixes and follow-up bug fixes (''TheTermos'')
* Many many networking improvements (''sfan5'')

=== Script API / Modding ===
* Log warning when &lt;code&gt;secure.enable_security&lt;/code&gt; is disabled (''rubenwardy'')
* Exposed zoom key to the API (''appgurueu'')
* Add LevelDB auth database (''luk3yx'')
* Add vector functions useful for working with rotations (''NetherEran'')
* Add &lt;code&gt;minetest.is_creative_enabled&lt;/code&gt; (''Wuzzy'')
* Add &lt;code&gt;minetest.on_authplayer&lt;/code&gt; callback (''sorcerykid'')
* HUD: Implement scalable texts (''LoneWolfHT'')
* HUD: "off state" icon feature for statbars (''Wuzzy'')
* &lt;code&gt;set_fov&lt;/code&gt;: Add time-based transitions (''ANAND'')
* Expose collision information to LuaEntity &lt;code&gt;on_step&lt;/code&gt; (''sfan5'')
* Enforced type checks for registration fields (''SmallJoker'')
* Add server side translations capability (''pyrollo'')
* Fix alias handling of &lt;code&gt;minetest.get_content_id&lt;/code&gt; (''sfan5'')
* Document inheritance of different noise seeds (''paramat'')
* Add default stack size setting (''nephele'')
* Play &lt;code&gt;player_jump&lt;/code&gt; sound when player jumps (''Wuzzy'')
* HUD: Better waypoints and new image variant (''appgurueu'')
* CSM: Implement &lt;code&gt;minetest.sound_fade()&lt;/code&gt; (''sfan5'')
* Error on invalid mapgen alias (''Wuzzy'')
* Add &lt;code&gt;allowed_mapgens&lt;/code&gt; option in &lt;code&gt;game.conf&lt;/code&gt; (''wt'')
* Lua API documentation clarifications (''Wuzzy'')
* &lt;code&gt;minetest.PLAYER_MAX_BREATH_DEFAULT&lt;/code&gt; set to 10 (was 11) (''ANAND'')

=== Misc / Build ===
* Android: Hide media from galleries etc (''rubenwardy'')
* Minimal development test [minimal] renamed to “Development Test” [devtest] (''Wuzzy'')
* Complete overhaul of Development Test, many new features added for testing the engine, more documentation added in README files, etc. (''Wuzzy'')
* Particle &amp; ParticleSpawner code cleanup (''sfan5'')
* Add Prometheus support (''nerzhul'')
* Fix detection of in-place path_locale when RUN_IN_PLACE=0 (''sfan5'')
* List STATIC_LOCALEDIR in "--version" (''sfan5'')
* Many code optimizations (''sfan5'')
* Wireshark dissector update (''sfan5'')
* Split and re-organize server object code (''nerzhul'')
* Automatic build improvements (''sfan5'', ''nerzhul'')

=== Minetest Game ===
* Rename “Dry Dirt” and related blocks to “Savanna Dirt” and similar (''paramat'')
* Added Wild Cotton: grows in savannas, drops Cotton Seeds (''paramat'')
* Sort items into correct categories (''An0n3m0us'')
* Tune cloud density variation (''paramat'')
* Fix broken Creative inventory search in translation (''sfan5'')
* Make Straw Stairs/Slabs usable as fuel (''Paul Ouellette'')
* New textures: Dry Shrub, Brake Rail (''Extex101'', ''Hooded Ice'')
* Block particles when leaves decay, TNT explodes (''sfan5'')

== 5.1.0 → 5.2.0 ==

Released on 5 April 2020.

=== Client / Audiovisuals ===
* Fix alpha blending in texture modifiers (''Warr1024'')
* Make natural night light as bright as MT 0.4.16 (''paramat'')
* Shader fixes (''lhofhansl'', ''SmallJoker'')
* Clean up font caching, fix bitmap fonts (''SmallJoker'')
* Waves generated with Perlin-type noise #8994 (''lhofhansl'')
* Attachments: Fix glitches after detach (''SmallJoker'')
* Let node 'place' and 'dug' sounds be heard by other players (''sfan5'')
* Fix weird looking liquid source (''Wuzzy'')
* Basic model shading (''dcbrwn'')
* Improve arm inertia animations (''kilbith'')

=== GUI Improvements ===
* Add visual feedback for button states (''Df458'')
* Formspec: draw order and clipping for all elements (''DS'')
* Refactor internal button styling/rendering code (''Df458')
* Formspec: Fix clicking on tooltip-obstructed elements (''DS'')
* Formspec: change cursor on fields and co. (''DS'')
* Various new formspec bug fixes (''SmallJoker'')
* Formspec: Add 9-slice background support to button elements  (''Df458'')
* Formspec: add hypertext[] element (''pyrollo'')
* Formspec: animated_image[] (''Df458'', ''kilbith'')
* Make clipping of formspec elements more consistent (''Df458'')
* Remove outdated field_close_on_enter[] warnings in element parameters (''SmallJoker'')
* Fix mouse events sent to wrong GUI elements when dragging (''sfan5'')
* Restore intuitive click-through behaviour (''DS'')

=== Enhancements ===
* Wear out tools on punch (''sfan5'')
* Tunnels: Completely disable generation when 'cave width' &gt;= 10.0 (''paramat'')
* Randomwalk cave liquids: Remove deprecated 'lava depth' (''paramat'')
* Automatically enable the mod's dependencies in the world config menu (''HybridDog'')
* Clean up craft replacements docs (''pauloue'')
* Falling nodes: add missing support for light sources, most drawtypes, and paramtype2s (''Wuzzy'')
* Remove legacy flat-file map code and documentation (''random-geek'')
* Fix packet receiving in server and client (''sfan5'')
* Key settings: Cancel with escape, clear with delete (''SmallJoker'')

=== Script API / Modding ===
* CSM: Introduce get_modpath() (''sfan5'')
* CSM: Remove non-functional minetest.get_day_count() (''sfan5'')
* Add z-index management to HUD (''pyrollo'')
* Add table.key_value_swap and table.shuffle (''HybridDog'')
* Map download: Escape ':' to '_' (NTFS/FAT* systems) (''Montandalar'')
* Settings: Add get_flags API for mapgen flags (''SmallJoker'')
* Improve minetest.sound_play with ephemeral sounds and player exclusion (''sfan5'')
* Reworked validity checks for entities (''sfan5'')
* Documentation: Add advice on lifetime of ObjectRefs (''sfan5'')
* Allow texture modifiers in hotbar textures (''Warr1024'')
* Nodes with torchlike drawtype and custom visual_scale now are rendered attached to surface instead of being centered (''Wuzzy'')
* Add documentation of VoxelArea 'ystride', 'zstride' (''paramat'')
* Lua API: Document HP, breath and damage limits (''SmallJoker'')
* Various documentation improvements (''Wuzzy'')
* CSM: Corrections to client_lua_api.txt (''sfan5'')
* Make minetest.item_place_node return position of placed node (''Bluebird'')
* Call on_secondary_use when object is right-clicked (''sfan5'')
* CSM: Various fixes (''sfan5'')
* Many pathfinder bugfixes and improvements (''Wuzzy'')
** Fix failure to find path if start or end pos is over air (''Wuzzy'')
** Fix very broken implementation of A* search (''Wuzzy'')
** No longer jump through solid nodes (''Wuzzy'')
** Return nil if start or end pos is solid (''Wuzzy'')
* New set_sky, set_sun, set_moon and set_stars (''Jordach'')
* Secure and document minetest.deserialize() (''luk3yx'')
* minetest.get_content_id: throw error for unknown nodes (''HybridDog'')

=== Misc / Build ===
* Don't install fonts on ENABLE_CLIENT=0 configurations (''sfan5'')
* Fix memleaks in formspecs (''SmallJoker'')
* Android: build fixes &amp; compat fixes (''MoNTE48'', ''nerzhul'')
* Run luacheck in travis, add luacheck (''rubenwardy'')
* Android: fix cyrillic characters (''Maksim'')
* Various build issue fixes (Clang, Travis CI) (''sfan5'')

=== Minetest Game ===
* Simple weather that varies the clouds (''paramat'')
* More realistic boat physics (''gang65'')
* Creative Inventory search: Item with exact match appears in first spot (''sfan5'')
* Creative Inventory: More visual tweaks (''Andrey2470T'')
* Improve player model animation (''An0n3m0us'')
* Increase water opacity (''lhofhansl'')
* Reset spawn position when bed is destroyed (''Desour'')
* Papyrus now appears in rainforest swamps as well (''paramat'')
* New/updated translations:
** French (''DrHackberrry'')
** Spanish (''runsy'')
** Italian (''h4ml3t'')
** Russian (''Andrey2470T'')
** Swedish (''Aresiel'')
** Malay (''MuhdNurHidayat'')
** Chinese (''zaoqi'', ''IFRFSX'')
* Bugfix: TNT mod crashed when entities disappeared during explosion (''sfan5'')
* Bugfix: Papyrus in savanna did not appear in 5.1.0, it has been added back (''paramat'')
* Bugfix: Screwdriver was able to rotate torches into weird positions (''An0n3m0us'')
* Bugfix: Players could be knocked back when attached (''sfan5'')

== 5.1.0 → 5.1.1 ==

Released on 17 January 2020.

This release is based upon bugfixes from 5.2.0-dev.

=== Client / Audiovisuals ===
* Fix player-bound sound playback (''SmallJoker'')
* Fix item eat sound not played if last item (''Wuzzy'')

=== World / Server / Environment ===
* Formspecs: Reset version number on rebuild (''SmallJoker'')
* Rework packet receiving in ServerThread (''sfan5'')
* Fix core.chat_format_message crashes (''ClobberXD'')
* Fix spaces breaking formspec_version[] tag (''rubenwardy'')

=== Misc / Build ===
* MacOS/BSD: Fix build issue due to conflicting s64 type definitions (''AMDmi3'')
* Fix find_path for newer jsoncpp installations ('''vilhelmgray''')
* Update translations

== 5.0.1 → 5.1.0 ==

Released on 12 October 2019.

=== Map generator ===
* Mapgen Carpathian: Add optional rivers (''paramat'')
* Move more dungeon parameter selection to mapgens (''paramat'')
* Dungeons: Make multiple large rooms possible (''paramat'')

=== Client / Audiovisuals ===
* Change pitch fly binding to 'P', add to change keys menu (''rubenwardy'')
* Android settings: Use 'simple' leaves instead of 'fancy' (''paramat'')
* Fix 3rd person selection range (''srifqi'')
* Make scrollbars' bar variable in size (''stujones11'')
* Damage: Play no damage sound when immortal (''SmallJoker'')
* Increase upper limit of display_gamma to 10 (''ClobberXD'')
* Optimize and unify mesh processing (''Vitaliy'')
* Re-order mapgens in mainmenu and 'all settings' mapgen selection (''paramat'')
* Scrollbars: Move directly to clicked pos if clicked into tray (''DS-Minetest'')
* Fix broken attachments on join (''SmallJoker'')
* Fix inventory_overlay for nodes without inventory_image (''DS-Minetest'')
* Better F6 profiler (''SmallJoker'')
* Fix minimap markers (''theviper121'')
* Textures: Load base pack only as last fallback (''SmallJoker'')

=== Builtin (Lua / Media / Documentation) ===
* Add /help formspec for commands and privileges  (''SmallJoker'')
* Lua API: Add link to Minetest Modding Book (''ClobberXD'')
* Force item entities out of solid nodes (''sfan5'', based on ''Wuzzy''`s work)
* Lua API: Various fixes (''DS-Minetest'', ''SmallJoker'')
* Rename "private messages" to "direct messages" (''Calinou'')
* Automatically enable depending mods in the dialogue (''HybridDog'')
* All settings: Fix missing flags checkboxes (''srifqi'')

=== World / Server / Environment ===
* Various network performance improvements (''osjc'')
* Force send a mapblock to a player (''sofar'')
* Revert ItemStacks being limited to the 'stack_size' value (''ClobberXD'')
* Save forceloaded blocks file periodically (''Thomas Rudin'')
* Improve ABM time budget handling (''lhofhansl'')
* Group "immortal" also protects players from damage (''Wuzzy'')
* Optimize usage of TOSERVER_GOTBLOCKS packet (''sfan5'')
* Network: several bugfixes (''sfan5'')
* Mapgen::spreadLight performance improvement (''DS-Minetest'')
* Improve occlusion culling in corridors with additional check (''sfan5'')
* Inventory: Delay dirty lists, and send changes incrementally (''SmallJoker'')
* Other inventory bugfixes (''sfan5'', ''SmallJoker'')
* Move debug.txt after it grows too big (''HybridDog'')
* Trigger on_place in many situations even if prediction failed (''DS-Minetest'')
* Punchwear (improved) (''sfan5'')

=== Script API / Modding ===
* Add deprecation warnings for ObjectRef:get/set_attribute (''ClobberXD'')
* Nodedef 'drop' documentation: Improve (''paramat'')
* Mark tool filtering in node drop documentation as deprecated (''paramat'')
* Add node field to PlayerHPChangeReason table (''pauloue'')
*  Don't call on_hpchange callbacks if HP hasn't changed (''ClobberXD'')
* Add disable_jump to liquids and ladders (''SmallJoker'')
* Add support for 9-sliced backgrounds (''rubenwardy'')
* Add compatible, consistent coordinate system to FormSpecs (''v-rob'')
* Document ObjectRef:remove under Lua entity (''ClobberXD'')
* Docs: Clarify where to check for 'protection_bypass' (''SmallJoker'')
* Add vector.dot and vector.cross (''HybridDog'')
* Improve documentation of mapgen aliases (''paramat'')
* Remove debug.upvaluejoin to prevent leak of insecure environment (''fluxionary'')
* Fix previously crashing minetest.get_craft_result() (''pauloue'')
* Allow toolcaps to override the built-in times for dig_immediate (''sfan5'')
* Formspec styling using style[] (''rubenwardy'')
* Customizable chat message format (''ClobberXD'')
* Velocity modifiers for players (''sfan5'')
* Fix some issues with minetest.clear_craft (''pauloue'')
* Add function `minetest.read_schematic` (''paly2'')
* Formspecs: formspec_version[] element (''SmallJoker'')
* Per-player FOV overrides and multipliers (''ClobberXD'')

=== Misc / Build ===
* Find PostgreSQL correctly (''adrido'')
* Add compatibility to vcpkg buildsystem (''adrido'')
* Android: Use system provided path for default TMPFolder setting (''stujones11'')
* Fix handling of --color and --worldlist command line arguments (''mmattes'')
* Unified OpenGL ES support (''sfan5'')

=== Minetest Game ===
* Added dry dirt and dry dirt with dry grass. Grass never spreads on dry dirt (''paramat'')
* Savannas now have dry dirt and dry dirt with dry grass (''paramat'')
* Added steel bar door and steel bar trap door
* Added setting “enable_fence_tall” for fences that cannot be jumped over (''mbartlett21'')
* Firefly in a bottle can now be placed into vessels shelf
* Add flowing water sound
* Underground biomes extend much deeper, down to Y=-255
* Make the creative mod hand dig 'dig_immediate' nodes fast (''paramat'')
* Add new TNT sounds (''TumeniNodes'')
* Add missing infotext to nodes (''An0n3m0us'')
* Added translation support
* Added German, French, Spanish and Italian translations (''Wuzzy'', ''Hamlet'', ''JDiaz'', ''DrHackberry'')

== 5.0.0 → 5.0.1 ==

5.0.1 was released on March 31, 2019.

* Fix detached inventory serialisation (''rubenwardy'')
* Fix texture rotation for wallmounted nodeboxes (''sfan5'')
* Fix build failing on some compilers (''rubenwardy'')
* Warn about issues with the num_emerge_threads setting (''paramat'', ''sofar'')
* HPChange Reason: Fix issues with custom reasons (''rubenwardy'')
* Fix FreeBSD build by handling std::time_t properly (''rubenwardy'')
* Confirm registration GUI: Remove positional strings to fix Windows bug (''paramat'')
* Prevent multi-line chat messages server-side (''rubenwardy'')
* httpfetch: Disable IPv6 here too if requested by settings (''sfan5'')

== 0.4.16 → 5.0.0 ==

Released March 4th

&lt;!-- Last updated 3rd Jan by nerzhul, 6b102ce51f01a381ab6356931689d85528455a50 --&gt;

Note: 5.0.0 is based on 0.4.16, not 0.4.17. 0.4.17 was created by backporting changes from the development branch of 5.0.0
&lt;!-- WIP notes:
slippery    SmallJoker  bendeutsch
CMakeList improvements  nOOb3167
Find nodes in area (under air): Raise volume limit and document it (''paramat'')
[CSM] Add basic HUD manipulation. (#6067) (''red-001'')
F5 debug info: Add colons, use lowercase except for FPS and RTT (''ThomasMonroe314'')
Auth handler: Player deletion &amp; Iterator (#6741) (''sfan5'')
Generate biomes: Recalculate biome at biome lower limit (''paramat'')
Alternative code for slipping (#6256) (''bendeutsch'')
Translations: prevent remote crash with invalid translations (''Ekdohibs'')
Add LuaEntity on_death callback (#6177) (''nerzhul'')

Log deprecated Lua function calls (#7491) (''SmallJoker'')
Android: use c++_shared library instead of c++_static MT doesn't launch without that (''nerzhul'')
--&gt;

=== Highlights ===
* Add online content repository (games, mods, modpacks, texture packs)
* Add Carpathian mapgen
* Automatic jumping
* Android: Rewritten controls. Add joystick and modify up on-screen buttons
* Mods and games can be translated
* Rename 'subgame' to 'game'
* Modding: More node drawtypes: disconnected nodeboxes (more ways to create connected blocks), &lt;code&gt;plantlike_rooted&lt;/code&gt; (for underwater plants)
* Modding: Custom player collision box
* Modding: A great deal of new map generator features
* Modding: Allow to rotate entities in all 3 axes

=== New Version Scheme ===

Basically, the leading 0 has been dropped. The [https://wiki.minetest.net/Version_number version scheme] was thus changed from

 ZERO.MAJOR.MINOR.PATCH

(note: PATCH was left out when it was 0) to

 MAJOR.MINOR.PATCH

.

This was chosen for a few reasons:

* Shows that we aim to keep inter-version compatibility (which has mostly been the case since early 0.4.x)
* Allows us to release patch/bug fix only releases without adding a silly 4th number
* Doesn't imply that this version is the first stable/finished version as much as a 1.0.0 does.

For some context, read [https://github.com/minetest/minetest/issues/6073 the issue that resulted in this change].

=== Breaking changes and deprecations ===
As a major release, 5.0.0 will break some mods written for 0.4.x versions.
We tried to keep the breakages as small as possible whilst fixing long standing issues.

* Minetest now uses C++11 instead of C++03, make sure you have a compatible system (Windows Vista, Debian 8, Ubuntu 16.04, CentOS 7, macOS 10.7, …)
* Breaks network compatibility with 0.4.x. 0.4.x clients won't be able to connect to 5.x servers and vice-versa. Fix: update clients and servers to 5.x
* Attachment and player positions have been shifted by 1 node, to allow support for custom player selection boxes. Fix: update default and player_api, subtract &lt;code&gt;10&lt;/code&gt; from any attachment positions, shift the origin of player models to the feet
* Formspec theming using prepended strings. This may cause wrong backgrounds to appear on formspecs. Fix: see https://forum.minetest.net/viewtopic.php?f=18&amp;t=20646
* depends.txt and description.txt have been deprecated. Fix: use ''description'', ''depends'', and ''optional_depends'' in mod.conf, game.conf, or texture_pack.conf instead
* modpack.txt has been deprecated. Fix: rename to or add ''modpack.conf''.
* Use of deprecated methods such as ''object:setpos()'' is now warned about. Fix: [https://forum.minetest.net/viewtopic.php?f=18&amp;t=20403 replace them with correct functions]
* ''player:get/set_attribute()'' is now deprecated. Fix: use ''player:get_meta()'' instead
* ''nodeupdate()'' was removed. Fix: replace with ''minetest.check_for_falling''.
* Clouds API: changed speed param from 'y' to 'z'
* Player inventory list "hand" must now be manually initialized by mods (using ''set_size'')
* Some client-side scripting functions were removed (see below)

Note that a function being ''deprecated'' means that it still exists, but it may give a warning when used and may be removed in future.
Deprecations are necessary to improve the consistency and efficiency of our API

=== Features ===
==== Games ====
* Load a texture pack from the 'textures' subfolder of a game (''red-001'')

==== Map generators ====
* Mapgen: Add Carpathian mapgen (''Vaughan Lapsley'')
* Mapgen flags: Add 'biomes' global mapgen flag (''paramat'')
* Dungeons: Add Y limits in all mapgens (''paramat'')
* Dungeons: Add setting to prevent projecting dungeons (''paramat'')
* Biomes: Add vertical biome blend (''paramat'')
* Mgv7 floatlands: Add exponent parameter (''paramat'')

==== User interface ====
* Add online content repository (mods, texture packs, mod packs, games) (''rubenwardy'')
* Rename 'subgame' to 'game' (''paramat'')
* Allow enter to select items from combobox's list (''basicer'')
* Formspecs: Use mouse wheel to pick up and deposit single items (''HybridDog'')
* Add player marker to both minimap types (''nanoproject'')
* Delete world dialogue: Move buttons to avoid double click deletion (''srifqi'')
* Add a refresh button to the server list (''ThomasMonroe314'')
* Main menu: Change tabs to 'Start Game' and 'Join Game' (''ThomasMonroe314'')
* Add password confirmation on new player registration (''srifqi'')
* Adjust default console height (''Ezhh'')
* Add coloured terminal output (''HybridDog'')
* Add setting to display the itemstring after the tooltip in the inventory (''DTA7'')
* Make world creation menu automatically generate a random world name (''lisacvuk'')
* Change “Use” key name to “Special” (''TeTpaAka'')
* Make number of maximum displayed chat messages configurable (''Esteban'')

==== Controls ====
* Automatic jumping (''bendeutsch'')
* Add pitch move mode, toggle with &lt;kbd&gt;L&lt;/kbd&gt; key
* Android: Rewritten controls. Add joystick and modify up on-screen buttons (''srifqi'')
* More keys are changable in settings menu
* Make direct item selection keys freely bindable via minetest.conf (''Wuzzy'')

==== World / server ====
* Add setting for world start time, and change default to  5:15am (''JRottm'', ''paramat'')
* Allow for getting world name and path separately on the command line (''Brian'')
* Add a server-sided way to remove color codes from incoming chat messages (''red-001'')
* Object limits: Allow objects to exist outside the set 'mapgen limit' (''paramat'')

==== Chat commands and privileges ====
* Add '/haspriv' chat command (''ClobberXD'')
* Add '/kill' chat command (''Wuzzy'')
* Remove 'zoom' privilege (zoom is now a player object property)
* Do not grant all privileges to the admin - changes game behavior (''lhofhansl'')

==== Graphics ====
* Fog effect when camera is inside cloud (''bendeutsch'')
* Camera: Add and improve arm inertia (''kilbith'')
* Update light decoding table size (''numberZero'')
* New lighting curve (''numberZero'')
* Add setting for near plane distance (''basicer'')
* Add Android drivers to the video_driver drop-down menu (''Wayward1'')

==== Sounds ====
* Sounds: Add falling node sounds (''sofar'')
* Emit liquid sound if the player walks in liquid (''juhdanad'')
* Play damage sound on player death (''paramat'')
* Add mute setting (toggled by the mute key and in the volume menu) (''DTA7'')

==== Technical ====
* Add support for authentication in an SQLite database (''bendeutsch'')
* Add an optional readonly base database (''lhofhansl'')
* Add crossview support (''otdav33'')
* Optionally extend the active object in a players camera direction (''lhofhansl'')
* Implement ability to set client node dig prediction result (''sofar'')

==== Misc. ====
* Add check to pause game on lost window focus (''rubenwardy'')
* Load files from subfolders in texture packs (''numberZero'')
* Make HUD status messages translatable (''Wuzzy'')

=== Modding ===
* Add on_mods_loaded callback (''nerzhul'')
* MetaDataRef: Add contains() and get() (''rubenwardy'')
* Allow dumping userdata (''HybridDog'')
* Hint at problematic code when logging deprecated calls (''sfan5'')
* Add minetest.rgba function that returns ColorString from RGBA or RGB values (''Gael-de-Sailly'')
* World config: Add modpack descriptions (''HybridDog'')
* get_node_drops: Make empty drop return empty table (''tenplus1'')
* Add core.remove_detached_inventory (''SmallJoker'')
* Add disable_repair group to prevent tool repair (''Wuzzy'')
* clear_craft: Return false if recipe not found, don't throw error  (''paramat'')
* Fix string.split returning an empty table if string starts with sepearator (''pyrollo'')

==== Formspecs / HUD ====
* Formspecs: Add tooltip element for area (''rubenwardy'')
* Formspecs: Allow setting alpha value for the box[] element (''Thomas--S'')
* Formspecs: Add an auto vertical scrollbar to the textarea (''adelcoding1'')
* Formspecs: Add options to set background color and opacity (fullscreen mode + default mode) (''nerzhul'')
* Formspecs: textarea with scrollbar improvements (''adrido'')
* HUD: Make hud_get return alignment, offset and size. (''lisacvuk'')

==== Server-side ====
===== Metadata =====
* Give games the ability to disallow specific mapgens (''Ezhh'')
* Load mod dependencies and description from mod.conf (''rubenwardy'')

===== User interface =====
* Add clientside translations. (''Ekdohibs'')
* Add formspec theming using prepended strings (''rubenwardy'')
* Zoom: Set zoom FOV per-player using a player object property (''paramat'')
* Zoom: Move enabling zoom to a new player object property (''paramat'')
* Minimap: Add new HUD flag for minimap radar mode (''paramat'')

===== Items =====
* Allow overriding tool capabilities through itemstack metadata (''raymoo'')
* Set placer to nil instead of a non-functional one in item_OnPlace (''DTA7'')
* Overlays for wield and inventory images (''juhdanad'')
* Make dropped items colorable (''juhdanad'')
* Automatic item and node colorization (''juhdanad'')
* Add eat sound (''Wuzzy'')

===== Nodes =====
* Add slippery group for nodes (players/items slide) (''Wuzzy'')
* Connected Nodeboxes: Add 'disconnected' boxes (''Thomas--S'')
* Add callback to preserve node metadata as item metadata (''ashtrayoz'')
* Add 'plantlike_rooted' drawtype (''numberZero'')

===== Objects/entities =====
* ObjectRef: Add add_velocity() (''HybridDog'')
* Allow damage for attached objects, add attach/detach callbacks (''SmallJoker'')
* Optional alpha channel support for entities (''stujones11'')
* Add static_save property to luaentites to not save them statically. (''orwell96'')
* Object properties: Add 'glow', disables light's effect if negative (''basicer'')
* core.get_objects_inside_radius: Omit removed objects (''HybridDog'')
* Make entity selection and collision boxes independently settable (''stujones11'')
* Add set_rotation/get_rotation to rotate entities in all 3 axes

===== Players =====
* Customizeable max health and max breath for players (not persisted between server restarts) (''SmallJoker'')
* Add reasons to on_dieplayer and on_hpchange (''rubenwardy'')
* Add minetest.is_player (''HybridDog'')
* Add on_grant and on_revoke callbacks (''rubenwardy'')
* Player eye height: Make this a settable player object property (''paramat'')
* Step height: Add as a player object property (''paramat'')
* Player collisionbox: Make settable (''TeTpaAka'')
* Add player inventory callbacks (''SmallJoker'')

===== Mapgen =====
* Biomes: Add 'get_biome_name(biome_id)' API (''paramat'')
* Biomes: Add 'min_pos'/'max_pos' xyz biome limits (''paramat'')
* Biomes: Add decoration flags for underground decorations (''paramat'')
* Biomes: Add function to deregister single biomes (''zeuner'')
* Biomes / dungeons: Add biome-defined dungeon nodes (''paramat'')
* Biomes / cavegen: Add definable cave liquid for a biome (''paramat'')
* Biomes: Add 'get heat', 'get humidity', 'get biome data' APIs (''paramat'')
* Biomes/decorations/ores: Make relative to 'water_level' setting (''paramat'')
* Place schematic (on vmanip): Enable use of 'place center' flags (''paramat'')
* Ores: Add stratum ore (''paramat'')
* Stratum ore: Add option for a constant thickness stratum (''paramat'')
* Stratum ore: Allow use with no noise for simple horizontal strata (''paramat'')
* Simple decorations: Add 'param2_max' parameter for random param2 (''paramat'')
* Schematic decorations: Add 'place_offset_y' placement parameter (''paramat'')
* Decoration API: Add lightweight ability to have complete coverage (''paramat'')
* Mgv6: Remove incorrectly defined and unused 'volume nodes' (''paramat'')
* Mgv7: Add 'mount_zero_level' parameter (''paramat'')
* Mgv7: Add option to repeat surface biomes in floatlands (''paramat'')
* Mgvalleys: Make river depth variation and humidity drop optional (''paramat'')
* CavesRandomWalk: Make 'lava_depth' a mapgen parameter (''paramat'')
* Gennotify: Add 'minetest.get_decoration_id' API (''paramat'')

===== World =====
* Spawn level: Add 'get_spawn_level(x, z)' API (''paramat'')
* Add minetest.bulk_set_node call + optimize Environment::set_node call (''nerzhul'')
* Implement minetest.register_can_bypass_userlimit (''nerzhul'')

===== Chat =====
* Make the server status message customizable (''SmallJoker'')
* Allow the join/leave message to be overridden by mods. (''red-001'')

===== Protection =====
* is_area_protected: Rename from intersects_protection (''SmallJoker'')
* Intersects_protection(): Move from Minetest Game to builtin (''paramat'')

===== Graphics and sounds =====
* Real global textures (''numberZero'')
* Clouds API: change speed from 'y' to 'z', ColorSpecs in Lua docs (''bendeutsch'')
* In-cloud fog: Strengthen effect when small view range is used (''lhofhansl'')
* Sound: Add pitch option (''Rui-Minetest'')

===== Utility features =====
* Allow 'default' parameter in 'settings:get_bool' function (''Jordan Irwin'')
* Add `on_auth_fail` callback (''red-001'')
* Make core.auth_table private and structure builtin/auth.lua (''sfan5'')
* Add sha1 to lua utils. (''basicer'')
* Remove nodeupdate and nodeupdate_single (''Rui-Minetest'')
* Expose getPointedThing to Lua (''juhdanad'')
* Helper methods for hardware colorization (''juhdanad'')
* httpfetch: Enable gzip support (''sfan5'')
* Rename hasprivs command to haspriv  (''ezhh'')

==== Client-side ====
* Add flavour limits controlled by server (''nerzhul'')
* Disallow exploitable clientside mod functions by default (''paramat'')
* Rename CSM flavours to restrictions (''SmallJoker'')
* Remove screenshot API (''red-001'')
* Don't Load the package library (''red-001'')
* Remove `on_connect` callback (''red-001'')
* Add functions to create particles and particlespawners. (''red-001'')
* Don't load the IO library. (''red-001'')
* Add a way to get current locale from CSM (''lisacvuk'')
* Add callback on open inventory (''Dumbledor'')
* Implement mod communication channels (''nerzhul'')
* Create a filesystem abstraction layer for CSM and only allow accessing files that are scanned into it. (''red-001'')
* Add function to get player privileges (''red-001'')

=== Bug fixes and small improvements ===
Also a big thanks to paramat, ClobberXD, pauloue, gituser2194, lhofhansl, ashtrayoz, Wuzzy, and Ezhh for their contributions to documentation, in no particular order.

==== Critical ====
* Fix crash caused by Lua error during startup (''red-001'')
* Pointed_thing_to_face_pos: Avoid crash when player is inside a node (''paramat'')
* Fix segfault in player migration and crash in log_deprecated (''SmallJoker'')
* Fix crash guiConfirmRegistration quit menu (''Vincent Glize'')
* Fix built-in inventory list crash when size = 0 (''SmallJoker'')
* Fix a crash or random memory leak when resetting saved environment variable in test_servermodmanager.cpp (''nerzhul'')
* Fix crash on can_bypass_userlimit returning non-boolean (''rubenwardy'')
* Fix error if setting menu_last_game is not a valid game (''nOOb3167'')
* Builtin: Fix handle_node_drops crash with nil digger (''SmallJoker'')
* Fix issue Minetest crash when custom font path is not exist (''srifqi'')
* Thread: fix a crash on Windows due to data race condition on Thread::m_start_finished_mutex (''nerzhul'')
* Fix crash on revocation of removed privilege (''rubenwardy'')
* Fix crash when using --go in command line (''juozaspo'')
* Fix crash due to missing pointer validation (''nerzhul'')
* Fix get_server_status() segfault due to uninitialized m_env (''rubenwardy'')

==== Build ====
* Fix many Android build issues (''nerzhul'')
* Fix i386 bit build at OpenBSD (''mazocomp'')
* Fix compile error in OpenBSD (''jcalve'')
* Fix MSVC compiling annoyances (''adrido'')
* directiontables: Fix MSVC compiler error (''adrido'')
* Fix MacOS builds (''Pavel Puchkin'')
* Travis-ci build: fix osx jpeg installation failure, git ambiguous argument error (caused by merging commits) and add a workaround for travis commit range bug (''juozaspo'')

==== System-specific ====
* Provide Xorg/net wm process ID (''thoughtjigs'')
* Make os.tempfolder work correctly for MinGW &amp; MSVC (''nOOb3167'')
* Print error when HOME is not set (''Midgard'')
* MacOS: don't require X11 libraries during compilation (''D Tim Cummings'')
* Prevent Android from automatically locking display (''Wayward1'')
* Windows: Cpack wix installer (''adrido'')

==== Rendering ====
* Fix liquid bottoms not being rendered (''numberZero'')
* Fix liquid post effect colour behaviour in third person view (''red-001'')
* Fix dark liquids (''numberZero'')
* Use crack animation on all tile layers (''juhdanad'')
* Smoothed yaw rotation for objects (''SmallJoker'')
* Disable shaders GUI on unsupported drivers (''numberZero'')
* Fix missing ignore textures (''HybridDog'')
* Make sure color returns to normal after a damage flash (''lhofhansl'')
* Camera: Improve subpixel movement (''SmallJoker'')
* Camera: Fix wieldmesh glitch after teleporting (''kilbith'')
* upright_sprite: Fix texture position for players (''SmallJoker'')
* Fix node-nodebox lighting difference in direct sunlight (''numberZero'')
* Fix ambient occlusion and dark lines at mapblock borders (''numberZero'')
* Don't recalculate statustext initial color every time &amp; review fixes (''nerzhul'')
* Clear colors when reading property info. Set vertex colors on upright_sprites. (''basicer'')
* Fix items turning black (''numberZero'')
* Fix dropped item look (''HybridDog'')
* Fix item and wield meshes (''numberZero'')
* Do not scale texture unless necessary. (''lhofhansl'')
* Avoid filtering low-res textures for animated meshes (incl. players) (''lhofhansl'')
* Reduce server FOV with forward speed (''lhofhansl'')
* ParticleSpawner::step cleanup and rotation fix (''SmallJoker'')
* Fix incorrect buffer size calculation on creation of HUD status messages (''rubenwardy'')
* Particles: Do not add digging particles for airlike nodes (''SmallJoker'')
* Fix animation frame_speed and blend loosing precision (''sapier'')
* Fix undefined behaviour in arm movement when dividing by zero (''nerzhul'')
* Fix render order of overlays (''juhdanad'')
* Particles: Make collision with objects optional (''paramat'')
* Fix stretched stars bug, change render order (''Aspen'')
* Software inventorycube (''Vitality'')
* Light curve: Simplify and improve code, fix darkened daytime sky (''Vitality'')
* Smooth lighting: Fix light leaking through edge-connected corners (''DTA7'')
* Darkness detection: Reduce chance of false positives darkening the skybox (''lhofhansl'')
* Fix sky objects not rendering with OpenGL ES (''stujones11'')
* Night clouds: Boost brightness for a moonlit appearence (''paramat'')
* Night sky: Fix brightness threshold for applying night colours (''paramat'')

==== User interface ====
* Fix debug and info text being the wrong color (''rubenwardy'')
* Fix tooltip colors specified by formspec part (''rubenwardy'')
* Make RTT display (F5 information) working correctly again (''HybridDog'')
* Don't show Android edit dialog when tapping read-only field (''srifqi'')
* Make sounds stop playing when entering game or mainmenu (''nOOb3167'')
* Fix dancing text for formspec input fields (''numberZero'')
* Chat: Remove prompt history duplicates (''SmallJoker'')
* Statbars: fix incorrect half-images in non-standard orientations (''Ekdohibs'')
* Advanced settings: Add range check for float type (''srifqi'')
* Move the nametag back to the top of the player (''TeTpaAka'')
* Chat: Move chat text down to not overlap 3rd line of debug text (''paramat'')
* Fix console resize issue when changed game window (''Ezhh'', ''Zeno-'')
* Android buttons: Inset 'rare controls', inset and resize 'gear icon' (''paramat'')
* Main menu: Clean up and improve advanced settings dialogues (''SmallJoker'')
* Escape special characters when searching the server list (''ChimneySwift'')

==== Formspecs ====
* Mitigate formspec exploits by verifying that the formspec was shown to the user by the server. (''red-001'')
* Make container[] support fractional offsets (''SmallJoker'')
* Remove accidental empty 'quit' field (''SmallJoker'')
* Unify textarea and field parsing functions, fix wrong fallback text (''SmallJoker'')
* Formspec verification: Fix show_formspec inside callbacks (''SmallJoker''
* Fix wrong scrolling of formspec input fields (''numberZero'')
* Inventory: Restrict access from too far away (''SmallJoker'')
* Fix mousewheel behaviour in textarea (''shivajiva101'')
* Fallback to 'label' in readonly textarea[] (backwards compatible) (''SmallJoker'')
* Fix invalid background warning (''SmallJoker'')
* Fix text clipped by scrollbars (''random-geek'')

==== Performance ====
* Optimized MapBlock mesh generation (''lhofhansl'')
* Optimize ABM checks (''lhofhansl'')
* Fix bugs in networking which caused a performance loss (''lhofhansl'')
* Builtin auth handler: Speed up file writing (''SmallJoker'')
* Huge LBM lookup performance improvement on mapblock loading (''nerzhul'')
* Fix last performance-type-promotion-in-math-fn problems (''nerzhul'')
* Optimize a little bit isBlockInSight, adjustDist &amp; collisions (''nerzhul'')
* Line_of_sight: Improve using VoxelLineIterator (''juhdanad'')
* Cache server config settings. (''lhofhansl'')
* Very little performance fix on correctBlockNodeIds (''nerzhul'')
* Don't search for locale folders if gettext is disabled (''adrido'')

==== Networking ====
* Use server's zoom fov for distant world loading. (''lhofhansl'')
* Fix ipv6_server=true not accepting IPv4 connections on Windows (''sfan5'')
* Fix narrow/utf8 difference in incoming/outcoming messages (''numberZero'')
* Fix day_night_ratio_do_override not being initialised server-side (''rubenwardy'')
* Fix attached particle spawners far from spawn (''raymoo'')
* Server: affect bind_addr on constructor instead of start() (''nerzhul'')
* Network: Fix logging into older worlds with base64 hashes (''SmallJoker'')
* Server: Calculate maximal total block sends dynamically (''SmallJoker'')
* Have the server send the player list to the client (''red-001'')

==== Chat commands and privileges ====
* Check if player exists on use of /privs (''ClobberXD'')
* Reduce block load glitches (''lhofhansl'')
* Make the /shutdown command work properly (''dopik'', ''SmallJoker'')
* Prevent /spawnentity from spawning unknown entity (''Wuzzy'')

==== World ====
* Fix blocks written by VManip not being marked as modified (''sfan5'')
* Set range of blocks to retrieve per roundtrip to 2. (''lhofhansl'')
* Retrieve a small cone of blocks in the direction of the players velocity. (''lhofhansl'')

==== Map generator ====
* Change mapgen order to ores &gt; dungeons &gt; decorations (''paramat'')
* Biome API: Fix absent water decorations and dust, in deep water (''paramat'')
* Biome-defined dungeon nodes: Use faster biome calculation (''paramat'')
* Biomemap: Avoid empty biomemap entry to fix failing biome dust (''paramat'')
* Biomes: Fix vertical biome blend (''paramat'')
* Biome dust node: Only place on 'walkable' cubic non-liquid drawtypes (''paramat'')
* Biome generation: Fix layers of 'filler' nodes at biome y limits (''paramat'')
* Mgv5: Make spawn position search more reliable (''paramat'')
* Mgv6 mudflow: Avoid partially removed stacked decorations (''paramat'')
* Mgv7: Raise spawn point by 1 node for no mountain case (''paramat'')
* Mgv7: Avoid rivergen removing mod-placed nodes when overgenerating (''paramat'')
* Mgv7: Avoid divide-by-zero errors (''paramat'')
* Mgv7: Fix undefined 'float_mount_height' (''paramat'')
* Mgfractal: Improve spawning behaviour (''paramat'')
* Mgv5/v7/fractal: Add 'large_cave_depth' parameter to replace fixed value (''paramat'')
* Fix Mapgen Valleys getSpawnLevelAtPoint() (''Treer'')
* Vein ore: Fix bug caused by changing perlinmap Y size (''paramat'')
* Schematic decorations: Fix placement bug when centered and rotated (''paramat'')
* Simple decorations: Make 'place_offset_y' usable with simple decorations (''paramat'')
* Dungeons: Fix duplication of y limit parameters (''paramat'')
* Dungeons: Mostly fix missing stair nodes (''paramat'')
* Dungeons: Avoid generation in multiple liquid nodes and 'airlike' (''paramat'')
* Dungeons: Use biome 'node_stone' if normal stone types not detected (''paramat'')
* Cavegen: Fix errors when getting biome outside mapchunk (''paramat'')
* Cavegen: Re-order generation to fix cavern bug (''paramat'')
* Cavegen: Avoid unsupported biome 'top' or 'filler' nodes (''paramat'')
* valleys mapgen: Fixed submarine valleys shape (''Gael-de-Sailly'')
* settingtypes.txt: Fix valleys dungeon ymax error (''paramat'')
* L-system: Fix leaves cutting through stems (''HybridDog'')

==== Items and nodes ====
* Pointed thing to face pos: Use 'eye height' object property (''paramat'')
* Ensure no item stack is being held before crafting (''Luis Cáceres'')
* core.rotate_node: Run callbacks like with any regular placed node (''SmallJoker'')
* Don't try to craft a non-existent item (''Esteban'')
* Fix rotated node placement (''tenplus1'')
* Item drop: Tune to land exactly 2 nodes away with level view (''paramat'')
* Check item_drop amount clientside (''rubenwardy'')
* Fix Android node selection distance (''juhdanad'')
* Safe digging and placing (''bendeutsch'')
* Fix for empty key/value when reading item string with wear but no metadata (''Jesse McDonald'')
* Inventory: Fix wrong stack size behaviour and item loss (''SmallJoker'')

==== Objects/entities ====
* Fix objects colliding with their children (''SmallJoker'')
* core.spawn_falling_node: Keep metadata (''SmallJoker'')
* Collision engine: Collide with 'ignore' nodes (''paramat'')
* falling.lua: Delete falling node entities on contact with 'ignore' (''paramat'')
* Position entity nametags relative to selection-box (''stujones11'')
* Damage: Remove damage ignore timer (''SmallJoker'')
* Item entities: Enable item collision detection for sudden movement (''DTA7'')
* Ease selection of entities behind nodes (''SmallJoker'')
* Object properties: Fix loss of custom selectionbox when it's not updated (''SmallJoker'')
* GenericCAO: Fix light position for non-players, remove deprecated initialisation code (''SmallJoker'')
* GenericCAO: Fix dark model below y = 0 (''paramat'')
* CAO footstep sounds: Reduce gain to balance volume (''paramat'')

==== Players ====
* Make player liquid speed independent of FPS (''paramat'')
* Run detach callbacks on player leave (''SmallJoker'')
* Localplayer: Fix disable_jump effect and getStandingNodePos() (''SmallJoker'')
* Android stepheight: Only increase if 'touching ground' (''paramat'')
* Respect object property hp_max field for players (''SmallJoker'')
* Do not add base position to player selection box (''stujones11'')
* Abort if static_spawnpoint is an invalid setting instead of just giving an error log (''HybridDog'')
* Fix error not printed to console when no name is provided (''juozaspo'')
* Fix player coordinate rounding in collisionMoveSimple() (''JRottm'')
* Sneak: Stripped down version (''SmallJoker'')
* (Re)spawn players within 'mapgen_limit' (''paramat'')
* Stop autoforward on BACKWARD key-press (''tukkek'')
* Apply physics overrides correctly during anticheat calculations (''sfan5'')

==== Modding ====
* Fix builtin Lua function os.tempfolder (''nOOb3167'')
* Fix isNan check for object:set_yaw(..) (''nerzhul'')
* Fix LuaJIT include directory not being found (''rubenwardy'')
* Check argument types inside MetaDataRef Lua API (''sfan5'')
* Fix buffer parameter not working in LuaPerlinNoiseMap::l_getMapSlice() (''pgimeno'')
* Fix naming conventions of noise userdata (''rubenwardy'')
* Fix rounding error in g/set_node caused by truncation to float (''rubenwardy'')
* Vector fun
* CAO footstep sounds: Reduce gain to balance volume (''paramat'')aramat'')
* Fix default item callbacks to work with nil users (''raymoo'')
* on_death: Fix callback number of pushed arguments (''SmallJoker'')
* Fix core.wrap_text and make its behaviour consistent with the docs (''sfan5'')
* Trigger on_rightclick regardless on the formspec meta field (''SmallJoker'')
* LBM: use range based for and fixed a loop variable overloading in applyLBMs (''nerzhul'')
* Fix deserialization of ItemDefinition (''Rui-Minetest'')
* Plantlike meshoptions: Fix inverted random vertical offset (''numberZero'')
* Player hand list: require init by mods (''SmallJoker'')

==== Debug ====
* Fix missing logs from warningstream (or similar) (''HybridDog'')
* Fix off-by-one in log output line length (''pgimeno'')
* Profiler: Fix var args not being passed to callback register function (''rubenwardy'')

==== Internal / code quality ====
* Add a MSVC / Windows compatible snprintf function (''nOOb3167'')
* Fix memory leaks in mod storage (''nerzhul'', ''red-001'')
* Fix rtt &gt;= 0.0f assertion and free_move crash (''SmallJoker'')
* Global new() or grab() to be managed in constructor only (''JDCodeIt'')
* Node resolver: Make error on fallback optional, disable for mapgen aliases (''paramat'')
* FOV: Raise lower limit to avoid zoom-loading of distant world (''paramat'')
* Fix many issues reported by clang-tidy (''nerzhul'')
* Fix various clang-tidy reported performance-type-promotion-in-math-fn (''nerzhul'')
* Selected ItemStack: Reduce black magic and improve the stack swapping behavior (''SmallJoker'')
* core.rotate_node: Do not trigger after_place_node (''SmallJoker'')
* Sound: fix static initialization order dependency by not having one (''nOOb3167'')
* Fix various Client class functions not marked as override (virtual) (''nerzhul'')
* Guard sound manager initialization with "enable_sound" (''nOOb3167'')
* Fix an alone if to be with a missing else (''nerzhul'')
* Drop texture file list cache (''numberZero'')
* Variable name fix + structure creation unrolling in lighting code (''nerzhul'')
* getv3intfield: Fix logic of return bool (''paramat'')
* Generate Notifier: Clear events once after all 'on generated' functions (''paramat'')
* Fix Wstringop-overflow warning from util/srp.cpp (''HybridDog'')
* Tool getDigParams: Fix selecting the best fitting time (''HybridDog'')
* Fix undefined behaviour on getting pointer to data in empty vector (''nOOb3167'')
* Use Irrlicht's mesh cache for animated meshes. (''lhofhansl'')
* Shut down mapgen threads before other shutdown tasks (''raymoo'')
* Allow zoom to actually show more data. (''lhofhansl'')
* Make use of safe file writing in auth handler (''sfan5'')
* Fix inventory drag drop flag (''asl97'')
* Fix strict_protocol_version_checking functionality after ee9a442 (''SmallJoker'')
* Fix empty legacy meta being persisted (''rubenwardy'')
* Lint fix on localplayer.h (''nerzhul'')
* Sort box corners correctly (''Thomas--S'')
* Remove unused Map::getDayNightDiff + fix one undefined variable in mapblock.cpp (''nerzhul'')
* Check node updates whether the blocks are known (''SmallJoker'')
* Really delete things in fs::RecursiveDelete (''Vitality'')
* Disable HW stereo for IrrLicht 1.9  (''numberZero'')

==== Misc. ====
* Fix for translating empty strings (''minduser00'')
* Positional sound: Limit volume when closer than 1 node (''paramat'')
* Change the server description after a search (''Dumbledor'')
* Fix no sound bug (''Rui-Minetest'')

=== Other / Misc ===

* Version scheme change: 0.5.0 -&gt; 5.0.0 (''nerzhul'')
* Move ASCII art to std::cerr, to remove it from logs (''rubenwardy'')
* PlayerSettings struct for player movement code (''bendeutsch'')
* Client eventmanager refactor (''nerzhul'')
* Update mesh collector and move it to a separate file (''numberZero'')
* Add Voxelarea unittests (''nerzhul'')
* VoxelArea: add_{x,y,z,p} must be static (''nerzhul'')
* Cleanup in flat lighting (''numberZero'')
* Node definition manager refactor (''juhdanad'')
* Move 'setlocale' from Lua to C++. (''red-001'')
* Rewrite rendering engine (''numberZero'')
* Improve the path select GUI (''red-001'')

== Older versions (pre-5.0.0) ==
If you want to see older versions (older than 5.0.0), please go to [[OldChangelog|this page]].

[[Category:Root-Category]]
[[Category:Compiling Minetest]]</text>
      <sha1>sdgpcu2ltd0v8je6tkj89xj41kb1825</sha1>
    </revision>
  </page>
  <page>
    <title>Chat commands</title>
    <ns>0</ns>
    <id>1022</id>
    <revision>
      <id>6250</id>
      <parentid>6249</parentid>
      <timestamp>2022-11-29T17:07:42Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <comment>add link</comment>
      <origin>6250</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="48" sha1="r1enl2f833t7cbt1cyo7xqsh5z2u6mn" xml:space="preserve">See [https://wiki.minetest.net/Server_commands].</text>
      <sha1>r1enl2f833t7cbt1cyo7xqsh5z2u6mn</sha1>
    </revision>
  </page>
  <page>
    <title>Code style guidelines</title>
    <ns>0</ns>
    <id>370</id>
    <revision>
      <id>5681</id>
      <parentid>5557</parentid>
      <timestamp>2022-02-26T13:43:08Z</timestamp>
      <contributor>
        <username>Sfan5</username>
        <id>10</id>
      </contributor>
      <origin>5681</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8740" sha1="8e48haocgpfzsvjdsdkzjzqasw02uxo" xml:space="preserve">This is the coding style used for C/C++ code. Also see the [[Lua code style guidelines]].

The coding style is based on the [https://www.kernel.org/doc/html/latest/process/coding-style.html Linux kernel code style]. Much of the existing code doesn't follow the current code style guidelines, do not try to replicate that. Use your best judgment for C++-specific syntax.

Currently, the code uses C++14. Do not use features that depend on more recent versions.

=== Spelling ===

Use American English, but avoid idioms that may be difficult to understand by non-native speakers.

=== Function declarations ===

In case your function parameters don't fit within the defined line length, use the following style.
Indention for continuation lines is '''exactly''' two tabs.

&lt;source lang="cpp"&gt;
void some_function_name(type1 param1, type2 param2, type3 param3,
		type4 param4, type5 param5, type6 param6, type7 param7)
{
	...
}
&lt;/source&gt;

Sometimes with complex function declarations, it might be messy to define as many parameters as possible on the same line.
This is acceptable too (and currently used in some places):

&lt;source lang="cpp"&gt;
void some_function_name(
		const ReallyBigLongTypeName &amp;param1,
		ReallyBigLongTypeName *param2,
		void *param3,
		size_t param4,
		const void *param5,
		size_t param6)
{
	...
}
&lt;/source&gt;

No more than 7 parameters allowed (except for constructors).

=== Spaces ===

* &lt;span style="color: red"&gt;Do '''not''' use spaces to indent.&lt;/span&gt;
* Try to stay under 6 levels of indentation.
* Add spaces between operators so they line up when appropriate (don't go overboard). For example:

&lt;source lang="cpp"&gt;
np_terrain_base   = settings-&gt;getNoiseParams("mgv6_np_terrain_base");
np_terrain_higher = settings-&gt;getNoiseParams("mgv6_np_terrain_higher");
np_steepness      = settings-&gt;getNoiseParams("mgv6_np_steepness");
np_height_select  = settings-&gt;getNoiseParams("mgv6_np_height_select");
...
bool success =
		np_terrain_base  &amp;&amp; np_terrain_higher &amp;&amp; np_steepness &amp;&amp;
		np_height_select &amp;&amp; np_trees          &amp;&amp; np_mud       &amp;&amp;
		np_beach         &amp;&amp; np_biome          &amp;&amp; np_cave;
&lt;/source&gt;

The above code looks really nice.
* Separate different parts of functions with newlines for readability.
* Separate functions by two newlines (not necessary, but encouraged).
* Use a space after &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;case&lt;/code&gt;, &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, etc.
* When breaking conditionals, indent following lines of the conditional with two tabs and the statement body with one tab. For example:

&lt;source lang="cpp"&gt;
for (std::vector&lt;std::string&gt;::iterator it = strings.begin();
		it != strings.end();
		++it) {
	*it = it-&gt;substr(1, 1);
}
&lt;/source&gt;

* Align backslashes for multi-line macros with spaces:

&lt;source lang="cpp"&gt;
#define FOOBAR(x) do {    \
	int __temp = (x); \
	foo(__temp);      \
} while (0)
&lt;/source&gt;

=== Bracing and indentation ===
==== &lt;code&gt;if&lt;/code&gt; statements ====
This rule has already been explicitly stated in the [https://www.kernel.org/doc/html/latest/process/coding-style.html Linux kernel code style] from which this code style inherits, but it will be repeated here:

&lt;span style="color: red"&gt;'''Putting the body of an &lt;code&gt;if&lt;/code&gt; statement on the same line as the condition is strictly prohibited.'''&lt;/span&gt;

Example:
&lt;source lang="cpp"&gt;
if (foobar &lt; 3) foobar = 45;      // Bad 
(foobar &lt; 3 &amp;&amp; (foobar = 45));    // Bad
&lt;/source&gt;

Violating this rule will result in '''instant rejection'''.

Examples of good if statement wordings:
&lt;source lang="cpp"&gt;
if (foobar &lt; 3)
	foobar = 45;

if (foobar &lt; 6) {
	foobar = 62;
	return;
}
&lt;/source&gt;

==== Nested for loop exception ====
Special exception to the standard bracing/indent rules for nested loops:
If a nested loop iterates over a set of coordinates, it is permitted to omit the braces for all but the innermost loop and keep the outer loops at the same indentation level, like so:
&lt;source lang="cpp"&gt;
for (s16 z = pmin.Z; z &lt;= pmax.Z, z++)
for (s16 y = pmin.Y; y &lt;= pmax.Y; y++)
for (s16 x = pmin.X; x &lt;= pmax.X; x++) {
	// ... do stuff here ...
}
&lt;/source&gt;

=== Do not be too C++y ===

* Avoid passing non-&lt;code&gt;const&lt;/code&gt; references to functions.
* Don't use initializer lists unless absolutely necessary (initializing an object inside a class, or initializing a reference).
* Try to minimize the use of exceptions.
* Avoid operator overloading like the plague.
* Avoid templates unless they are very convenient.
* Usage of macros is not discouraged, just don't overdo it [http://cgit.freedesktop.org/xorg/xserver/tree/randr/rrscreen.c?id=01e18af17f8dc91451fbd0902049045afd1cea7e#n325 like X.org]. It's better to use inline functions or lambdas instead.

=== Classes ===

* '''Class names are ''PascalCase'', method names are ''camelCase''.'''
* Don't put actual code in header files, unless it's a 4-liner, an inline function, or part of a template.
* Class definitions should go in header files.
* Substantial methods (over 4 lines) should be defined outside of the class definition.
* Functions not part of any class should use &lt;code&gt;lowercase_underscore_style()&lt;/code&gt;.

=== Comments ===

* Doxygen comments are acceptable, but '''please''' put them in the header file.
* Don't make uninformative comments like this:

&lt;source lang="cpp"&gt;
// Draw "Loading" screen
draw_load_screen(L"Loading...", driver, font);
&lt;/source&gt;

* Add comments to explain a non-trivial but important detail about the code, or explain behavior that is not obvious.
* For comments with text, be sure to add a space between the text and the comment tokens:

&lt;source lang="cpp"&gt;
DoThingHere();  // This does thing    &lt;--- yes!
DoThingHere();  /* This does thing */ &lt;--- yes!

DoThingHere();  //This does thing      &lt;--- no!
DoThingHere();  /*This does thing*/    &lt;--- no!
DoThingHere();//This does thing        &lt;--- no!
&lt;/source&gt;

=== Use STL, avoid Irrlicht containers, and no, Boost will not even be considered, so forget it ===

* In general, adding new dependencies is considered serious business.
* We are using C++14; Boost will never be an option.

=== Don't let things get too large ===

* '''Try to keep lines under 95 characters.''' It's okay if it goes over by a few, but do not exaggerate. (Note that this column count assumes 4-space indents.)
* Functions should not have over 200 lines of code – if you are concerned with having to pass too many parameters to child functions, make whatever it is into a class.
* Don't let files get too large (over 1500 lines of code). Currently, existing huge files (&lt;code&gt;game.cpp&lt;/code&gt;, &lt;code&gt;server.cpp&lt;/code&gt;, …) are in the slow process of being cleaned up.

=== Files ===

* Files should be named using ''snake_case'' style.
* Files should have includes for everything that they depend on. Don't depend on, eg, &lt;code&gt;"util/numeric.h"&lt;/code&gt; including &lt;code&gt;&lt;string&gt;&lt;/code&gt;!
* Uniqueness when compiling headers is ensured by using &lt;code&gt;#pragma once&lt;/code&gt;. ([https://github.com/minetest/minetest/issues/6259 Accepted by all coredevs])

&lt;source lang="cpp"&gt;
#pragma once

#include &lt;string&gt;

class Foo {
};

&lt;/source&gt;

* All files should include the appropriate license header.

=== Miscellaneous ===

* &lt;span style="color: red"&gt;Do '''not''' use &lt;code&gt;or&lt;/code&gt;, use &lt;code&gt;||&lt;/code&gt;.&lt;/span&gt;
* Set pointer values to &lt;code&gt;nullptr&lt;/code&gt; (C++11), not 0.
* When using floats, add the &lt;code&gt;f&lt;/code&gt; suffix, e.g. &lt;code&gt;float k = 0.0f;&lt;/code&gt; and not &lt;code&gt;float k = 0.0;&lt;/code&gt;.
* Avoid non-ASCII characters in source files. Other UTF-8 characters may (only) be used in string literals and comments where ASCII would worsen readability.
* Use of Hungarian notation is very limited. Scope specifiers such as &lt;code&gt;g_&lt;/code&gt; for globals, &lt;code&gt;s_&lt;/code&gt; for statics, or &lt;code&gt;m_&lt;/code&gt; for members are allowed. The prefix &lt;code&gt;m_&lt;/code&gt; is discouraged for public members in newer code as it is a part of the class' interface, but sometimes needed for consistency when adding a member to older code.
* Use ''snake_case'' for local variables, not ''camelCase''.
* Don't use distracting and unnecessary amounts of object-oriented abstraction. See [https://github.com/MovingBlocks/Terasology Terasology] as an example of what not to do.
** Don't add unnecessary design patterns to your code, such as factories/providers/sources.
* In &lt;code&gt;switch-case&lt;/code&gt; statements, add &lt;code&gt;break&lt;/code&gt; to the last case and to the &lt;code&gt;default&lt;/code&gt; case.
* In &lt;code&gt;if-else&lt;/code&gt; statements, put the code which is more likely to be executed first.
* For consistency, use American English where spellings differ (e.g. use "color", not "colour").

[[Category:Core Engine]]
[[Category:Rules and Guidelines]]</text>
      <sha1>8e48haocgpfzsvjdsdkzjzqasw02uxo</sha1>
    </revision>
  </page>
  <page>
    <title>Compiling Minetest</title>
    <ns>0</ns>
    <id>352</id>
    <revision>
      <id>6283</id>
      <parentid>6282</parentid>
      <timestamp>2023-01-22T18:00:38Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6283</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2021" sha1="rl58l2gfcnm43gt0v7im6nr9g3sndf3" xml:space="preserve">{{Mbox|type=warning|text=
'''This page is redundant with the compilation instructions that exist in the [https://github.com/minetest/minetest Minetest README]'''&lt;br/&gt;
''Link to the appropriate section in the README rather than here, and update any links that point to here!''
}}

''This page is about compiling Minetest for desktop platforms. For compiling Minetest for Android, see [[Android]].''

== Compiling on GNU/Linux ==
Please see the [https://github.com/minetest/minetest#compiling-on-gnulinux README.md file] for instructions.

=== See also ===
* [http://forum.minetest.net/viewtopic.php?f=3&amp;t=3837 One-line script for installing/compiling Minetest Git, for Debian / Ubuntu / Mint]

== Compiling on Windows ==
Please see the [https://github.com/minetest/minetest#compiling-on-windows-using-msvc Minetest README].

== Cross-compilation ==
To compile a win32 version of Minetest in Linux with [https://en.wikipedia.org/wiki/MinGW MinGW] you can use the build script in &lt;code&gt;[https://github.com/minetest/minetest/blob/master/util/buildbot/buildwin32.sh utils/buildbot/buildwin32.sh]&lt;/code&gt;.

To compile a win64 version of Minetest in Linux with [https://en.wikipedia.org/wiki/MinGW MinGW] you can use the build script in &lt;code&gt;[https://github.com/minetest/minetest/blob/master/util/buildbot/buildwin32.sh utils/buildbot/buildwin64.sh]&lt;/code&gt;.

If you have errors during cross compilation related to std::thread and std::mutex, this is due to mingw-w64 being incorrectly configured for cross compilation. 

To fix the errors, use the command:

For 64-bit builds: &lt;code&gt; sudo update-alternatives --config x86_64-w64-mingw32-g++ &lt;/code&gt; 

For 32-bit Ubuntu Builds: &lt;code&gt; sudo update-alternatives --config i686-w64-mingw32-g++ &lt;/code&gt;

For 32-bit Debian Builds: &lt;code&gt; sudo update-alternatives --config i586-w64-mingw32-g++ &lt;/code&gt;

When provided with a prompt for which version to select, please choose "posix". Then retry the buildwin32.sh or buildwin64.sh

[[Category:Core Engine]]
[[Category:Compiling Minetest]]</text>
      <sha1>rl58l2gfcnm43gt0v7im6nr9g3sndf3</sha1>
    </revision>
  </page>
  <page>
    <title>Development Tools</title>
    <ns>0</ns>
    <id>727</id>
    <revision>
      <id>6338</id>
      <parentid>6222</parentid>
      <timestamp>2023-03-15T01:48:51Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <comment>/* Translation */ Add a translation check script</comment>
      <origin>6338</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2852" sha1="sml1448rlshxb0zju7ofenv2ehmbsf0" xml:space="preserve">__NOTOC__
This article lists various free software tools which help in development of Minetest and mods for Minetest.

== Minetest development ==
* [https://wiki.minetest.net/Games/Development_Test Development Test]: A testing game for testing various engine features
* [https://github.com/minetest/minetest/tree/master/util /minetest/util]: Various maintenance utilities

== Mod development ==
=== Standalone software ===
* [https://forum.minetest.net/viewtopic.php?f=14&amp;t=2840 NodeBoxEditor]: Build [[Node boxes|node boxes]] by dragging their edges.
* [https://forum.minetest.net/viewtopic.php?f=14&amp;t=23724 MTS Editor]: A program to create, view and edit Minetest schematics, but it supports other file formats (e.g. Minecraft schematics) as well
* [https://forum.minetest.net/viewtopic.php?f=14&amp;t=18992 Schematic Creator]: A Java program to create schematics
* [https://forum.minetest.net/viewtopic.php?f=14&amp;t=18780&amp; Model Creator]: A Java program to create meshes
* [https://forum.minetest.net/viewtopic.php?t=23891 RocketLib Toolkit]: Lua-based SQLite3 map reader
* [https://github.com/mpeterv/luacheck/ luacheck]: Lua linter and static code analyser (see also [https://rubenwardy.com/minetest_modding_book/en/quality/luacheck.html the chapter rubenwardy's modding book])
* [https://olivinelabs.com/busted/ busted]: Lua unit testing framework (see also [https://rubenwardy.com/minetest_modding_book/en/quality/unit_testing.html the chapter rubenwardy's modding book])

=== Minetest games and mods ===
See the [https://content.minetest.net/packages/?tag=developer_tools Developer Tools] tag in ContentDB.

== Scripts ==
==== Formspecs ====
* [https://luk3yx.gitlab.io/minetest-formspec-editor/ Minetest Formspec Editor]: A great online tool with drag and drop that allows you to import and export formspecs in different versions
* [https://codepen.io/treer/pen/gOPZyov?editors=0010 Perlin noise tuner] Visualizes 2D Perlin noise that Minetest will generate with different noiseparams. (Emulation of Minetest Perlin noise can be wrong in extremes/edge-cases due to precision of JavaScript number type)

==== Translation ====
* [https://github.com/FaceDeer/update_translations update_translations]: Python script to create and update mod translation files (*.tr)
* [https://codeberg.org/Wuzzy/minetest_check_translations minetest_check_translations]: Python script to check mod translation files for syntax errors
* [https://notabug.org/pgimeno/minetest/src/translation-toolchain/util/findtext.lua findtext.lua]: Create mod translation template (buggy!) ([https://forum.minetest.net/viewtopic.php?f=47&amp;t=23330 see also])
* [https://notabug.org/pgimeno/minetest/src/translation-toolchain/util/updatetext.lua updatetext.lua]: Update mod translation template (buggy!) ([https://forum.minetest.net/viewtopic.php?f=47&amp;t=23330 see also])

[[Category:Misc]]</text>
      <sha1>sml1448rlshxb0zju7ofenv2ehmbsf0</sha1>
    </revision>
  </page>
  <page>
    <title>Development troubleshooting</title>
    <ns>0</ns>
    <id>346</id>
    <revision>
      <id>6220</id>
      <parentid>3452</parentid>
      <timestamp>2022-10-24T19:47:48Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6220</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7112" sha1="t5nooe5jb0u28kdzjhln2vu01o3cmsk" xml:space="preserve">== Lua API ==
Be sure to check out the [http://www.lua.org/manual/5.1/manual.html Lua 5.1 Reference Manual] and actually understand the Lua functions you are using well, in order to minimize stupid mistakes.&lt;br/ &gt;&lt;br /&gt;
Q. I've created a new class for the Lua API, but whenever I try to call a method from it, I get a Lua error that says something along the lines of "attempt to index local 'objecthere' (a userdata value)"&lt;br /&gt;
A. Did you forget to register the class?  An object from C is Lua userdata unless it has an __index and __metatable field describing that it is a class and what members it has.  See the static Register() method from the LuaPerlinNoise as an example of what to do.  Be sure you remember to call your Register function in the body of scriptapi_export().&lt;br /&gt;&lt;br/ &gt;
===== Small, aggravating things about Lua =====
* The end condition for a loop is actually "up to and including", not "up to" like most other languages and as is nearly always used in languages that let you define the loop condition (e.g. curly bracket languages).  This means that 'for i = 0, 20 do' actually executes 21 times, not 20.
* Arrays in Lua are supposed to start at 1, not 0.  Even though 0 is a perfectly acceptable index and may be used in your own code, all Lua standard functions (and Minetest API functions) will start indexing at 1.
On that note...&lt;br/ &gt;
Q. It seems the array I pass to/get from a Lua API function got corrupted somehow, that is, certain elements are nil when they shouldn't be.&lt;br/ &gt;
A. You may be using the wrong index from within Lua.  Arrays in Lua are really associative arrays/hashtables.  As a result, anything may be used to index these tables - including floating point numbers.  Some Lua code you're writing may look like this:
&lt;source&gt;
x1,y1,z1 = get_start_pos()
x2,y2,z2 = get_end_pos()
for z = z1, z2 - 1 do
for y = y1, y2 - 1 do
for x = x1, x2 - 1 do
    foo(array[z - z1][y - y1][x - x1])
&lt;/source&gt;
Due to floating point error, z - z1 may not be the integer 0 like you expect, but rather 0.00000000000002 or something of the sort.  Lua's number-to-string conversion is not exact, and you may think that your index is an integer when it is not.  To solve this, access arrays like so:
&lt;source&gt;
array[math.floor(z - z1)][math.floor(y - y1)][math.floor(x - x1)]
&lt;/source&gt;
&lt;br/ &gt;
See also: [[Lua_Optimization_Tips]]&lt;br/ &gt;&lt;br/ &gt;

== Nodedef ==
Q. I have some new data structure that gets initialized in the Server ctor that creates MapNodes on initialization, but I always seem to get a CONTENT_IGNORE node.&lt;br/ &gt;
A. You need to ensure that at least the piece of code creating the MapNodes runs _after_ the Lua scripts are initially run, otherwise the node definitions will not be registered.&lt;br/ &gt;&lt;br/ &gt;

Q. I use alias node name strings to register something in via Lua on initialization, but I keep getting CONTENT_IGNORE, even though the "default:*" node names work!&lt;br/ &gt;
A. Unfortunately, the node aliases, although registered, are not yet present in the nodeid-to-name mapping table.  The mapping table must be manually updated with CNodeDefManager::updateAliases() first.  To work around this, consider storing the node names and getting the content IDs later.&lt;br/ &gt;&lt;br/ &gt;
== Perlin Noise ==
Q. All of my noise is incoherent!  It looks like a bunch of diagonal lines (for example) but is for the most part, crazy!&lt;br/ &gt;
A. Check out the noise-&gt;result array in a debugger (or print them out, whichever is more convenient).  Do the values look sane?&lt;br /&gt;
If so, are you accessing the correct elements?  A common problem is to forget to access the array with relative coordinates, but the out-of-bounds access isn't caught since your debugging mode for your compiler did not add in any run-time bounds checking, and you wouldn't notice it until you actually crash.  Another potential problem is not multiplying by the correct 'stride' value (number of bytes to skip in order to get to the next row). &lt;br/ &gt;
If not, chances are that some input is erroneous or the result[] array is being corrupted for whatever reason.  Try setting a data write breakpoint on it to ensure that it isn't being written to somewhere else other than within Noise::perlinMap2D/perlinMap3D.&lt;br /&gt;&lt;br /&gt;
Q. My noise works, but it seems like each generated chunk doesn't match up with the others.&lt;br/ &gt;
A. Do you have code like this:
&lt;source lang="cpp"&gt;
int i = 0;
for (int x = x1; x != x2; x++) {
    for (int y = y1; y != y2; y++) {
        foo(noise-&gt;result[i++]);
&lt;/source&gt;
?&lt;br/ &gt;
If so, you have inadvertently transposed your matrix. Read the values in the correct order (i.e., for (y ..) { for (x ..) {)&lt;br/ &gt;
If that's not the case, it could then be that you're either:&lt;br/ &gt;
1). Modifying the NoiseParams structure associated with the Noise object inadvertently, or&lt;br/ &gt;
2). Not passing the correct coordinates to Noise::getPerlinMap2D/3D().  The _absolute coordinates_ are supposed to be passed to that method - don't worry about noise spread factor; it's taken care of.  That is, if you intend to get a map of the Perlin noise starting at x=100, y=200, actually pass 100, 200.&lt;br/ &gt;
If you wish to add an absolute offset to the position for whatever reason (*cough* compatibility), then you must explicitly multiply the constant by the noise spread factor.&lt;br/ &gt;&lt;br/ &gt;
== Lighting in Generated Chunks ==
Q. I just generated a chunk of nodes in a VoxelManipulator and I then calculate the lighting, but the entire world is still dark!  I can't see anything unless I turn on fly mode, then the background is sky blue (and the rest is black).&lt;br/ &gt;
A. Are you accidentally writing CONTENT_IGNORE underneath the 'overtop' which voxalgo::propogateSunlight() checks for sunlight?  (Do recall that CONTENT_IGNORE does not allow light to pass through.)&lt;br/ &gt;
The VoxelManipulator being passed to makeChunk() through the BlockMakeData structure is not _actually_ bounded by blockpos_min and blockpos_max; whatever is present in this buffer zone that is not CONTENT_IGNORE is blitted back to the map as well, allowing for things such as caves and what not to not necessarily be connected from chunk to chunk.  Don't ''accidentally'' write nodes here!&lt;br/ &gt;&lt;br/ &gt;
== Minetest crashes ==
Q. In some situation, e.g. when I enable public serverlist, minetest crashes giving an error message. How can I find out more about what's wrong?&lt;br/ &gt;
A. If you use Linux, you can use [https://en.wikipedia.org/wiki/GNU_Debugger gdb].&lt;br/ &gt;
You need to have a minetest compiled as debug build (&lt;code&gt;-DCMAKE_BUILD_TYPE=Debug&lt;/code&gt;).&lt;br/ &gt;
Then run $ '''gdb bin/minetest''',&lt;br/ &gt;
type '''run --verbose''',&lt;br/ &gt;
and after that minetest should start and you make it crash.&lt;br/ &gt;
After it crashed, minimize it and&lt;br/ &gt;
type '''bt full''' to make it show a backtrace.&lt;br/ &gt;
BTW: To put any recently marked text into a text file, just run $ '''xsel -o &gt; tmp.txt'''.&lt;br/ &gt;
[https://forum.minetest.net/viewtopic.php?p=203139#p203139 See the posts at the forum.]&lt;br/ &gt;
And sometimes the command $ '''dmesg''' can be useful, e.g. when the crash doesn't only happen in minetest.&lt;br/ &gt;&lt;br/ &gt;
[[Category:Debugging]]</text>
      <sha1>t5nooe5jb0u28kdzjhln2vu01o3cmsk</sha1>
    </revision>
  </page>
  <page>
    <title>Engine</title>
    <ns>0</ns>
    <id>992</id>
    <revision>
      <id>6176</id>
      <parentid>5558</parentid>
      <timestamp>2022-08-21T16:53:28Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <origin>6176</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1374" sha1="ns78ebg84kh3fi37w1v8hfxn21qzbsv" xml:space="preserve">The engine section and the [[:Category:Core_Engine|Core Engine category]] is for documentation of the Minetest engine, which consists of a C++ core and a Lua builtin script.

This page contains links to useful information.

== Useful Resources ==

* [[Engine/Structure|Engine Structure]] - for an introduction and light reference to the engine's structure. Start here.
* [[Engine/Basic_data_structures|Basic data structures]] - general data structures.
* [[Engine/Objects|Objects]] - documentation on active and static objects.
* Doxygen - For a complete (but often missing comments) reference to code. You'll need to generate this yourself
* See [[:Category:Core_Engine|all pages on the engine]].
* See [[:Category:Rules_and_Guidelines|Rules and Guidelines]].

== How to help improve documentation ==

* Doxygen: We want to document most or all of Minetest core with [http://en.wikipedia.org/wiki/Doxygen Doxygen-style] code comments.
:* The usage of doxygen is explained [http://www.doxygen.nl/manual/index.html there].
:* Head over to #minetest-dev on IRC, and ask someone there to help you get started with documentation. You'll need to download the project through [[Git]] and then make your changes.
* Move stuff from [[Engine/NMPR|NMPR]] to [[Engine/Structure|Engine Structure]], and improve [[Engine/Structure|Engine Structure]] generally.


[[Category:Core Engine]]</text>
      <sha1>ns78ebg84kh3fi37w1v8hfxn21qzbsv</sha1>
    </revision>
  </page>
  <page>
    <title>Engine/Basic data structures</title>
    <ns>0</ns>
    <id>305</id>
    <revision>
      <id>6233</id>
      <parentid>6113</parentid>
      <timestamp>2022-10-25T13:45:03Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <comment>/* See also */</comment>
      <origin>6233</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5201" sha1="a1x5mwrwpncb3tn047deb6rsysf8jz9" xml:space="preserve">== IRC logs on this subject ==

[http://web.archive.org/web/20160309052711/http://logs.2pktfkt.de/minetest-delta/2011-11-07.html minetest-delta/2011-11-07]
[http://web.archive.org/web/20160308105531/http://logs.2pktfkt.de/minetest-delta/2011-11-08.html minetest-delta/2011-11-08]

For the log dating 2011-11-07, the subject discussion starts at the end.

== Node ==

Simply put, nodes are the "cubes" that make the world.

A node in Minetest is a cubic section of the world with the size 1×1×1 set in a 3-D raster. Each node has one, and only one distinct type like dirt, sand, stone, air, water source, etc. Every node in the world has whole-number coordinates like (4,6,12). This means you can't place a node at a position like (4.5, 7.553, -64.5). There can only be node per 3-D position, e.g. there can't be a stone ''and'' sand node at the same position.

Nodes are most recognizable as the cubes that make the world, like blocks of dirt, sand or stone, but this is a simplification, because things that don't ''look'' like a cube (like stairs, slabs, plants, and even air (=empty space) are considered nodes, too. Nodes in Minetest are the equivalent to blocks in Minecraft.

Although nodes themselves don't overlap with each over in a technical sense, their ''visual appearance'' and even the collision properties of individual nodes ''can'' be larger than 1×1×1, thus leading to a possible overlap in a practical sense. Games sometimes use this for walls with a collision box that extends a little above them to prevent jumping over walls, or to create very large plants or underwater plants (with the &lt;code&gt;plantlike_rooted&lt;/code&gt; drawtype), and more.

In the Minetest code, a node (represented by the C++ class &lt;code&gt;MapNode&lt;/code&gt;) contains only a small amount of data that can be transferred easily between the client and the server. This data includes what type of node it is, e.g. Dirt node or Sand node, and some other data for lighting (via param1) and miscellaneous parameters, like rotation, color, etc. (via param2). Nodes can also have metadata attached to them (which allows for much more data) which is commonly used for formspecs but also for other more complex custom stuff.

Nodes don't have any interactive functionality, this is done by the client and the client knows what to do depending on what type of node it is.

Special nodes are [http://wiki.minetest.net/Ignore ignore], [http://wiki.minetest.net/Air air] and [https://wiki.minetest.net/Unknown_Node unknown node] which are the only nodes added by Minetest directly (rather than a mod or game).

* Ignore: Where map is not generated, there's ignore. &lt;code&gt;minetest.get_node&lt;/code&gt; gives ignore also if the map is not loaded, so to get the node in unloaded chunks you can use LuaVoxelManipulator.
* Air: Air is set when a node is removed. For the player it's empty space.
* Unknown Node: This node is a special case when the map contains a node with an unknown/undefined type.

== Block / MapBlock ==

A block (or MapBlock) in Minetest, is a collection of 16x16x16 nodes (described above), and they are the pieces that together make the world/map.

In code, the block (represented by the class MapBlock) contains one mesh (only client-side) for all 16x16x16 nodes. A mesh is the geometry of an object, in this case the block. A mesh contains a collection of materials aka. textures, which is how each node is represented visually.

The map block is saved like this:

&lt;pre&gt;
// This describes version 22 and higher

u8 flags; // is_underground:0x1, m_day_night_differs:0x2, !m_generated:0x8
u16 m_lighting_complete; // since version 27
u8 content_width; // can only be 1 or 2
u8 params_width; // always set to 2
bulk_data; // compressed
metadata; // serialized and compressed
// disk only
u8 unused_zero; // only version 23
node_timers; // only version 24
objects;
u32 timestamp;
NameIdMapping nimap; // node ids in this block
node_timers; // since version 25

// bulk_data (after decompression):
u8 param0[nodecount]; // only if content_width=1, param0 contains the content
	// nodecount is 16*16*16
u16 param0[nodecount]; // only if content_width=2
u8 param1[nodecount]; // the light values
u8 param2[nodecount]; // only if content_width=1
	// param2 may contain param0 data in the upper 4 bits:
	// if param0[i] &gt; 0x7f (which is 127) then
		// u16 param0[i] := (param0[i] &lt;&lt; 4) | (param2[i] &gt;&gt; 4)
		// param2[i] := param2[i] &amp; 0xf
u8 param2[nodecount]; // only if content_width=2

&lt;/pre&gt;

== mapchunk ==

A mapchunk in Minetest is a collection of 5x5x5 MapBlocks (described above), and each time map generates, another mapchunk appears.


== Map ==

The Map (class Map) stores MapBlocks and works as an abstraction layer for the MapBlocks, allowing the users of Map to see the world as a consistent bunch of MapNodes.

Map also knows how to load and save MapBlocks.

It also contains functionality for lighting and liquid updates.

== VoxelManipulator ==

The VoxelManipulator is an object that stores arbitrary areas from the Map, for transferring into other threads and allowing faster node access than the Map does.

== See also ==
[https://wiki.minetest.net/Terminology Terminology]

[[Category:Core Engine]]</text>
      <sha1>a1x5mwrwpncb3tn047deb6rsysf8jz9</sha1>
    </revision>
  </page>
  <page>
    <title>Engine/Mapgen</title>
    <ns>0</ns>
    <id>347</id>
    <revision>
      <id>5270</id>
      <parentid>2867</parentid>
      <timestamp>2020-06-18T19:43:13Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Rubenwardy moved page [[Mapgen]] to [[Engine/Mapgen]]</comment>
      <origin>5270</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5491" sha1="en41qt69xgzcbol715sejj17nourbni" xml:space="preserve">== Overview ==
A map generator (hereinafter referred to as "mapgen") object creates new map and responds to queries about map terrain.  Each derived Mapgen class must implement the two pure virtual methods in the Mapgen interface, makeChunk() and getGroundLevelAtPoint().&lt;br /&gt;
Members of a Mapgen object are guaranteed to be valid data used in the latest call of makeChunk() by that object.&lt;br /&gt;
Access of Mapgen objects are typically not thread-safe.
=== Mapgen ===
===== Pure virtual methods to be implemented =====
&lt;source lang="cpp"&gt;
virtual int getGroundLevelAtPoint(v2s16 p);
&lt;/source&gt;
Returns the ground height at the 2d coordinates p.
&lt;br /&gt;
&lt;source lang="cpp"&gt;
virtual void makeChunk(BlockMakeData *data);
&lt;/source&gt;
Given a BlockMakeData structure, update the included ManualMapVoxelManipulator for the range of blocks from blockpos_min up to and also blockpos_max with MapNodes from the included INodeDefManager.
&lt;br /&gt;
===== Non-virtual methods =====
&lt;source lang="cpp"&gt;
void updateLiquid(UniqueQueue&lt;v3s16&gt; *trans_liquid, v3s16 nmin, v3s16 nmax);
&lt;/source&gt;
Add liquids that need to be updated to the transforming_liquid queue.
&lt;source lang="cpp"&gt;
void setLighting(v3s16 nmin, v3s16 nmax, u8 light);
&lt;/source&gt;
Set all nodes' light levels in vm to the specified, uniform light level.
&lt;source lang="cpp"&gt;
void calcLighting(v3s16 nmin, v3s16 nmax);
&lt;/source&gt;
Calculate and update the lighting for nodes in vm.
&lt;source lang="cpp"&gt;
void calcLightingOld(v3s16 nmin, v3s16 nmax);
&lt;/source&gt;
Same as calcLighting() and may be slightly more accurate, but 22x slower on average.

===== Members =====
 u64 seed
The map seed used for generation.
 int water_level
The node Y position below which water occurs, and MapBlocks are marked as being underground.
 bool generating
Signifies if the Mapgen object is currently in a call to makeChunk().  Reading this variable is not thread safe, but this is not problematic since it is intended to be used for informational purposes, such as profilers or output, rather than synchronization.
 int id
The ID and index of that Mapgen in the EmergeManager.
 ManualMapVoxelManipulator *vm
Must be a pointer to a valid ManualMapVoxelManipulator while makeChunk() is executed.  Set this equal to what is given in BlockMakeData.
 INodeDefManager *ndef
Must be a pointer to a valid INodeDefManager while makeChunk() is executed.  Set this equal to what is given in BlockMakeData.
 v3s16 csize
Represents the size of the chunk that the Mapgen expects to process on makeChunk().
 s16 *heightmap
An X, Z array of ground level points in the most recently generated chunk.  It is csize.X * csize.Z elements large.  This member is NULL if the mapgen does not support heightmaps.
 u8 *biomemap
An X, Z array of biome IDs (indices of biomes in the BiomeDefManager) at each horizontal point in the most recently generated chunk.  It is csize.X * csize.Z elements large.  This member is NULL if the mapgen does not support biomes.

=== BlockMakeData ===
A BlockMakeData structure has the following members:&lt;br /&gt;
 ManualMapVoxelManipulator *vmanip
The ManualMapVoxelManipulator where nodes are to be written to.  Already contains the current map contents in the contained coordinates.  If a node has not previously been written to, it is CONTENT_IGNORE.&lt;br /&gt;
 u64 seed
The 64-bit map seed to be used for randomized events.  Not need anymore, as the base MapgenParams object passed to MapgenFactory::createMapgen() will contain this as well.&lt;br /&gt;
 v3s16 blockpos_min
 v3s16 blockpos_max
Respectively, the minimum and maximum (inclusive) block (NOT NODE) coordinates to be generated.&lt;br /&gt;
 v3s16 blockpos_requested
The block coordinate of the actual block requested for generation.  Not really necessary.&lt;br /&gt;
 UniqueQueue&lt;v3s16&gt; transforming_liquid
A UniqueQueue of 3d coordinates specifying which nodes are liquid and need a liquid transform applied after generation so they can flow. &lt;br /&gt;
 INodeDefManager *nodedef
A NodeDef that contains the definitions for nodes to be placed to the ManualMapVoxelManipulator.&lt;br /&gt;

== Boilerplate Mapgen Code ==
Here is the bare minimum for a (playable) map generator:
&lt;source lang="cpp"&gt;
class MapgenTest : public Mapgen {
public:
	void makeChunk(BlockMakeData *data) {
		vm   = data-&gt;vmanip;
		ndef = data-&gt;nodedef;
		
		v3s16 node_min = data-&gt;blockpos_min * MAP_BLOCKSIZE;
		v3s16 node_max = (data-&gt;blockpos_max + v3s16(1,1,1)) * MAP_BLOCKSIZE - v3s16(1,1,1);
		
		MapNode n_air(ndef-&gt;getId("mapgen_air"));
		MapNode n_grass(ndef-&gt;getId("mapgen_dirt_with_grass"));
		
		for (int z = node_min.Z; z &lt;= node_max.Z; z++) {
			for (int y = node_min.Y; y &lt;= node_max.Y; y++) {
				for (int x = node_min.X; x &lt;= node_max.X; x++) {
					int i = vm-&gt;m_area.index(x, y, z);
					vm-&gt;m_data[i] = (y == -4) ? n_grass : n_air;
				}
			}
		}
		
		calcLighting(node_min, node_max);
	}
	
	int getGroundLevelAtPoint(v2s16 p) {
		return 0;
	}
};

class MapgenTestParams : public MapgenParams {
public:
	bool readParams(Settings *settings) {
		return true;
	}
	
	void writeParams(Settings *settings) {	
	}
};

class MapgenTestFactory : public MapgenFactory {
public:
	Mapgen *createMapgen(int mgid, MapgenParams *params, EmergeManager *emerge) {
		return new MapgenTest();
	}
	
	MapgenParams *createMapgenParams() {
		return new MapgenTestParams();
	}
};
&lt;/source&gt;
Then, simply add
&lt;source lang="cpp"&gt;
registerMapgen("test", new MapgenTestFactory());
&lt;/source&gt;
to EmergeManager::EmergeManager().

[[Category:Core Engine]][[Category:Mapgen]]</text>
      <sha1>en41qt69xgzcbol715sejj17nourbni</sha1>
    </revision>
  </page>
  <page>
    <title>Engine/NMPR</title>
    <ns>0</ns>
    <id>304</id>
    <revision>
      <id>5241</id>
      <parentid>3289</parentid>
      <timestamp>2020-06-18T19:28:09Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Rubenwardy moved page [[Core Architecture]] to [[Engine/NMPR]]</comment>
      <origin>5241</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6178" sha1="8a0e7d1ymtrujliykiztjpvbki1nufk" xml:space="preserve">== The base (NMPR) ==
Everything is built on a small core, that was the original network multiplayer release of Minetest (let's call it NMPR; the 2010-10-24 version). Being around 10000 lines of code, it contains:
* The '''Map''': Voxel storage + lighting + rendering
* The '''Environment''': Contains the map and the players, handles the simulation of the world
* The '''Client''' + '''Server''' logic
* The '''main loop''': Invokes the client, the server, the environment and the rendering.
* A bunch of wrappers for OS-dependent things, and utilities.

As the current code still largely bases on the NMPR, it is useful to look at how it works.

NMPR has been made available at [https://github.com/celeron55/minetest_nmpr https://github.com/celeron55/minetest_nmpr] (easiest to build). Older source release is [http://c55.me/random/2013-01/minetest_10-10-24_16-33-41_wonderful.tar.gz here (source)] (build like [http://gist.github.com/4578183 this]). Also the [http://c55.me/random/2010-10/old/minetest-c55-win32-101024164856.zip original win32 release] is available (works in wine).

=== Map (the voxels) ===
[[File:minetest_voxel_storage.png|400px|thumb|right|Minetest Voxel Storage]]
* The main content of the Map is a &lt;code&gt;map&lt;v2s16, MapSector*&gt;&lt;/code&gt; container.
* The main content of a MapSector is &lt;code&gt;map&lt;s16, MapBlock*&gt;&lt;/code&gt;.
* The main content of a MapBlock is a linear array of 16x16x16 MapNodes.

These form a relatively performant storage of voxel data. In addition to these containers, the latest fetched MapBlock is cached in each MapSector, and the last fetched MapSector is cached in Map, resulting in very useful sequential access speed through the whole abstraction layer.

=== Environment ===
The content of the environment in NMPR is:
* Map
* List of Players

Players contain:
* Position and speed
* An Irrlicht scene node (that is rendered by Irrlicht)
* move() method with collision detection

In later versions of Minetest, the environment also contains things like [[ActiveObject|ActiveObjects]] and [[ABM|ABMs]].

=== Network protocol ===
The high-level network protocol of NMPR is delightfully simple. There are four commands for the server, and four commands for the client. Since this, a lot has been added and changed, but the basic idea stays the same.

==== Client -&gt; Server ====
{| class="wikitable"
|TOSERVER_GETBLOCK
|v3s16 p
|Ask the server to send the data of a block
|-
|TOSERVER_ADDNODE
|v3s16 p, MapNode node
|Inform the server of a placed node
|-
|TOSERVER_REMOVENODE
|v3s16 p, MapNode node
|Inform the server of a removed node
|-
|TOSERVER_PLAYERPOS
|v3s32 p*100, v3s32 speed*100
|Inform the server of the positon of the local player
|}

==== Server -&gt; Client ====
{| class="wikitable"
|TOCLIENT_BLOCKDATA
|v3s16 p, MapBlock data
|Send the content of a block (16x16x16 nodes)
|-
|TOCLIENT_ADDNODE
|v3s16 p, MapNode node
|Add a node
|-
|TOCLIENT_REMOVENODE
|v3s16 p, MapNode node
|Remove a node
|-
|TOCLIENT_PLAYERPOS
|foreach(player){
:u16 player_id, v3s32 p*100, v3s32 speed*100}
|Update players on client
|}

Minetest uses it's own reliability layer on top of UDP. It isn't well documented at the moment, and thorough understanding of it isn't that important, so let's skip it as of now.

=== Server ===
The NMPR server logic is 287 lines of code that runs in two threads:

'''Main thread:'''
* Run a simulation step of the environment (= move players)
* Store the time passed from last time for the server thread
'''Server thread'''
* Receive and handle network packets
* Handle network timeouts
* Send player positions

==== Packet handler ====
The packet handler handles the TOSERVER_* commands coming from clients.

{|
|TOSERVER_GETBLOCK
|Serialize the content of a MapBlock and send it (TOCLIENT_BLOCKDATA)
|-
|TOSERVER_REMOVENODE
|Set a node to be air and echo to other clients
|-
|TOSERVER_ADDNODE
|Set a node to the type provided and echo to other clients
|-
|TOSERVER_PLAYERPOS
|Update the position and speed of a player in the server environemnt
|-
|}

=== Client ===
Most of what the client does is very obvious, but there is one thing to note:
{|
|'''NMPR'''
|The client "catches" accesses to unknown MapBlocks, and requests them from the server based on those accesses
|-
|'''Later'''
|The server sends MapBlocks based on where the client's player is located and what it hasn't sent yet.
|}

=== Rendering ===
Rendering of players and GUI is done by regular Irrlicht stuff ([http://irrlicht.sourceforge.net/tutorials/ Irrlicht tutorials]). What is interesting is how the voxel world is rendered.

In NMPR, rendering of the Map works like this:

'''Cache step''' (runs in the background, in a thread managed by Map)
* List MapBlocks in displayed area that have been modified
* Update lighting in them
* foreach(MapBlocks that were modified in the previous steps):
:* Go through the MapBlock, detecting all air/non-air surfaces, collecting them to a list of faces
'''Render step'''
* Create a list of MapBlocks in rendering range
* foreach(MapBlocks in rendering range):
:* If it is not in front of the player, skip it
:* Draw the faces of the MapBlock

This is how Minetest works up to this day, except:
* At some point, instead of storing faces, Minetest was made to store [http://en.wikipedia.org/wiki/Polygon_mesh meshes].
* The mesh generator is managed by the Client.
* In Minetest 0.3.1, [http://en.wikipedia.org/wiki/Hidden_surface_determination#Occlusion_culling occlusion culling] was added to the render step
* In Minetest 0.4.3, the list of MapBlocks to be rendered is cached, and sorted by texture

=== Main loop ===
'''Initialization:'''
* Basic game stuff: Initialize graphics, load textures, set up camera, hide cursor
* Start server if hosting a game (or playing a local game)
* Start client and connect it to a server
'''Loop'''
* Read input
* Run client (also steps the environment)
* Run server
* Update camera
* Calculate what block is the crosshair pointing to
* If the player left/right clicked, send a remove/add node command to server
* Render scene

== Hmm... ==
TODO: Describe newer things like world saving, inventories, scripting (definition managers) and sound.
[[Category:Core Engine]]</text>
      <sha1>8a0e7d1ymtrujliykiztjpvbki1nufk</sha1>
    </revision>
  </page>
  <page>
    <title>Engine/Network Protocol</title>
    <ns>0</ns>
    <id>354</id>
    <revision>
      <id>5261</id>
      <parentid>3776</parentid>
      <timestamp>2020-06-18T19:36:33Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Rubenwardy moved page [[Network Protocol]] to [[Engine/Network Protocol]]</comment>
      <origin>5261</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="10095" sha1="o12o4s973epmd8a8egiq1bpqriz4wiv" xml:space="preserve">== High-level protocol ==

The high-level protocol is clearly written down and updated in [https://github.com/minetest/minetest/blob/master/src/network/networkprotocol.h networkprotocol.h].

For specifics, refer to [https://github.com/minetest/minetest/blob/master/src/client.cpp client.cpp] and [https://github.com/minetest/minetest/blob/master/src/server.cpp server.cpp] for the sending, and
[https://github.com/minetest/minetest/blob/master/src/network/clientpackethandler.cpp clientpackethandler.cpp] and
[https://github.com/minetest/minetest/blob/master/src/network/serverpackethandler.cpp serverpackethandler.cpp] for the receiving.

There is also an ascii art inside [https://github.com/minetest/minetest/blob/master/src/clientiface.h clientiface.h] describing the protocol from a high level perspective.

Actual minimum protocol version is: '''24'''. This corresponds to Minetest '''0.4.11'''.

=== Handshake ===
From client's standpoint:
* -&gt; TOSERVER_INIT
* &lt;- TOCLIENT_HELLO
* &lt;-&gt; Authentication
* &lt;- TOCLIENT_AUTH_ACCEPT
* -&gt; TOSERVER_INIT2
* &lt;- Many many things

If you just want to check if a server is alive, you can disconnect after receiving TOCLIENT_INIT. Note that handshake changed with protocol 25. In order to be compliant with both old and new servers, send both TOCLIENT_INIT and TOCLIENT_INIT_LEGACY with a protocol version &gt;= 25. New servers will ignore TOCLIENT_INIT_LEGACY that have a protocol version &gt;= 25, and listen for TOCLIENT_INIT. Old servers will ignore TOCLIENT_INIT because its an unknown packet for them.

The handshake before protocol 25 was, from client's standpoint:
* -&gt; TOSERVER_INIT_LEGACY
* &lt;- TOCLIENT_INIT_LEGACY
* -&gt; TOSERVER_INIT2
* &lt;- Many many things

=== Authentication ===
Starting with protocol 25, minetest got more generic authentication handling.
==== Authentication before protocol 25 (&lt;=0.4.12) ====
The client sent the desired username and a hash of the password salted with the username to the server inside TOSERVER_INIT_LEGACY (see the translatePassword function inside util/string.h for details on the hash).
The server then compared the passed hash with an entry from the auth backend, and sent TOCLIENT_INIT_LEGACY on success, TOCLIENT_ACCESS_DENIED_LEGAGY when authentication failed. On first login, the server already had the value to store inside its database.
Similarly, the "change password" functionality was done using the TOSERVER_PASSWORD_LEGACY packet, where the client sent hash of old and desired new packet, and the server updated the value.
==== Authentication since protocol 25 ====
Authentication is now handled with different "authentication mechanisms".
In the the TOSERVER_INIT packet, the client sends the desired username. Then the server replies with a list of supported authentication mechanisms in TOCLIENT_HELLO. The client then choses a supported auth mechanism, and starts the auth.
Currently there are three auth mechanisms in usage, all around the [https://en.wikipedia.org/wiki/Secure_Remote_Password_protocol Secure Remote Password Protocol (SRP)]:

1. AUTH_MECHANISM_SRP: Modern srp salted with the server provided salt. This auth mechanism is presented by the server if it has a modern srp verification key.

2. AUTH_MECHANISM_LEGACY_PASSWORD: srp with the legacy database hash used as "salt". The server presents this auth mechanism if the database only contains the legacy hash.

3. AUTH_MECHANISM_FIRST_SRP: First login, setting (srp) password, or to change the (srp) password.

The actual SRP exchange is done in accordance with [https://tools.ietf.org/html/rfc2945 RFC 2945], using [https://tools.ietf.org/html/rfc5054#appendix-A RFC5054's 2048 group], and SHA-256 as hash algorithm. The only difference from RFC 2945 is that user names are lowercased by default, in order to make the login protocol case insensitive.

===== FAQ design choices =====
* '''Why two srp auth methods? Why not just one, that's also working with the legacy hash?''': Its correct, that both LEGACY and modern login methods allow to prevent replay attacks, and give men in the middle no way to offline brute-force the password, serving the two main srp advantages. However, if you look at the differences between the modern and the legacy auth mechanisms, you will notice that the new method has case insensitivity baked in.
* '''Why these needless 'auth mechanism' abstractions? You are using three different types of auth mechanism support (login, sudo mode login, setting password from sudo mode)''': The abstractions are neccessary for future extensibility. Also they make sense, as even for setting up passwords you will want to make authentication failable. Think of additional e-mail verification steps at account setup, but we are using this already inside current protocol, when the server checks the is_empty value sent by the client to match with non empty password policies. And third, the abstractions come at very low cost, check how lightweight it is by having a look at the "setting password from sudo mode".

== Low-level protocol ==

References: [https://github.com/minetest/minetest/blob/master/src/network/connection.h connection.h] [https://github.com/minetest/minetest/blob/master/src/network/connection.cpp connection.cpp]

The Minetest protocol is a small layer on top of UDP. There is a header and four packet types.

All numbers are big-endian.

&lt;pre&gt;
A packet is sent through a channel to a peer with a basic header:
    Header (7 bytes):
    [0] u32 protocol_id
    [4] u16 sender_peer_id
    [6] u8 channel
sender_peer_id:
    Unique to each peer.
    value 0 is reserved for making new connections
    value 1 is reserved for server
channel:
    The lower the number, the higher the priority is.
    Only channels 0, 1 and 2 exist.
*/
#define BASE_HEADER_SIZE 7
#define PEER_ID_INEXISTENT 0
#define PEER_ID_SERVER 1
#define CHANNEL_COUNT 3
&lt;/pre&gt;

'''Channels aren't really used much.''' The channel priority thing hasn't actually ever been implemented and probably never will. Also, channels are intended to provide a few parallel reliable streams when needed - thus if one sends big reliable chunks of data in one channel and then small reliable packets in an another, and one of the pieces of the large chunk gets dropped and has to be re-sent, the small packets will see no delay. Because the order between channels is not maintained, care must be taken to not send stuff in different channels that needs to arrive in the right order.

&lt;pre&gt;
/*
Packet types:

CONTROL: This is a packet used by the protocol.
- When this is processed, nothing is handed to the user.
    Header (2 byte):
    [0] u8 type
    [1] u8 controltype
controltype and data description:
    CONTROLTYPE_ACK
        [2] u16 seqnum
    CONTROLTYPE_SET_PEER_ID
        [2] u16 peer_id_new
    CONTROLTYPE_PING
    - There is no actual reply, but this can be sent in a reliable
      packet to get a reply
    CONTROLTYPE_DISCO
*/
#define TYPE_CONTROL 0
#define CONTROLTYPE_ACK 0
#define CONTROLTYPE_SET_PEER_ID 1
#define CONTROLTYPE_PING 2
#define CONTROLTYPE_DISCO 3

/*
ORIGINAL: This is a plain packet with no control and no error
checking at all.
- When this is processed, it is directly handed to the user.
    Header (1 byte):
    [0] u8 type
*/
#define TYPE_ORIGINAL 1
#define ORIGINAL_HEADER_SIZE 1

/*
SPLIT: These are sequences of packets forming one bigger piece of
data.
- When processed and all the packet_nums 0...packet_count-1 are
  present (this should be buffered), the resulting data shall be
  directly handed to the user.
- If the data fails to come up in a reasonable time, the buffer shall
  be silently discarded.
- These can be sent as-is or atop of a RELIABLE packet stream.
    Header (7 bytes):
    [0] u8 type
    [1] u16 seqnum
    [3] u16 chunk_count
    [5] u16 chunk_num
*/
#define TYPE_SPLIT 2

/*
RELIABLE: Delivery of all RELIABLE packets shall be forced by ACKs,
and they shall be delivered in the same order as sent. This is done
with a buffer in the receiving and transmitting end.
- When this is processed, the contents of each packet is recursively
  processed as packets.
    Header (3 bytes):
    [0] u8 type
    [1] u16 seqnum

*/
#define TYPE_RELIABLE 3
#define RELIABLE_HEADER_SIZE 3

#define SEQNUM_INITIAL 65500
&lt;/pre&gt;

These packet types are used in practice:
* CONTROL(data) - unreliable control packet
* ORIGINAL(data) - unreliable small data
* SPLIT(piece of data) - unreliable piece of large data
* RELIABLE(CONTROL(data)) - reliable control packet
* RELIABLE(ORIGINAL(data)) - reliable small data
* RELIABLE(SPLIT(piece of data)) - reliable piece of large data

=== Packet Type Specifics ===
==== RELIABLE ====
The RELIABLE packet wraps any other packet inside it, and once it is received, an ACK/CONTROL is sent back. If ACK/CONTROL isn't received for a sent RELIABLE packet in a short time, it should be periodically re-sent until the related ACK/CONTROL is received.

The sequence number is per-peer-per-connection. It is incremented after every reliable packet that is sent. It is not incremented in re-sent packets.

==== SPLIT ====
The SPLIT packet means data is split into multiple packets (because the internet doesn't transfer UDP packets larger than ~500 bytes); once all pieces of a SPLIT packet are received (identified as having the same seqnum and accumulating all the pieces 0...chunk_count-1), the insides is returned to the user of the network stack like data of an ORIGINAL packet.

=== Low-level control ===
==== Timeout ====
A connection may timeout after 30 seconds of nonresponsiveness to PINGs or RELIABLEs. A peer should send PING/CONTROL packets every 5 seconds or so if it has not sent any other packets.

==== Connect ====
A connection is initiated by sending an empty RELIABLE(ORIGINAL()) packet. The server will reply with a SET_PEER_ID/CONTROL packet. The client's peer id from there on is the one received from the server and the client can continue communicating by using it.

==== Disconnect ====
A connection is properly disconnected by sending a DISCO/CONTROL packet before dropping a connection.
[[Category:Core Engine]]</text>
      <sha1>o12o4s973epmd8a8egiq1bpqriz4wiv</sha1>
    </revision>
  </page>
  <page>
    <title>Engine/Objects</title>
    <ns>0</ns>
    <id>307</id>
    <revision>
      <id>5968</id>
      <parentid>5266</parentid>
      <timestamp>2022-05-24T10:27:29Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <minor/>
      <comment>Remove links to pages proposed to deletion</comment>
      <origin>5968</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2233" sha1="30xkqj0s4rz7k97e5ccw41xd5wo98yn" xml:space="preserve">In Minetest, an object is a moving thing in the world. The two types of objects are players and entities.

A static object is one that is saved in a mapblock, and an active object is one that is currently loaded and updating in the environment.

== ActiveObjects ==

ActiveObjects aka objects are objects in the environment, consisting of roughly everything that is not part of the voxel world (=Map).

&lt;code&gt;
SAO = ServerActiveObject
CAO = ClientActiveObject

serverobject.{h,cpp}
clientobject.{h,cpp}
content_sao.{h,cpp}
content_cao.{h,cpp}
&lt;/code&gt;

All objects have a server- and a client-side counterpart. The
server-side object types that currently exist are
* TestSAO (a small test thing)
* ItemSAO (old item; not used)
* LuaEntitySAO (all entities defined in Lua; basically everything other than the players), and
* PlayerSAO (the player objects which enable standard object interaction for players. Players also have a ServerRemotePlayer or something like that which handles the things in which players are different to other objects).

Client-side objects:
* TestCAO (obvious)
* ItemCAO (obvious)
* GenericCAO (everything else; LuaEntitySAOs and PlayerSAOs register as this on the client-side. This enables them to have the exact same capabilities in terms of looks, client-side interaction and stuff.)

If eg. implementing meshes to go through the regular
Lua-&gt;server-&gt;client pipeline, one'll want to implement them in
GenericCAO, through ObjectProperties. ObjectProperties should contain
the filename of the mesh (which should be transferred like images),
and possibly some small additional information.

All the players on the server have an associated PlayerSAO object, of which
generally all will appear on clients as GenericCAO client-side objects.

The CAO of each player also exists on the player's clients itself,
just like the other players. It is always hidden and is used for
nothing. It doesn't cause any considerable overhead and filtering it
out server-side would make the systems messier. On a client, the local
player is a separate thing (a LocalPlayer, added to the environment in
Client::Client(); it is similar to the ServerRemotePlayers mentioned
earlier).

[[Category:Core Engine]]
[[Category:Objects]]</text>
      <sha1>30xkqj0s4rz7k97e5ccw41xd5wo98yn</sha1>
    </revision>
  </page>
  <page>
    <title>Engine/Script Engine</title>
    <ns>0</ns>
    <id>416</id>
    <revision>
      <id>6139</id>
      <parentid>5243</parentid>
      <timestamp>2022-08-15T21:15:58Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <origin>6139</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2176" sha1="kkzy6b3rqfjhtlxu1ca4t9ryrdo038y" xml:space="preserve">==Conventions==
*Script Engine uses a modular design separating code with different purpose as much as possible.
*As minetest uses a flat includefile namespace any filename has to be unique. As result files are prefixed within script engine.

==Initialization==
There are basicaly two initialization phases, on creation of application prototypes register lua_api modules to ScriptApi. Once server is started a new ScriptApi instance is created wich initializes a new Lua stack using all initialization functions provided by lua_api.

Note about the image: Its partially outdated. Since commit 4e1f50035e860a00636ca5d804c267119df99601, the registerModApiModule function has been removed.

[[File:scriptapi init.png|Script Engine initialization]]

==Common==
Prefix: c_

Within common subfolder parts of script api are implemented that need to be available for cpp as well as lua implementation. Examples for this are converter functions translating core c++ structs to lua or back from lua to c++. Another set of common functions are debugging and error handling function.

==cpp_api==
Prefix: s_

cpp_api provides interface required by c++ core functions. It's designed to be added as single class ScriptApi. This class inherits features from all submodules within cpp. ScriptApi is responsible for mod api management too. Any function required by all modules are implemented in ScriptApiBase, thus each modul inherits this class. To avoid inheritance problems each module has to be derived "virtual".
The class design is layered as follows:


[[File:components.png]]

==lua_api==
Prefix: l_

lua_api contains implementation of all functions that are available from within lua. It's design is similar to cpp_api with difference that there is no integrating top class equivalent to ScriptApi. Instead of linking everything together each module is registred to ScriptApi by creating a prototype. Creating this prototype ensures ScriptApi will add the functions provided by this module by calling initialize from prototype.
Modules are separated by functionality e.g. particles, inventory, environment, craft ...
Modules are independent from each other.

[[Category:Core Engine]]</text>
      <sha1>kkzy6b3rqfjhtlxu1ca4t9ryrdo038y</sha1>
    </revision>
  </page>
  <page>
    <title>Engine/Structure</title>
    <ns>0</ns>
    <id>317</id>
    <revision>
      <id>5312</id>
      <parentid>5277</parentid>
      <timestamp>2020-06-20T14:49:23Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <comment>/* General architecture */</comment>
      <origin>5312</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4927" sha1="stqa41srx3e1pt6b1iovy0vqa0fptrr" xml:space="preserve">[[File:minetest-0.3-dfd-visio.png|500px|thumb|right|0.3 data flow diagram - still mostly accurate.]]
== General architecture ==

Minetest consists of 3 main "components":

* Server - runs server-side logic, updating things for connected players.
* Client - graphics, controls, and logic for a single player.
* Mainmenu - The main menu, before joining a game.

Each of these "components" consists of some C++ code and a Lua API for scripting.

When playing a game, there must always be a server. A singleplayer game will consist of a client and a server running in the same process but on different threads.
A multiple remote game will consist of a client running locally, and a server running remotely.

=== Environment ===

Both the server and the client have an Environment. An environment contains the map, any nodes, players, [[Engine/Objects|objects]], and various other things.
The environment is "stepped" by an interval called a dtime, updating the world and running Lua callbacks.

The map is a container of MapBlocks. A MapBlock contains 16x16x16 nodes, any  [[Engine/Objects|static objects]], and meta data.

=== Server ===

The Server class is the main class for the server. It hosts the update loop, and owns the lifecycle of all other server components.
Whilst there will always need to be a main class to host the update loop, this class may be considered a god class as it contains a lot of other responsibility.

In singleplayer or local server mode, the server class is started on a thread

=== Client / MainMenu ===

The ClientLauncher is used to initialise the window, contains the main menu loop, and is used to determine how the client should be launched.

The Game class is the main class for the client. It hosts the clear-draw-display-update loop, and owns the lifecycle of all other client components.

== Threads ==

=== Stand-alone server ===
* main
:* Doesn't do much
* ServerThread (Server)
:* Runs the server
* EmergeThread (Server)
:* Fetches and generates world

=== Client-only ===
* main
:* Runs almost everything in main game loop
* MeshUpdateThread (Client)
:* Does mesh updates in the background

=== Singleplayer ===
* main
:* Runs almost everything except server in main game loop
* MeshUpdateThread (Client)
:* Does mesh updates in the background
* ServerThread (Server)
:* Runs the server
* EmergeThread (Server)
:* Fetches and generates world

== Classes ==

=== IGameDef ===
An interface for fetching pointers to the managers of things. It is passed to almost everything.

It is implemented by Client and Server. Neither implements all interfaces.

Generally these can be accessed by referring to IGameDef:
* TextureSource
* ItemDefManager
* NodeDefManager
* SoundManager
* MtEventManager

This is the main difference between 0.3 and 0.4. In 0.3 this does not exist, because all content is defined in static tables in source code.

gamedef.{h,cpp}

=== TextureSource ===
Fetches, generates and caches textures.

tile.{h,cpp}

=== ItemDefManager ===
Stores the definitions of items, by item name. Content is set up at server startup, and transferred from server to client at beginning of connection.

itemdef.{h,cpp}

=== NodeDefManager ===
Stores the definitions of nodes and the mapping between node ids and names. Content is set up at server startup, and transferred from server to client at beginning of connection.

nodedef.{h,cpp}

=== SoundManager ===
Stores and plays sounds on the client.

sound.{h,cpp}; sound_openal.{h,cpp}

=== MtEventManager ===
A minimal event manager currently only used for triggering sounds on the client.

event.{h,cpp}

=== Client ===
Contains a lot of stuff. Most considerable members are listed here.
* TextureSource
* ItemDefManager
* NodeDefManager
* SoundManager
* MtEventManager
* MeshUpdateThread
* ClientEnvironment
:* ClientMap
:* Players
:* ClientActiveObjects (CAOs)
* Connection

Implements IGameDef.

client.{h,cpp}

=== Server ===
Contains a lot of stuff. Most considerable members are listed here.
* ServerEnvironment 
:* ServerMap
:* Players
:* ServerActiveObjects (SAOs)
* Connection
* BanManager
* Lua State
* ItemDefManager
* NodeDefManager
* CraftDefManager
* ServerThread
* EmergeThread

Implements IGameDef.

server.{h,cpp}

=== [[Script Engine]] ===
script/*

The script engine contains "core to script"- as well as "script to core"-interface implementation.

=== Connection ===
Connection (client-&gt;server or server-&gt;clients)

=== ClientEnvironment (Environment) ===
Contains most of the actual game environment (players, objects, map...)

* ClientMap
* Players
* ClientActiveObjects (CAOs)

environment.{h,cpp}

=== ServerEnvironment (Environment) ===
Contains the actual game environment (players, objects, map, time of day, ...)

* ServerMap
* Players
* ServerActiveObjects (SAOs)

environment.{h,cpp}

=== ClientMap (Map) ===

map.{h,cpp}, clientmap.{h,cpp}

=== ServerMap (Map) ===

map.{h,cpp}

[[Category:Core Engine]]</text>
      <sha1>stqa41srx3e1pt6b1iovy0vqa0fptrr</sha1>
    </revision>
  </page>
  <page>
    <title>Engine/Structure/ja</title>
    <ns>0</ns>
    <id>817</id>
    <revision>
      <id>5247</id>
      <parentid>3419</parentid>
      <timestamp>2020-06-18T19:29:26Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Rubenwardy moved page [[Engine structure/ja]] to [[Engine/Structure/ja]]</comment>
      <origin>5247</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4213" sha1="gdkt2p5wqbjir6anf42bgpbcdh2p7un" xml:space="preserve">{{Languages}}

[[File:minetest-0.3-dfd-visio.png|500px|thumb|right|バージョン0.3のデータフロー図 - 現在もほとんどが正確です。]]
== 全体の構造 ==

Minetestは常に、サーバーと0個以上の接続されているクライアントとして動作します。

== 関数 ==

=== main() ===
main.cpp

Minetestが起動すると、まずmain.cpp内のmain()関数が実行されます。これは全てのコマンドライン引数(サーバーとクライアント)、起動、メインメニュー(クライアント)の結果を処理します。

=== dedicated_server_loop() ===
server.{h,cpp}

When the dedicated server is run, main() ends up running this and when it returns, Minetest quits.

It basically just feeds time to the server instance created by main() and reacts to SIGKILL etc.

=== the_game() ===
game.{h,cpp}

Launched when you start the game from the main menu.

This creates the client (and the server, if needed), handles the waiting of loading stuff from the server, and runs the game in a somewhat badly structured main loop (which works well, though).

== Threads ==

=== Stand-alone server ===
* main
:* Doesn't do much
* ServerThread (Server)
:* Runs the server
* EmergeThread (Server)
:* Fetches and generates world

=== Client-only ===
* main
:* Runs almost everything in main game loop
* MeshUpdateThread (Client)
:* Does mesh updates in the background

=== Singleplayer ===
* main
:* Runs almost everything except server in main game loop
* MeshUpdateThread (Client)
:* Does mesh updates in the background
* ServerThread (Server)
:* Runs the server
* EmergeThread (Server)
:* Fetches and generates world

== Classes ==

=== IGameDef ===
An interface for fetching pointers to the managers of things. It is passed to almost everything.

It is implemented by Client and Server. Neither implements all interfaces.

Generally these can be accessed by referring to IGameDef:
* TextureSource
* ItemDefManager
* NodeDefManager
* SoundManager
* MtEventManager

This is the main difference between 0.3 and 0.4. In 0.3 this does not exist, because all content is defined in static tables in source code.

gamedef.{h,cpp}

=== TextureSource ===
Fetches, generates and caches textures.

tile.{h,cpp}

=== ItemDefManager ===
Stores the definitions of items, by item name. Content is set up at server startup, and transferred from server to client at beginning of connection.

itemdef.{h,cpp}

=== NodeDefManager ===
Stores the definitions of nodes and the mapping between node ids and names. Content is set up at server startup, and transferred from server to client at beginning of connection.

nodedef.{h,cpp}

=== SoundManager ===
Stores and plays sounds on the client.

sound.{h,cpp}; sound_openal.{h,cpp}

=== MtEventManager ===
A minimal event manager currently only used for triggering sounds on the client.

event.{h,cpp}

=== Client ===
Contains a lot of stuff. Most considerable members are listed here.
* TextureSource
* ItemDefManager
* NodeDefManager
* SoundManager
* MtEventManager
* MeshUpdateThread
* ClientEnvironment
:* ClientMap
:* Players
:* ClientActiveObjects (CAOs)
* Connection

Implements IGameDef.

client.{h,cpp}

=== Server ===
Contains a lot of stuff. Most considerable members are listed here.
* ServerEnvironment 
:* ServerMap
:* Players
:* ServerActiveObjects (SAOs)
* Connection
* BanManager
* Lua State
* ItemDefManager
* NodeDefManager
* CraftDefManager
* ServerThread
* EmergeThread

Implements IGameDef.

server.{h,cpp}

=== [[Script Engine]] ===
script/*

The script engine contains "core to script"- as well as "script to core"-interface implementation.

=== Connection ===
Connection (client-&gt;server or server-&gt;clients)

=== ClientEnvironment (Environment) ===
Contains most of the actual game environment (players, objects, map...)

* ClientMap
* Players
* ClientActiveObjects (CAOs)

environment.{h,cpp}

=== ServerEnvironment (Environment) ===
Contains the actual game environment (players, objects, map, time of day, ...)

* ServerMap
* Players
* ServerActiveObjects (SAOs)

environment.{h,cpp}

=== ClientMap (Map) ===

map.{h,cpp}, clientmap.{h,cpp}

=== ServerMap (マップ) ===

map.{h,cpp}
[[Category:Core Engine]]</text>
      <sha1>gdkt2p5wqbjir6anf42bgpbcdh2p7un</sha1>
    </revision>
  </page>
  <page>
    <title>Games</title>
    <ns>0</ns>
    <id>909</id>
    <revision>
      <id>6221</id>
      <parentid>4870</parentid>
      <timestamp>2022-10-24T19:55:31Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <comment>Replaced content with "{{UnofficialLua}}  See https://wiki.minetest.net/Games#Making_a_game  [[Category:Misc]]"</comment>
      <origin>6221</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="87" sha1="khatyc7gqm1wglqz1pnspqioauwerur" xml:space="preserve">{{UnofficialLua}}

See https://wiki.minetest.net/Games#Making_a_game

[[Category:Misc]]</text>
      <sha1>khatyc7gqm1wglqz1pnspqioauwerur</sha1>
    </revision>
  </page>
  <page>
    <title>Git</title>
    <ns>0</ns>
    <id>324</id>
    <revision>
      <id>6303</id>
      <parentid>4979</parentid>
      <timestamp>2023-01-25T19:48:57Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6303</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4860" sha1="czi24r12gsnvjjlb100wn0f6wls60vl" xml:space="preserve">'''Git is a version control system.''' It handles projects as ''repositories'' (often called ''repos'') with a history. The history consists of commits. A commit is a change to the code with the description.

Git allows people to create forks of a repository. A fork is a new repository with the same history and content, but when committing to the fork, the main repository is not affected. This allows developers to work on projects without access to the main repo.

To bring other peoples work into the main repository, they can open a pull request. This can easily be done in the GUI of GitHub.

Git also has the ability to create branches in one repository. This allows developers to work on multiple features at the same time.

Minetest has two repositories: the engine is in the “minetest” repository, whereas the main game, Minetest Game, is in the “minetest_game” repositories. The repositories are hosted on GitHub.

== Use Git to get the latest updates ==

You can use Git to get the latest updates of Minetest in a RUN_IN_PLACE version. To do this, clone the main repository:
&lt;source lang="bash"&gt;
# Get the engine
git clone https://github.com/minetest/minetest.git # Creates a directory called "minetest" with all the content.

# Get Minetest Game
cd minetest/games/
git clone https://github.com/minetest/minetest_game.git # Creates a directory called "minetest_game" with all the content.
&lt;/source&gt;

To get the latest updates of the engine (you have to compile Minetest after this), do this in the cloned Minetest directory:
&lt;source lang="bash"&gt;
git pull
&lt;/source&gt;

To get the latest updates of Minetest Game:
&lt;source lang="bash"&gt;
cd games/minetest_game/
git pull
&lt;/source&gt;

== Using Git for development ==

=== Creating a fork ===

{{Template:Note|In this example only the engine repository is used, but you can do the same with the minetest_game repository.}}

To use Git for development, you have to fork the main repository on GitHub first. After this, you can clone your repository:
&lt;source lang="bash"&gt;
git clone git://github.com/Your_user_name_on_GitHub/minetest.git #Creates a directory called "minetest" with all the content
cd minetest/
&lt;/source&gt;

=== Coding a feature or a bug fix ===

Create a new branch to code your feature (be sure to give them good names (not just “patch” or “fix”)):
&lt;source lang="bash"&gt;
git checkout -b feature_branch
&lt;/source&gt;

Now, you can code your feature or bug fix. If you are done, you have to commit your changes and push them to your repository on GitHub:
&lt;source lang="bash"&gt;
git add . # Adds all changes; alternatively you can specify single files
git commit -m "Your feature"
git push origin feature_branch
&lt;/source&gt;

Commit messages should start with a capital letter and use the present tense. They should sum up the feature/fix.

You can now access your code in your repository on GitHub and open a pull request for it to the main repository.

To go back to your master branch do:
&lt;source lang="bash"&gt;
git checkout master
&lt;/source&gt;

If you have to update your feature, do:
&lt;source lang="bash"&gt;
git checkout feature_branch
# Do changes
git add .
git commit -m "Update message"
git push origin feature_branch
&lt;/source&gt;

This will automatically be added to the pull request (if there is one).

=== Updating your fork ===

You can use Git to update your Minetest fork with the latest changes of the official repository.

==== Prerequisites ====

If you haven't already you need to tell git where to get the changes.
&lt;source lang="bash"&gt;
git remote add upstream https://github.com/minetest/minetest
cd games/minetest_game
git remote add upstream https://github.com/minetest/minetest_game
&lt;/source&gt;

==== Updating the fork ====

You need to download the changes of the main repository first and then merge them.

'''For the engine:'''
&lt;source lang="bash"&gt;
# Get the changes
git fetch upstream

# Merge the changes
git rebase upstream/master

# Push the result to GitHub
git push
&lt;/source&gt;

'''For the game:'''
&lt;source lang="bash"&gt;
cd games/minetest_game
# Get the changes:
git fetch upstream

# Merge the changes
git rebase upstream/master

# Push the result to GitHub
git push
&lt;/source&gt;&lt;br/&gt;

== Tips ==
Simplify making commits:
&lt;source lang="bash"&gt;echo 'git add -A &amp;&amp; git commit -m "$*

$(git status -s)"' | sudo tee /usr/local/bin/gitdirectcommit &amp;&amp; sudo chmod +x /usr/local/bin/gitdirectcommit&lt;/source&gt;
to make a commit, just do changes in your repository and run e.g. &lt;source lang="bash"&gt;gitdirectcommit my changes&lt;/source&gt;
Quotes are not needed and the files (their path relative to the repository path) which are changed are annexed to the end of the commit message automatically.&lt;br/&gt;

== See also ==

* [http://git-scm.com/book ''Pro Git'' (book)]
* [https://forum.minetest.net/viewtopic.php?f=3&amp;t=14262 The big git and github Pull Request thread on the forums]
[[Category:Git]]</text>
      <sha1>czi24r12gsnvjjlb100wn0f6wls60vl</sha1>
    </revision>
  </page>
  <page>
    <title>Git Guidelines</title>
    <ns>0</ns>
    <id>389</id>
    <revision>
      <id>5631</id>
      <parentid>5473</parentid>
      <timestamp>2021-09-04T20:46:04Z</timestamp>
      <contributor>
        <username>Sfan5</username>
        <id>10</id>
      </contributor>
      <comment>Update some stuffs</comment>
      <origin>5631</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4985" sha1="8nwifedqpqvg5msf7uygdrv5v1z7gmq" xml:space="preserve">This page is mostly directed to core team members with commit or triage access to upstream repositories.

For instructions on basic usage, see [[Git]].

For determining who is allowed to do what, see [[Organisation]].

For guidelines about overall pull request quality, see [[Merging core pull requests to upstream]].

== Rules ==
=== Upstream branch rules ===

Feature freezes take effect in the master branch, and while the freeze is active, a separate development branch ("dev" or some other suitable name) is made into which pull requests are merged. It is then rebased onto master once the freeze is over. However, creating the branch may be skipped ('''it usually is!''') when nobody feels like merging features during a feature freeze.

The minetest and minetest_game contain the stable-0.4 branch, which has to be updated to the latest stable 0.4 series version at each release.

=== Upstream pull requests ===

* Don't mix multiple things in one commit. The same applies to codestyle cleanup.
* People considering merging pull requests are not required to look anything up anywhere else than the pull request and its comments. If there is something blocking the merging of a pull request, the reason must be added as a comment to the pull request. This goes both ways: If you check a pull request to be mergeable, write a simple "+1" comment to it.

=== Upstream commit rules ===

# You can push something to upstream [1] only if two members of the core team [2] agree on it. (See also [[Organisation]])
# Commit messages must start with a capital letter and must be in the present tense. (look at the commit log)
# Do not modify history older than 10 minutes.
# Use rebase, not merge, to get linear history. [3]
# Do not rush with anything, unless our users' data is about to be corrupted otherwise.

== Rule 1 in practice ==

Tell people openly what you do, and if someone finds a problem in what you do, allow resolving to take its time.

If you have a '''small patch''', fixing some compiler error or other trivial mistake, notify about fixing it on #minetest-dev, wait for 5...15 minutes and push it. To save time, you should notify when ''finding'' the problem, not when ''having it fixed''. If someone asks something about it, delay pushing and link the patch [4] or tell whatever else people want to know.

Rule 1 is '''only''' applied to the minetest/minetest and minetest/minetest_game repositories.
For the other repos apply some common sense: Check who last worked on it or who wrote most of the code (if applicable), consider consulting them for changes especially if they're large. If nobody has cared about a repo for a long time you don't have to worry either.

==== Notes ====

[1] Upstream is at https://github.com/minetest/minetest

[2] The team: https://github.com/orgs/minetest/people

[3] On Github, press the "Rebase and merge" button. Of course you can rebase a remote branch in a local repository for more in-depth tools. There's also the ancient workflow of appending .patch to the pull request URL, getting into your project directory and doing &lt;code&gt;git am &lt;patch&gt;&lt;/code&gt;. Similarly for single commits.

[4] Patches can be linked using a pastebin or by using GitHub (pull request or not).

== Issue and Pull-Request Management ==

* If an issue is a duplicate, post "duplicate of #ISSUENUM", label as [https://github.com/minetest/minetest/labels/Duplicate Duplicate], and close the issue. Newer issues should be considered duplicates of older issues, unless the newer issue has more useful conversation. Information from the duplicate issue can also be edited into the open issue.
* If a pull request or an issue does not get a response from its author within one month when requiring more details, it is closed.
** Use [https://github.com/minetest/minetest/labels/Action%20%2F%20change%20needed "Action / change needed"] and [https://github.com/minetest/minetest/labels/User%20feedback%20needed "User feedback needed"]
* [https://github.com/minetest/minetest/labels/WIP WIP] / draft pull-requests that are not updated within 6 months should be closed.
* Use [https://github.com/minetest/minetest/projects Project Boards] to prioritise and order issues and pull requests.
* The [https://github.com/minetest/minetest/labels/Possible%20Close Possible Close] label can be used to warn authors of impending closure.

=== Triagers ===

* Triagers are members of the project that are not core developers, but have the ability to manage issues - see above.
** Examples include labelling issues, asking for necessary information, and managing boards to help with long-term planning.
* They may close issues or PRs, but cannot approve them (the act of approving an issue implies there is a dev willing to review a contribution).
* They should err on the side of caution - if they don't understand the issue, they should wait for feedback.
* They should consider ways to improve project management further.

[[Category:Rules and Guidelines]]
[[Category:Git]]</text>
      <sha1>8nwifedqpqvg5msf7uygdrv5v1z7gmq</sha1>
    </revision>
  </page>
  <page>
    <title>Groups/Custom groups</title>
    <ns>0</ns>
    <id>778</id>
    <revision>
      <id>4871</id>
      <parentid>4271</parentid>
      <timestamp>2019-05-13T15:25:49Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <origin>4871</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7556" sha1="ky01893ft37pmk8r0z98imhwvk78jpp" xml:space="preserve">{{LuaTips}}
This page lists the various groups which are used in various games and mods, but are more or less specific to those. Keep in mind the meaning of most of these groups is not “standardized”, the actual meaning depends on the particular game/mod implementation. For generic groups, see [[Groups#Special groups]] and [[Groups/Shared groups]].

('''Note''': If not group rating is specified, a rating of 1 is assumed.)

== Games ==
=== Minetest Game ===
Version: 0.4.14

These are the custom groups used by Minetest Game. Many groups listed here have also been adopted by mods and games which are not directly related to Minetest Game, but be careful, the intention may not always be equal!

==== Damage groups ====
Used by weapons and tools, and by entities to determine damage on a successful hit.

* &lt;code&gt;fleshy&lt;/code&gt;: Living things like animals and the player. This could imply some blood effects when hitting.

Note: &lt;code&gt;fleshy&lt;/code&gt; is currently the only damage group used in Minetest Game, all tools and weapons in Minetest Game only affect the &lt;code&gt;fleshy&lt;/code&gt; group.

==== Digging time groups ====
The following groups determine digging times. The rating can be between 1 and 3; higher ratings result in faster digging.

* &lt;code&gt;crumbly&lt;/code&gt;: dirt, sand
* &lt;code&gt;cracky&lt;/code&gt;: tough but crackable stuff like stone.
* &lt;code&gt;snappy&lt;/code&gt;: something that can be cut using fine tools; eg. leaves, small plants, wire, sheets of metal
* &lt;code&gt;choppy&lt;/code&gt;: something that can be cut using force; eg. trees, wooden planks
* &lt;code&gt;explody&lt;/code&gt;: Especially prone to explosions
* &lt;code&gt;oddly_breakable_by_hand&lt;/code&gt;: Can be added to nodes that shouldn't logically be breakable by the hand but are. Somewhat similar to dig_immediate, but times are more like &lt;code&gt;{[1]=3.50,[2]=2.00,[3]=0.70}&lt;/code&gt; and this does not override the speed of a tool if the tool can dig at a faster speed than this suggests for the hand.

==== ABMs ====
Groups which are mainly used by ABMs for block interaction:

* &lt;code&gt;tree&lt;/code&gt;: node is the trunk of a tree (like “Tree”, “Jungle Tree”, etc.). Prevents blocks in &lt;code&gt;leafdecay&lt;/code&gt; group from decaying.
* &lt;code&gt;leafdecay&lt;/code&gt;: node decays if no block in the &lt;code&gt;tree&lt;/code&gt; group is in a radius of the rating.
* &lt;code&gt;leafdecay_drop&lt;/code&gt;: if node decays because of &lt;code&gt;leafdecay&lt;/code&gt;, it will always drop as an item.
* &lt;code&gt;flora&lt;/code&gt;: node will slowly spread when placed on a “soil”-group node but it will turn into a dry shrub when it is placed on desert sand. Usually used for small plants.
* &lt;code&gt;soil&lt;/code&gt;: node is some sort of soil which supports the growth and spread of plants of all sorts, including farmable plants
** &lt;code&gt;soil=1&lt;/code&gt;: basic soil: Supports growth of saplings and spread of &lt;code&gt;flora&lt;/code&gt; nodes. These plants can of course also grow on soil of higher ratings.
** &lt;code&gt;soil=2&lt;/code&gt;: dry farming soil: Node has been cultivated by a hoe, but is not wet yet.
** &lt;code&gt;soil=3&lt;/code&gt;: wet farming soil: Supports the growth of farming plants like wheat and cotton
* &lt;code&gt;cools_lava&lt;/code&gt;: node turns adjacent lava sources into obsidian and adjacent flowing lava into stone
* &lt;code&gt;lava&lt;/code&gt;: node is lava.
* &lt;code&gt;water&lt;/code&gt;: node is water. Used by the buckets mod. Also acts like &lt;code&gt;cools_lava&lt;/code&gt;

===== Fire =====
Used by the &lt;code&gt;fire&lt;/code&gt; mod:

* &lt;code&gt;flammable&lt;/code&gt;: can be set on fire. Higher values mean more flammable.
* &lt;code&gt;puts_out_fire&lt;/code&gt;: if in a node with this group is near fire the fire gets extinguished.
* &lt;code&gt;igniter&lt;/code&gt;: sets flammable nodes on fire. Rating defines the radius.

==== Crafting ====
These groups are ''mostly'' used in crafting recipes:

* &lt;code&gt;sand&lt;/code&gt;: node is sand.
* &lt;code&gt;stone&lt;/code&gt;: node is stone.
* &lt;code&gt;wood&lt;/code&gt;: node is a type of wooden planks.
* &lt;code&gt;wool&lt;/code&gt;: node is wool (default rating: &lt;code&gt;1&lt;/code&gt;).
* &lt;code&gt;leaves&lt;/code&gt;: node represents leaves or needles from a tree.
* &lt;code&gt;stick&lt;/code&gt;: item is a stick.
* &lt;code&gt;coal&lt;/code&gt;: item is some kind of coal lump.
* &lt;code&gt;water_bucket&lt;/code&gt;: Item is a bucket filled with some kind of water.

===== Color =====
* &lt;code&gt;dye&lt;/code&gt;: item is a dye.
* &lt;code&gt;basecolor_white&lt;/code&gt;, &lt;code&gt;excolor_yellow&lt;/code&gt;, &lt;code&gt;unicolor_dark_blue_s50&lt;/code&gt;, and the like: Declares the color of an item. See [https://github.com/minetest/minetest_game/blob/master/game_api.txt game_api.txt].

'''Note''': The various color groups in the dyes mod can be considered as a standard in the modding community. They are also in widespread use, independently of Minetest Game

==== Functional ====
* &lt;code&gt;not_in_creative_inventory&lt;/code&gt;: the item is not added to the creative inventory. '''Note''': This group is also widespread across other games and mods.
* &lt;code&gt;vessel&lt;/code&gt;: item is a vessel (small liquids container) and can be put in a [http://wiki.minetest.net/Vessels_Shelf vessels shelf].
* &lt;code&gt;book&lt;/code&gt;: item is a book and can be put in a [http://wiki.minetest.net/Bookshelf bookshelf].

==== Informational ====
Misc. groups where their main purpose seems to group similar things together. They may be used for many different tasks

* &lt;code&gt;sapling&lt;/code&gt;: node is a sapling.
* &lt;code&gt;plant&lt;/code&gt;: node is a small-sized plant.
* &lt;code&gt;flower&lt;/code&gt;: node is a flower.
* &lt;code&gt;pane&lt;/code&gt;: node is a “pane” like Glass Pane or Iron bar. Defined by the &lt;code&gt;xpanes&lt;/code&gt; mod.
* &lt;code&gt;wall&lt;/code&gt;: node is a wall, used to connect to other nodes of the wall group together
* &lt;code&gt;bed&lt;/code&gt;: node/item is a bed
* &lt;code&gt;door&lt;/code&gt;: node/item is a door
* &lt;code&gt;liquid&lt;/code&gt;: node is a liquid
** &lt;code&gt;liquid=2&lt;/code&gt;: lava (see also: &lt;code&gt;lava&lt;/code&gt;)
** &lt;code&gt;liquid=3&lt;/code&gt;: water (see also: &lt;code&gt;water&lt;/code&gt;)

=== Pedology ===
https://forum.minetest.net/viewtopic.php?f=11&amp;t=9429

Version: 3.0

* &lt;code&gt;wet&lt;/code&gt;: Node is wet, rating ranges from 1-5 (higher = wetter). If this group is not present, the node is seen as dry.
* &lt;code&gt;oozing&lt;/code&gt;: Node will slowly transfert its wetness towards neighboring “sucky” nodes. Rating does not matter.
* &lt;code&gt;sucky&lt;/code&gt;: Node is able to receive wetness from neighboring wet and oozing nodes. Rating does not matter.
* &lt;code&gt;sun_dry&lt;/code&gt;: Node will dry off over time when exposed to sunlight. Rating must be 1.

This was only a quick overview. Refer to the mod's README.md for a more detailed and up-to-date information.

=== Realistic Suffocation ===
https://forum.minetest.net/viewtopic.php?f=9&amp;t=15304

Version: 1.0.0

This mod introduces 2 groups:

* &lt;code&gt;disable_suffocation&lt;/code&gt;: This mod won't add suffocation (drowning damage for solid full cube blocks) to nodes in this group (rating: 1)
* &lt;code&gt;real_suffocation&lt;/code&gt;: This group is added by this mod to all nodes it modified (added drowning damage) (rating: 1)

=== Slime blocks and liquids ===
https://forum.minetest.net/viewtopic.php?f=11&amp;t=10423

Version: 1.0.0

This mod introduces one digging group:

* &lt;code&gt;slimey&lt;/code&gt;: For blocks made out of slime. Rating ranges from 1-3 (higher = more slimey)

== Editing this page ==
Feel free to add your own games and mods. There are some guidelines for editing:

* Do not add groups which are intended to be used only internally by the mod or game
* Don't forget to mention the meaning of the group rating. If you omit it, we assume the group rating to be always 1 or it does not matter.
* Specify the mod's / game's version number, if possible, so the users can see whether this page is still up to date
[[Category:Misc]]</text>
      <sha1>ky01893ft37pmk8r0z98imhwvk78jpp</sha1>
    </revision>
  </page>
  <page>
    <title>Groups/Shared groups</title>
    <ns>0</ns>
    <id>915</id>
    <revision>
      <id>6302</id>
      <parentid>5064</parentid>
      <timestamp>2023-01-25T19:46:38Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6302</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2404" sha1="rj4zhzy1j8g27tlzb71w7dbzkxutapf" xml:space="preserve">{{LuaTips}}
This a list of groups which are shared across multiple mods and games, or groups which have been accepted by the community to have a standard meaning.

== List of shared groups ==
=== GUI-related ===
* &lt;code&gt;not_in_creative_inventory=1&lt;/code&gt;: This item must not appear in the [https://wiki.minetest.net/index.php?title=Creative_inventory creative inventory]
* &lt;code&gt;not_in_craft_guide=1&lt;/code&gt;: Crafting recipes which have this item as a result will not be shown in a [http://wiki.minetest.net/Crafting_guide crafting guide]. The item may still be shown as an ingredient.

=== Colors ===
For dyes, the color groups used in Minetest Game have been widely accepted. If you add a dye, you should add the appropriate groups. The groups have names like &lt;code&gt;basecolor_white&lt;/code&gt;, &lt;code&gt;excolor_sky_blue&lt;/code&gt; and &lt;code&gt;unicolor_dark_green&lt;/code&gt;.

See [https://github.com/minetest/minetest_game/blob/master/game_api.txt game_api.txt], section “Dyes” for a detailed description and see the [https://github.com/minetest/minetest_game/tree/master/mods/dye/init.lua dye] mod for an example implementation.

=== Object classification ===
These groups are used to classify something. The rating is assumed to be 1. These groups mean that the item in question ''is'' something. E.g. the group “&lt;code&gt;tree=1&lt;/code&gt;” means the item ''is a'' tree trunk.

==== Basic nodes ====
* &lt;code&gt;tree&lt;/code&gt;: Tree trunk
* &lt;code&gt;leaves&lt;/code&gt;: Leaves, (pine) needles, and the like
* &lt;code&gt;sand&lt;/code&gt;: Sand
* &lt;code&gt;sandstone&lt;/code&gt;: Sandstone
* &lt;code&gt;stone&lt;/code&gt;: Stone or stone-like materials
* &lt;code&gt;water&lt;/code&gt;: Water (source or flowing)
* &lt;code&gt;lava&lt;/code&gt;: Lava (source or flowing)

==== Additional nodes ====
* &lt;code&gt;wood&lt;/code&gt;: Block of wooden planks
* &lt;code&gt;wool&lt;/code&gt;: Block of wool
* &lt;code&gt;sapling&lt;/code&gt;: Sapling
* &lt;code&gt;flower&lt;/code&gt;: Flower

=== Items and tools ===
* &lt;code&gt;pickaxe&lt;/code&gt;: Pickaxe
* &lt;code&gt;shovel&lt;/code&gt;: Shovel
* &lt;code&gt;axe&lt;/code&gt;: Axe
* &lt;code&gt;sword&lt;/code&gt;: Sword
* &lt;code&gt;hoe&lt;/code&gt;: Hoe (farming tool)

=== Damage groups ===
* &lt;code&gt;fleshy&lt;/code&gt;: ''De facto'' considered the “default” damage group for players and mobs when a game has no sophisticated damage system and everything is considered to be in the same “damage class”. Otherwise, intended for living things like animals and the player. This could imply some blood effects when hitting.
[[Category:Misc]]</text>
      <sha1>rj4zhzy1j8g27tlzb71w7dbzkxutapf</sha1>
    </revision>
  </page>
  <page>
    <title>Guide: Optional dependencies</title>
    <ns>0</ns>
    <id>711</id>
    <revision>
      <id>6263</id>
      <parentid>5998</parentid>
      <timestamp>2022-12-17T12:14:02Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6263</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2749" sha1="ec2sfmdwcbx4v9jt6tj7g5prsiakr2s" xml:space="preserve">{{LuaTips}}
== Introduction ==
Managing and declaring dependencies are a core part of modding for Minetest. However, sometimes it is more desireable to write mod code which is only ''optionally'' dependent on another mod, not mandatorily, epspecially if only a small part of the actual code is actually dependent on the other mod. One example are crafting recipes; often, they are not that important, since the core part of a mod, namely, the registered items, can still function without them.

This short guide describes how to convert any mandatory dependency to an optional one and briefly discusses this technique.

__TOC__

== The “standard” technique ==
One way to make a dependency optional is to insert the code which causes the mandatory dependency into a simple &lt;code&gt;if&lt;/code&gt; block and optionally insert fallback code into the &lt;code&gt;branch&lt;/code&gt;

With &lt;code&gt;minetest.get_modpath&lt;/code&gt; it can be checked whether a mod is present and loaded, as it will return nil if not.

&lt;pre&gt;
if minetest.get_modpath("example") then
	--[[ Insert code which depends on the example mod here ]]
else
	--[[ Optionally insert fallback code here when the mod is not available.
	     If you intend no fallback, you can leave this section empty. ]]
end
&lt;/pre&gt;

In addition, you need to add the depending mod into your mod's optional dependencies list in &lt;code&gt;mod.conf&lt;/code&gt;.

=== Examples ===
The following example code has a mandatory dependency on the default mod, because the crafting recipe requires items from the default mod:

&lt;pre&gt;
minetest.register_craft({
	output = "example:awesome_item",
	recipe = {
		{ "default:wood", "default:stone", "default:mese" },
		{ "", "default:wood", "" },
	}
})
&lt;/pre&gt;

By putting above code into the template, we get the following code, which is now ''optionally'' dependent on the default mod.

&lt;pre&gt;
if minetest.get_modpath("default") then
	minetest.register_craft({
		output = "example:awesome_item",
		recipe = {
			{ "default:wood", "default:stone", "default:mese" },
			{ "", "default:wood", "" },
		}
	})
end
&lt;/pre&gt;

Note that the &lt;code&gt;else&lt;/code&gt; has been left out because we don't intend to use any fallback option here.

== Discussion ==
This technique is useful when you have small and simple chunks of code causing a mandatory dependency. This technique is especially useful for crafting recipes, as they are often not that neccessary; other mods may be more interested in the registered items and may even register their own crafting recipes.

In theory, all dependencies can be made optional using this technique. But sometimes, it more practical to keep a mandatory dependency, especially if large portions of code are dependent on another mod and writing a fallback option would be unreasonable.</text>
      <sha1>ec2sfmdwcbx4v9jt6tj7g5prsiakr2s</sha1>
    </revision>
  </page>
  <page>
    <title>How to start contributing</title>
    <ns>0</ns>
    <id>422</id>
    <revision>
      <id>6171</id>
      <parentid>5368</parentid>
      <timestamp>2022-08-21T16:48:12Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <comment>/* Core development (in C++) */</comment>
      <origin>6171</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="910" sha1="hohmzb9iwa1vpkm5ezu4e76hl971836" xml:space="preserve">{{Stub}}

== Mod contribution (in Lua) ==

* '''Learn the API'''.
** [[Lua API Documentation]]
** [http://dev.minetest.net/Intro Intro modding on Wiki].
** With these, you can make mods for Minetest. Interesting mods - or fixes to the default mods - may eventually get merged upstream.

* [https://forum.minetest.net/viewtopic.php?f=9&amp;t=2434 '''Find ideas'''].
** The forum above contains mod requests and ideas.

== Core development (in C++) ==

* '''[[Engine|Learn about the engine]]'''.
** These pages explain how the engine works, how it structures data and how it is released.

* [https://github.com/minetest/minetest/issues?state=open '''Issues'''].
** This is where you can report bugs or suggest improvements. Be aware that we have a lot of feature requests already.
[[Category:Rules and Guidelines]]

[[File:Merge Chance Complexity Diagram.png|thumbnail|Rough overview of merge chances per code area]]</text>
      <sha1>hohmzb9iwa1vpkm5ezu4e76hl971836</sha1>
    </revision>
  </page>
  <page>
    <title>Introduction to L-system trees</title>
    <ns>0</ns>
    <id>411</id>
    <revision>
      <id>5946</id>
      <parentid>3613</parentid>
      <timestamp>2022-05-24T10:10:52Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <comment>Remove links to pages proposed to deletion</comment>
      <origin>5946</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5038" sha1="izslf1k2vaqbo608a3qt7hx032yp4yf" xml:space="preserve">Minetest has two types of trees built in: Small simple ones like the trees in the vanilla Minetest game, and more complex ones
generated using a L-system and a tree definition. L-system trees can be spawned with &lt;code&gt;minetest.spawn_tree&lt;/code&gt;
and are defined by a &lt;code&gt;treedef&lt;/code&gt; table.

The following chat log might be helpful in understanding how L-system trees work: [http://irc.minetest.ru/minetest/2013-08-08#i_3250058 #minetest 2013-08-08]

== Turtle graphics ==

The [https://en.wikipedia.org/wiki/L-system L-system] is much like turtle graphics: there is a cursor, it is called the turtle.
It can be moved and rotated, and place none, one or more nodes in each step, depending on the used command:

{| class="wikitable"
|-
! Symbol !! Action
|-
| G || Move forward one unit with the pen up 
|-
| F || Move forward one unit with the pen down drawing trunks and branches
|-
| f || Move forward one unit with the pen down drawing leaves (100% chance)
|-
| T || Move forward one unit with the pen down drawing trunks only
|-
| R || Move forward one unit with the pen down placing fruit
|}

{| class="wikitable"
|-
! Symbol !! Action
|-
| + || Yaw the turtle right by angle parameter
|-
| - || Yaw the turtle left by angle parameter
|-
| &amp; || Pitch the turtle down by angle parameter
|-
| ^ || Pitch the turtle up by angle parameter
|-
| / || Roll the turtle to the right by angle parameter
|-
| &lt;nowiki/&gt;* || Roll the turtle to the left by angle parameter
|}

The turtle always starts facing up.

== Axiom ==

If the axiom is &lt;code&gt;TTTT&lt;/code&gt; the result is four vertically stacked nodes of trunk material. The turtle starts at its spawn position, and does the step  T four times. T means “move forward one unit with the pen down drawing trunks only”. Because the turtle is initially facing up, the resulting structure is vertical.

With the axiom &lt;code&gt;TTTTT&amp;TTTTT&amp;TTTTT&amp;TTTTT&lt;/code&gt; and the angle set to 90 degrees the result is a square of trunk material. After this program the turtle will be back on its spawn position, lying on its side, facing left.

== Stack ==

{| class="wikitable"
|-
! Symbol !! Action
|-
| [ || Push/save current state into stack
|-
| ] || Pop/recover current state from stack
|}

With these commands it is possible to save and recover both position and direction of the turtle. The axiom &lt;code&gt;TTTTT[^TTTTT][&amp;TTTTT]&lt;/code&gt; with the angle set to 60 degrees makes a “Y” shape. As always the turtle starts at spawn position, facing up. It goes forwards (up!) 5 times, placing trunks. Then the position and rotation are saved. The part wrapped in &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; is done, and the turtle is back to the position we saved before. Now the 2nd branch is done, starting from the same pos as the first.

== Lindenmayer basics ==
=== Replacing ===
A L-system “program” consists of the axiom and replacement rules. In addition to above, turtle knows the symbols A, B, C and D, which can be used in L-systems. Everytime one of those symbols is found in the axiom, it will be replaced with the whole corresponding rule. This will be done, until there are no more replacements to do or the maximum recursion depth is reached.

{| class="wikitable"
|-
! Symbol !! Action
|-
| A || Replace with rule set A
|-
| B || Replace with rule set B
|-
| C || Replace with rule set C
|-
| D || Replace with rule set D
|}

==== Example ====
Let's say we want to create a fractal “Y” shape: It looks like a “Y” but both ends of it are themselves shaped like “Y”s. With 3 recursions this should give us a total of 8 (2&lt;sup&gt;3&lt;/sup&gt;) ends.

Here is the axiom:

&lt;code&gt;TTTTTA&lt;/code&gt;

Now rule A needs to create the branch. If rule A itself uses an A at its end, that will be replaced again, and so on … Rule A is this:

&lt;code&gt;[^TTTTTA][&amp;TTTTTA]&lt;/code&gt;

Let's look at it step by step: First we do the axiom, just a vertical trunk. Then on its top is added one V shape (rule A). All in all the tree now looks like this: &lt;code&gt;TTTTT[^TTTTTA][&amp;TTTTTA]&lt;/code&gt; (the first A has been replaced by the whole of rule A). In the next step both A's at the end of the branches are replaced, again with the whole of rule A, giving this:

&lt;code&gt;TTTTT[^TTTTT[^TTTTTA][&amp;TTTTTA]][&amp;TTTTT[^TTTTTA][&amp;TTTTTA]]&lt;/code&gt;

And after the 3rd recursion this is the result:

[[File:mtwikitreegen.png|frameless|recursive y]]

=== Replacing by chance ===
The symbols a, b, c, d work like the symbols A, B, C, and D, respectively, but they will only be replaced by chance.

{| class="wikitable"
|-
! Symbol !! Action
|-
| a || Replace with rule set A with a 90% chance, do nothing otherwise
|-
| b || Replace with rule set B with a 80% chance, do nothing otherwise
|-
| c || Replace with rule set C with a 70% chance, do nothing otherwise
|-
| d || Replace with rule set D with a 60% chance, do nothing otherwise
|}

=== See also ===
* [[L-system tree examples]]
* [https://forum.minetest.net/viewtopic.php?f=11&amp;t=9458 L-System Tree Utility] (a mod which helps to create L-system trees in-game)

[[Category:Modding API]]</text>
      <sha1>izslf1k2vaqbo608a3qt7hx032yp4yf</sha1>
    </revision>
  </page>
  <page>
    <title>InvRef</title>
    <ns>0</ns>
    <id>12</id>
    <revision>
      <id>6228</id>
      <parentid>5119</parentid>
      <timestamp>2022-10-25T08:41:11Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <comment>point to more up to date places</comment>
      <origin>6228</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="496" sha1="lhi2wb6qy0r7mszed2ku51itdaa3ugf" xml:space="preserve">{{UnofficialLua}}
Reference to an inventory. See the [https://minetest.gitlab.io/minetest/class-reference/#invref Lua API documentation] for more info.

== Caveats ==
* A common mistake is to get an [[ItemStack]] from an inventory, change it, and expect the changes to carry through to the inventory. See [https://rubenwardy.com/minetest_modding_book/en/quality/common_mistakes.html#set-itemstacks-after-changing-them Set ItemStacks after changing them] in the modding book.

[[Category:Objects]]</text>
      <sha1>lhi2wb6qy0r7mszed2ku51itdaa3ugf</sha1>
    </revision>
  </page>
  <page>
    <title>ItemStack</title>
    <ns>0</ns>
    <id>119</id>
    <revision>
      <id>6148</id>
      <parentid>5120</parentid>
      <timestamp>2022-08-16T01:58:11Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <comment>Replaced content with "See the Lua API or https://rubenwardy.com/minetest_modding_book/en/items/inventories.html"</comment>
      <origin>6148</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="89" sha1="4rxatl2pzzsxyjfd6muuxxtw95f42dx" xml:space="preserve">See the Lua API or https://rubenwardy.com/minetest_modding_book/en/items/inventories.html</text>
      <sha1>4rxatl2pzzsxyjfd6muuxxtw95f42dx</sha1>
    </revision>
  </page>
  <page>
    <title>L-system tree examples</title>
    <ns>0</ns>
    <id>709</id>
    <revision>
      <id>4250</id>
      <parentid>4248</parentid>
      <timestamp>2018-05-17T19:55:42Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <minor/>
      <comment>/* Giant Dry Shrub */ lowercase</comment>
      <origin>4250</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2567" sha1="sn74ne6ie8xdk438n1hb2jvxs0zhp9r" xml:space="preserve">This wiki page is a collection of example [[Introduction to L-system trees|L-system trees]]. The intention is to help newbies better understand L-system trees, but also to provide usable tree definitions which could be used in mods.

If you wish to add a tree, please use the template at [[/Template]] and insert the filled-out template into this wiki page. Don't forget to [[Special:Upload|upload]] a screenshot as well.

== Giant dry shrub ==
=== Profile ===
Works in any game with basic map generation.

=== Definition ===
&lt;pre&gt;
treedef={
   axiom = "A/A/A/A/A/A/A/A/A/A/A/A",
   rules_a = "[B+B+B+B]",
   rules_b = "[FFFFFFFFFF]",
   trunk = "mapgen_tree",
   angle = 30,
   iterations = 1,
   random_level = 0,
   trunk_type = "single",
   thin_branches = true
}
&lt;/pre&gt;

=== Screenshot ===
[[File:Giant Dry Shrub.png|420px]]

== Apple tree ==
=== Profile ===
Works in any game with basic map generation. This tree is used as the example tree in the mod “[https://forum.minetest.net/viewtopic.php?f=11&amp;t=9458 L-System Tree Utility]”.

=== Definition ===
&lt;pre&gt;
treedef = {
	axiom="FFFFFAFFBF",
	rules_a="[&amp;&amp;&amp;FFFFF&amp;&amp;FFFF][&amp;&amp;&amp;++++FFFFF&amp;&amp;FFFF][&amp;&amp;&amp;----FFFFF&amp;&amp;FFFF]",
	rules_b="[&amp;&amp;&amp;++FFFFF&amp;&amp;FFFF][&amp;&amp;&amp;--FFFFF&amp;&amp;FFFF][&amp;&amp;&amp;------FFFFF&amp;&amp;FFFF]",
	trunk="mapgen_tree",
	leaves="mapgen_leaves",
	angle=30,
	iterations=2,
	random_level=0,
	trunk_type="single",
	thin_branches=true,
	fruit_chance=10,
	fruit="mapgen_apple",
}
&lt;/pre&gt;

=== Screenshot ===
[[File:Apple Tree.png|420px]]

== Acacia ==
=== Profile ===
* '''Game used''': Minetest Game
* '''Additional mods''': ''None''

=== Definition ===
&lt;pre&gt;
treedef={
   axiom="FFFFFFccccA",
   rules_a = "[B]//[B]//[B]//[B]",
   rules_b = "&amp;TTTT&amp;TT^^G&amp;&amp;----GGGGGG++GGG++"   -- line up with the "canvas" edge
         .."fffffffGG++G++"               -- first layer, drawn in a zig-zag raster pattern
         .."Gffffffff--G--"
         .."ffffffffG++G++"
         .."fffffffff--G--"
         .."fffffffff++G++"
         .."fffffffff--G--"
         .."ffffffffG++G++"
         .."Gffffffff--G--"
         .."fffffffGG"
         .."^^G&amp;&amp;----GGGGGGG++GGGGGG++"      -- re-align to second layer canvas edge
         .."ffffGGG++G++"               -- second layer
         .."GGfffff--G--"
         .."ffffffG++G++"
         .."fffffff--G--"
         .."ffffffG++G++"
         .."GGfffff--G--"
         .."ffffGGG",
   rules_c = "/",
   trunk="default:acacia_tree",
   leaves="default:acacia_leaves",
   angle=45,
   iterations=3,
   random_level=0,
   trunk_type="single",
   thin_branches=true,
}
&lt;/pre&gt;

[[Category:Modding API]]</text>
      <sha1>sn74ne6ie8xdk438n1hb2jvxs0zhp9r</sha1>
    </revision>
  </page>
  <page>
    <title>L-system tree examples/Template</title>
    <ns>0</ns>
    <id>708</id>
    <revision>
      <id>4246</id>
      <parentid>4215</parentid>
      <timestamp>2018-05-17T18:19:05Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <comment>add mapgen templates</comment>
      <origin>4246</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1432" sha1="p4umkrdww409hwhoi8np9q0cbh9el3i" xml:space="preserve">'''Note: View the source code of this page (and delete this line of text when you're finished)!'''

== Title of your L-system tree ==
=== Profile ===
* '''Game used''': &lt;!-- insert the name of the game where you can use the tree. --&gt;
* '''Additional mods''':
&lt;!--
Replace this comment with a list of all additional mods this treedef may need. This excludes all mods already part of the game. Mods should be specified in the format “&lt;Human-readable mod name&gt; [&lt;internal mod name&gt;]”. Example usage:

* '''Additional mods''':
:* Example Mod 1 [example_mod_1]
:* JohnMod [john]

If there are no additional mods, write:

* '''Additional mods''': ''None''
--&gt;

=== Definition ===
&lt;pre&gt;
treedef = {
	axiom = --[[ your axiom here ]],
	rules_a = --[[ your rule set A here]],
	trunk = "mapgen_trunk",
	leaves = "mapgen_leaves",
	leaves2 = "mapgen_jungleleaves",
	fruit = "mapgen_apple",
	--[[ add/remove other fields as needed. Only use Lua syntax! ]]
}
&lt;/pre&gt;

=== Screenshot ===
&lt;!-- Insert a screenshot of your tree here or remove this section if you don't have a screenshot yet. --&gt;

=== Additional notes ===
&lt;!-- Insert anything else you may have to say about your tree here. Normally, you won't need it; in that case, delete this section. If possible, use an aspect ratio of 4:3 and a minimum width of 420px. You can use this code as template:

[[File:IMAGE_NAME_HERE.png|420px]]
--&gt;

&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>p4umkrdww409hwhoi8np9q0cbh9el3i</sha1>
    </revision>
  </page>
  <page>
    <title>List of hardcoded features</title>
    <ns>0</ns>
    <id>1008</id>
    <revision>
      <id>6337</id>
      <parentid>6336</parentid>
      <timestamp>2023-03-14T19:04:26Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <comment>/* HUD */ Update: Chat now CAN be hidden with a hud flag! :-)</comment>
      <origin>6337</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3615" sha1="osq0zm0p4w71qovgg42zcqs1ro0slzw" xml:space="preserve">This is a '''list of hardcoded features''' in Minetest. A hardcoded feature is a feature with a certain functionality that behaves always in a certain fixed way that cannot be customized. Minetest in general wants to allow its mods and games to customize pretty much everything, so in the long run, any hardcoded feature should be made customizable. Note not all hardoded features are created equal, some are less annoying than others, while for some features it really doesn't matter that they are hardcoded. Also, this list should be more seen as a documentation, not as a feature request to un-hardcode everything in this list.

== Gameplay ==
=== Health and damage ===
* '''The death screen'''
* The fall damage calculation formula (issue: [https://github.com/minetest/minetest/pull/10348 #10348])
* Nodes that deal direct damage do so always once per second (with &lt;code&gt;damage_per_second&lt;/code&gt;); no other time interval is possible
* How breath works in general (issue: [https://github.com/minetest/minetest/pull/8042 #8042])
* You lose breath or take drowning damage every 2 seconds, and you regain breath every 0.5 seconds
* The amount of time the &lt;code&gt;damage_texture_modifier&lt;/code&gt; is applied when an object takes damage is hardcoded

=== Items ===
* The formula that determines how fast your tool will dig
** You can change the parameters, but not the formula itself
* The formula that determines how much your tool will be worn
** You can change the parameters, but not the formula itself
* All items can point (issue: [https://github.com/minetest/minetest/pull/6651 #6651])
** &lt;code&gt;range=0&lt;/code&gt; does not work as you can point when you're inside a node

=== Players ===
* All players can change their camera mode “for free”

== Graphics ==
* When you take damage, the screen flashes red
* When you take damage, the screen shakes
* Sunlight has a subtle yellowish tint
* Darkness has a subtle blueish tint
* The light curves
** This means how bright each individual light level will appear. Probably tricky to customize since the client also has a huge say in this
* The color of light
** This does ''not'' refer to colored lamps, but to the color of light globally. Imagine a game in which the sun is red, tinting the world in red, or a game in which ''all'' lamps emit green light for some reason
* The 3D version of an item inventory image (fixed rotation, fixed param2)
** &lt;code&gt;inventory_image&lt;/code&gt; only supports 2D images
* Node digging particles (amount, size, lifetime, etc.)
* Wielded item / hand allows only very limited graphical customization (fixed angle, can't set 3D model explicitly, etc.)

== HUD ==
* Chat cannot be moved (by mods)
* Status message (for messages like “Fly mode enabled”) cannot be moved or hidden (by mods)
* Color of "wear bar" for tools in inventory cannot be changed ([https://github.com/minetest/minetest/issues/13325 #13325])

=== Formspecs ===
* No or incomplete styling/theming/customization for ([https://github.com/minetest/minetest/issues/8744 #8744]):
** Scrollbars
** Drop-down lists
** Highlight color of selected text
** Text shadow
** (possibly others)

== Controls ==
* Mouse wheel up and mouse wheel down are hard-bound to hotbar next/previous slot selection, and cannot be rebound to a different action. (But you can bind keys for this action, in addition to the scroll wheel)

== Hardcoded things that are probably OK ==
* The Esc is the pause/exit key
* The contents of the debug screen (note that whether to show basic info or everything is customizable)
* WASD keys or joystick for movement

[[Category:Modding_API]]
[[Category:Core]]</text>
      <sha1>osq0zm0p4w71qovgg42zcqs1ro0slzw</sha1>
    </revision>
  </page>
  <page>
    <title>Lua Optimization Tips</title>
    <ns>0</ns>
    <id>481</id>
    <revision>
      <id>6289</id>
      <parentid>6286</parentid>
      <timestamp>2023-01-25T19:11:20Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6289</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4358" sha1="jbnj0yvpagofmbql4x47nn85hw0foox" xml:space="preserve">{{LuaTips}}
Remember, every second you spend in Lua is a second that the Server thread, Connection thread, and possibly one or more Emerge threads stay at a complete standstill!  For this reason, intensive mods should designed with speed in mind.

'''Note''': Many of these tips are specific to neither Lua nor Minetest.

= Using Script API =
=== Profiling ===
Very simple; no reason not to do so:
&lt;source&gt;
local t1 = minetest.get_us_time()
--... work here ...
print(string.format("elapsed time: %g ms", (minetest.get_us_time() - t1) / 1000))
&lt;/source&gt;
* Compare results often to identify bottlenecks before they become harder to find
&lt;br /&gt;

=== Loop ordering ===
Always use z, y, x ordering unless there's a good reason not to.
* Keeps cache coherency
* Opens opportunity to use simple arithmetic to calculate indicies
&lt;br /&gt;
=== Prefer local variables ===
* Should usually recompute variable contents instead of computing once and storing in a global variable
* For most minor computations, the benefit of local access outweighs the cost of re-computing their contents.
* Of course, the code in concern should be profiled instead of blindly following this general rule of thumb.
&lt;br /&gt;
=== Use separate variables when possible instead of tables ===
* Even though putting associated variables inside of tables may keep things more orderly, the cost associated with performing a key lookup on access is high compared to a local variable reference.
* Some benchmarks have shown the opposite to be true when using LuaJIT, this must be verified.
&lt;br /&gt;
=== Avoid having to re-enter the C++ side by calling API when not needed ===
* Although Lua is quite slow compared to native code, the amount of time spent in switching could be much greater.
* Again, the developer's discretion and profiling is needed to determine what the best course of action is.
&lt;br /&gt;
=== Array index calculation ===
"Convenience" functions such as VoxelArea:index() are very attractive for simplicity's sake, but should not be used if maximizing speed is desired.
&lt;br /&gt;
Try to use simple arithmetic like addition and subtraction for calculating array indices.
&lt;br /&gt;
To deal with gaps in between multi-dimensional arrays:
# Keep a 'base' index variable that has the 0th sub-index of the current outer loop's index
# Add the stride length added to it per iteration of the outer loop
# Increment a copy of that variable within the inner loop
# Repeat for each dimension
This way, costly multiplications in the innermost loop can be eliminated.
&lt;br /&gt;
Sample of a very fast loop done in this manner:
&lt;source&gt;
local idx_z_base = initial_index_offset
for z = z0, z1 do
	local idx_y_base = idx_z_base
	for y = y0, y1 do
		local i = idx_y_base
		for x = x0, x1 do
			-- ... work here ...
			i = i + 1
		end
		idx_y_base = idx_y_base + y_stride
	end
	idx_z_base = idx_z_base + z_stride
end
&lt;/source&gt;
&lt;br /&gt;
See also: [[vmanip#Tips_for_handling_indices]]
&lt;br /&gt;

=== Benchmarking ===
To test how often some function is executed in a second you can use something with a syntax similar to the one of [[minetest.after]]:
&lt;source&gt;
local TIME = 3

local clock = minetest.get_us_time
local us = TIME * 1000000
local function benchmark_function(fct, ...)
	local start = clock()
	local fin = start
	local total = 0
	while fin - start &lt; us do
		fct(...)

		total = total + 1
		fin = clock()
	end
	return total * 1000000 / (fin - start)
end

print("hello got printed " .. benchmark_function(print, "hello") .. " times a second")

--[[ result:
[…]
hello
hello
hello
hello got printed 65592.333333333 times a second
]]&lt;/source&gt;
you could also use &lt;code&gt;os.clock&lt;/code&gt; instead of &lt;code&gt;minetest.get_us_time&lt;/code&gt; (of course you then also need to remove that multiplying with 10⁶)

&lt;br /&gt;

= Writing Script API =
=== When working with arrays, use lua_rawgeti()/lua_rawseti() ===
* These work on plain integer indexes rather than field names and perform faster.
&lt;br /&gt;
=== Prefer lua_newtable() to lua_createtable() ===
It has been observed that lua_newtable() is generally faster than lua_createtable() by a rather wide margin.
* This might seem counterintuitive, as lua_createtable() preallocates a known amount of memory in bulk to save steps, but it has a very negative effect on the cache for situations where the performance improvement would have otherwise made a difference.

[[Category:Lua]]</text>
      <sha1>jbnj0yvpagofmbql4x47nn85hw0foox</sha1>
    </revision>
  </page>
  <page>
    <title>Lua code style guidelines</title>
    <ns>0</ns>
    <id>605</id>
    <revision>
      <id>5595</id>
      <parentid>3809</parentid>
      <timestamp>2021-03-21T01:52:41Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <minor/>
      <comment>namespace tables might be phased out, but probably not *soon* :-)</comment>
      <origin>5595</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9073" sha1="qsf3effrf7p71xpg94qme1wrz5pnzfa" xml:space="preserve">
This is largely based on [https://www.python.org/dev/peps/pep-0008 the Python style guide] except for some indentation and language syntax differences.  When in doubt, consult that guide.

Note that these are only ''guidelines'' for more readable code.  In some (rare) cases they may result in ''less'' readable code.  Use your best judgement.

== Comments ==

* Incorrect or outdated comments are worse than no comments.

* Avoid inline comments, unless they're very short.

* Write comments to clarify anything that may be confusing. Don't write comments that describe things that are obvious from the code.
&lt;span style="color: #282;"&gt;Good:&lt;/span&gt; &lt;source lang="Lua"&gt;width = width - 2  -- Adjust for 1px border on each side&lt;/source&gt;
&lt;span style="color: #b44;"&gt;Bad:&lt;/span&gt; &lt;source lang="Lua"&gt;width = width - 2  -- Decrement width by two&lt;/source&gt;

* Comments should follow English grammar rules, this means '''starting with a capital letter''', using commas and apostrophes where appropriate, and '''ending with a period'''. The period may be omitted in single-sentence comments. If the first word of a comment is an identifier, its casing should not be changed. '''Check the spelling.'''
&lt;source lang="Lua"&gt;
-- This is a properly formatted comment.
-- This isnt.              (missing apostrophe)
-- neither is this.        (lowercase first letter)
&lt;/source&gt;

* Comments should have a space between the comment characters and the first word.
&lt;source lang="Lua"&gt;
--This is wrong.
-- This is right.
&lt;/source&gt;

* Inline comments should be separated from the code by two spaces.
&lt;source lang="Lua"&gt;
foo()  -- A proper comment.
&lt;/source&gt;

* If you write comments for a documentation generation tool, write the comments in LuaDoc format.

* Short multi-line comments should use the regular single-line comment style.

* Long multi-line comments should use Lua's multi-line comment format with no leading characters except a &lt;code&gt;--&lt;/code&gt; before the closer.
&lt;source lang="Lua"&gt;
--[[
Very long
multi-line comment.
--]]
&lt;/source&gt;


== Lines, spaces, and indentation ==

* Indentation is done with one tab per indentation level.

* '''Lines are wrapped at 80 characters''' where possible, with a hard limit of 90.  If you need more you're probably doing something wrong.


=== Continuation lines ===

* Conditional expressions have continuation lines indented by two tabs.
&lt;source lang="Lua"&gt;
if long_function_call(with, many, arguments) and
		another_function_call() then
	do_something()
end
&lt;/source&gt;
&lt;br/&gt;
* Function arguments are indented by two tabs if multiple arguments are in a line, same for definition continuations.
&lt;source lang="Lua"&gt;
foo(bar, biz, "This is a long string..."
		baz, qux, "Lua")

function foo(a, b, c, d,
		e, f, g, h)
	[…]
end
&lt;/source&gt;
&lt;br/&gt;
* If the function arguments contain a table, it's indented by one tab and if the arguments get own lines, it's indented like a table.
&lt;source lang="Lua"&gt;
register_node("name", {
	"This is a long string...",
	0.3,
})

list = filterlist.create(
	preparemodlist,
	comparemod,
	function()
		return "no comma at the end"
	end
)
&lt;/source&gt;
&lt;br/&gt;
* When strings don't fit into the line, you should add the string (changes) to the next line(s) indented by one tab.
&lt;source lang="Lua"&gt;
longvarname = longvarname ..
	"Thanks for reading this example!"

local retval =
	"size[11.5,7.5,true]" ..
	"label[0.5,0;" .. fgettext("World:") .. "]" ..
	"label[1.75,0;" .. data.worldspec.name .. "]"
&lt;/source&gt;
&lt;br/&gt;
* When breaking around a binary operator you should break after the operator.
&lt;source lang="Lua"&gt;
if a or b or c or d or
		e or f then
	foo()
end
&lt;/source&gt;
&lt;br/&gt;

=== Empty lines ===

* Use a single empty line to separate sections of long functions.

* Use two empty lines to separate top-level functions and large tables.

* Do not use a empty line after conditional, looping, or function opening statements.
&lt;span style="color: #282;"&gt;Good:&lt;/span&gt;
&lt;source lang="Lua"&gt;
function foo()
	if x then
		bar()
	end
end
&lt;/source&gt;
&lt;span style="color: #b44;"&gt;Bad:&lt;/span&gt;
&lt;source lang="Lua"&gt;
function foo()

	if x then

		bar()
	end
end
&lt;/source&gt;

* Don't leave white-space at the end of lines.

=== Spaces ===

* Spaces are not used around parenthesis, brackets, or curly braces.
&lt;span style="color: #282;"&gt;Good:&lt;/span&gt;
&lt;source lang="Lua"&gt;
foo({baz=true})
bar[1] = "Hello world"
&lt;/source&gt;
&lt;span style="color: #b44;"&gt;Bad:&lt;/span&gt;
&lt;source lang="Lua"&gt;
foo ( { baz=true } )
bar [ 1 ]
&lt;/source&gt;

* Spaces are used after, but not before, commas and semicolons.
&lt;span style="color: #282;"&gt;Good:&lt;/span&gt; &lt;source lang="Lua"&gt;foo(a, b, {c, d})&lt;/source&gt;
&lt;span style="color: #b44;"&gt;Bad:&lt;/span&gt; &lt;source lang="Lua"&gt;foo(a,b,{c , d})&lt;/source&gt;

* Spaces are used around binary operators with following exceptions:
** There mustn't be spaces around the member access operator (".")
** Spaces around the concatenation operator ("..") are optional.
** In short one-line table definitions the spaces around the equals sign can be omitted.
** When in-/decrementing a variable by 1, the spaces around the + and - operator can be omitted if you want to "get the neighbour" of something, e.g. when increasing some counter variable.
&lt;span style="color: #282;"&gt;Good:&lt;/span&gt;
&lt;source lang="Lua"&gt;
local num = 2 * (3 / 4)
foo({bar=true})
foo({bar = true})
local def = {
	foo = true,
	bar = false,
}
i = i+1
sometable[#sometable+1] = v
&lt;/source&gt;
&lt;span style="color: #b44;"&gt;Bad:&lt;/span&gt;
&lt;source lang="Lua"&gt;
local num=2*(3/4)
local def={
	foo=true,
	bar=false,
}
playerpos.y = playerpos.y+1  -- playerpos.y is not an integer
&lt;/source&gt;

* Use spaces to align related things, but don't go overboard:
&lt;span style="color: #282;"&gt;Good:&lt;/span&gt;
&lt;source lang="Lua"&gt;
local node_up   = minetest.get_node(pos_up)
local node_down = minetest.get_node(pos_down)
-- Too long relative to the other lines, don't align with it
local node_up_1_east_2_north_3 = minetest.get_node(pos_up_1_east_2_north_3)
&lt;/source&gt;
&lt;span style="color: #b44;"&gt;Bad:&lt;/span&gt;
&lt;source lang="Lua"&gt;
local x                       = true
local very_long_variable_name = false

local foobar    = true
local unrelated = {}
&lt;/source&gt;

=== Tables ===

* '''Small tables may be placed on one line.'''  Large tables have one entry per line, with the opening and closing braces on lines without items; and with a comma after the last item.
&lt;span style="color: #282;"&gt;Good:&lt;/span&gt;
&lt;source lang="Lua"&gt;
local foo = {bar=true}
foo = {
	bar = 0,
	biz = 1,
	baz = 2,
}
&lt;/source&gt;
&lt;span style="color: #b44;"&gt;Bad:&lt;/span&gt;
&lt;source lang="Lua"&gt;
foo = {bar = 0,
	biz = 1,
	baz = 2}
foo = {
	bar = 0, biz = 1,
	baz = 2
}
&lt;/source&gt;

* In list-style tables where each element is short multiple elements may be placed on each line.
&lt;source lang="Lua"&gt;
local first_eight_letters = {
	"a", "b", "c", "d",
	"e", "f", "g", "h",
}
&lt;/source&gt;

== Naming ==

* '''Functions and variables should be named in &lt;code&gt;lowercase_underscore_style&lt;/code&gt;''', with the exception of constructor-like functions such as &lt;code&gt;PseudoRandom()&lt;/code&gt;, which should use UpperCamelCase.

* Don't invent compound words.  Common words like &lt;code&gt;filename&lt;/code&gt; are okay, but mashes like &lt;code&gt;getbox&lt;/code&gt; and &lt;code&gt;collisiondetection&lt;/code&gt; aren't.

* Avoid leading and/or trailing underscores.  They're ugly and can be hard to see.


== Misc ==

* Don't put multiple statements on the same line.

* You can put conditionals / loops with small conditions and bodies on one line.  This is discouraged for all but the smallest ones though.
&lt;span style="color: #282;"&gt;Good:&lt;/span&gt;
&lt;source lang="Lua"&gt;
local f, err = io.open(filename, "r")
if not f then return err end

if     foo then return foo
elseif bar then return bar
elseif qux then return qux
end
&lt;/source&gt;
&lt;span style="color: #b44;"&gt;Bad:&lt;/span&gt;
&lt;source lang="Lua"&gt;
if not f and use_error then error(err) elseif not f then return err end
&lt;/source&gt;

* Don't compare values explicitly to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt;, unless it's really needed.
&lt;span style="color: #282;"&gt;Good:&lt;/span&gt;
&lt;source lang="Lua"&gt;
local f, err = io.open(filename, "r")
if not f then return err end

local t = {"a", true, false}
for i = 1, 5 do
	-- Needs an explicit nil check to avoid triggering
	-- on false, which is a valid value.
	if t[i] == nil then
		t[i] = "Default"
	end
end
&lt;/source&gt;
&lt;span style="color: #b44;"&gt;Bad:&lt;/span&gt;
&lt;source lang="Lua"&gt;
if f == nil then return err end
&lt;/source&gt;

* Don't use unnecessary parenthesis unless they improve readability a lot.
&lt;source lang="Lua"&gt;
if y then bar() end -- Good
if (not x) then foo() end -- Bad
&lt;/source&gt;

* Write function definitions of the form &lt;code&gt;function foo()&lt;/code&gt; instead of the lambda form &lt;code&gt;foo = function()&lt;/code&gt;, except when inserting functions in tables inline, where only the second form will work.

* '''Avoid globals like the plague.'''  The only globals that you should create are namespace tables&amp;mdash;and even those might eventually be phased out.

* Don't let functions get too large.  Maximum length depends on complexity; simple functions can be longer than complex functions.

[[Category:Rules and Guidelines]]</text>
      <sha1>qsf3effrf7p71xpg94qme1wrz5pnzfa</sha1>
    </revision>
  </page>
  <page>
    <title>Main Page</title>
    <ns>0</ns>
    <id>1</id>
    <revision>
      <id>6169</id>
      <parentid>6144</parentid>
      <timestamp>2022-08-21T16:32:32Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <origin>6169</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="713" sha1="fbc7ug9ijyb55rpe8djq8jq6k7y1s8e" xml:space="preserve">{{Languages}}

Welcome to the '''Minetest Developer Wiki''', here you learn how Minetest and games and mods for Minetest are developed.

'''Minetest''' is a [https://en.wikipedia.org/wiki/Game_engine game engine] inspired by Minecraft, Infiniminer and others. It's licensed under the GNU LGPL 2.1, with artwork generally covered by CC BY-SA 3.0. There are two major parts to the system, the first being a [[Engine structure|core engine]] written in C++, the second being a modding API that exposes useful functions to a Lua environment.

The Minetest Wiki for players is located at [https://wiki.minetest.net/ wiki.minetest.net].

{{Contributor Call to Action}}

{{Main Content Links}}

[[Category:Root-Category]]</text>
      <sha1>fbc7ug9ijyb55rpe8djq8jq6k7y1s8e</sha1>
    </revision>
  </page>
  <page>
    <title>Main Page/de</title>
    <ns>0</ns>
    <id>932</id>
    <revision>
      <id>4508</id>
      <parentid>4477</parentid>
      <timestamp>2019-02-21T21:17:39Z</timestamp>
      <contributor>
        <username>Niwla</username>
        <id>191</id>
      </contributor>
      <minor/>
      <origin>4508</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="525" sha1="09psf231lxvrzu9k00532sjpg7sfitx" xml:space="preserve">{{Languages}}

Minetest ist ein Computerspiel, das von Minecraft, Infiniminer und anderen Voxelspielen inspiriert wurde. Es ist unter der GNU LGPL 2.1 lizenziert, wobei die Mediendatein im Allgemeinen unter der Lizenz CC BY-SA 3.0 stehen.

Es gibt zwei Hauptteile von Minetest, der erste ist eine in C++ geschriebene Engine, der zweite ist eine modifizierende API, die nützliche Funktionen einer [[Lua]]-Umgebung zugänglich macht.



{{Contributor Call to Action/de}}

{{Main Content Links/de}}


[[Category:Root-Category]]</text>
      <sha1>09psf231lxvrzu9k00532sjpg7sfitx</sha1>
    </revision>
  </page>
  <page>
    <title>Main Page/fr</title>
    <ns>0</ns>
    <id>845</id>
    <revision>
      <id>3581</id>
      <parentid>3579</parentid>
      <timestamp>2016-07-26T12:29:14Z</timestamp>
      <contributor>
        <username>0x539</username>
        <id>162</id>
      </contributor>
      <origin>3581</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="548" sha1="2es9g57qbcmuaivj1kbpsvvq0pgrjma" xml:space="preserve">{{Languages}}

'''Minetest''' est un jeu sur ordinateur s’inspirant de Minecraft, d’Infiniminer et d’autres. Il est disponible sous la licence GNU LGPL 2.1, les œuvres d’art sont principalement sous la licence CC BY-SA 3.0.

Le jeu est séparé en deux grandes parties, la première étant le [[Engine structure|moteur]], écrit en [[C++/fr|C++]], et la seconde étant l’IPA de modification qui fournit des fonctions utiles à un environnement [[Lua]].

{{Contributor Call to Action}}

{{Main Content Links}}


[[Category:Root-Category]]</text>
      <sha1>2es9g57qbcmuaivj1kbpsvvq0pgrjma</sha1>
    </revision>
  </page>
  <page>
    <title>Main Page/ja</title>
    <ns>0</ns>
    <id>815</id>
    <revision>
      <id>3441</id>
      <parentid>3407</parentid>
      <timestamp>2015-12-28T09:07:17Z</timestamp>
      <contributor>
        <username>Rui</username>
        <id>144</id>
      </contributor>
      <origin>3441</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="541" sha1="nsa3hlsdagqzt4qqrd2t28jvxysia4s" xml:space="preserve">{{Languages}}

'''Minetest'''はMinecraftやInfiniminerなどからインスパイアされたPCゲームです。本体はGNU LGPL 2.1のライセンス、アートワークはCC BY-SA 3.0のライセンスで提供されます。

システムは二つの部分からなり、[[C++/ja|C++]]で記述された[[Engine structure/ja|中心のエンジン]]と、Mod用APIとして役立つ関数群が存在する[[Lua/ja|Lua]]環境があります。

{{Contributor Call to Action/ja}}

{{Main Content Links/ja}}


[[Category:Root-Category]]</text>
      <sha1>nsa3hlsdagqzt4qqrd2t28jvxysia4s</sha1>
    </revision>
  </page>
  <page>
    <title>Mapgen Parameters</title>
    <ns>0</ns>
    <id>482</id>
    <revision>
      <id>6377</id>
      <parentid>5966</parentid>
      <timestamp>2023-05-01T11:18:21Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <comment>lua_api.txt -&gt; lua_api.md</comment>
      <origin>6377</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4361" sha1="stdgpg3bn1vzgacf2xdxxgwza5exq7h" xml:space="preserve">All map generator algorithms have a few common parameters, plus any mapgen-specific options such as noise parameters or threshhold values.
= Mapgen parameter source precedence =
There are several sources which the map generator may retrieve parameters from.  In order from highest precedence to lowest they are:
* Hard-coded
* Lua mods
* map_meta.txt
* Game-specific config file
* Global config file
* Default settings (set in defaultsettings.cpp)
* Default object constructor values

= List of mapgen parameters =
== Mapgen name ==
The name of the map generator algorithm being used.
Currently supported:
{| class="wikitable"
|-
! Mapgen name !! Developer responsible !! Description
|-
| v5 || missing info || Description needed
|-
| v6 || kwolekr, celeron55 || The current default map generator.  Uses an improved Mapgen v2 algorithm for base terrain; terrain is generated entirely using 2D Perlin noise.
|-
| v7 || kwolekr || The next generation map generator with an emphasis on generating interesting and playable terrain.  Has full support for the internal biome infrastructure and uses a mixture of 2D and both positive and negative 3D noise for terrain.
|-
| valleys || missing info || Description needed
|-
| carpathian || missing info || Description needed
|-
| fractal || missing info || Generates maps based on Mandelbrot fractal series
|-
| flat || missing info || Generates completely flat world. Replaces the flat flag in mg_flags. Caves, dungeons, decorations, and biomes need to be explicitly excluded to make a flat and empty world.
|-
| singlenode || celeron55 || Places only a single node everywhere, namely the one aliased to mapgen_singlenode (by default air).  Intended to be used by mods that perform total mapgen takeovers.
|}
example: &lt;code&gt;mg_name = v7&lt;/code&gt;

== Seed ==
A 64-bit unsigned integer value.  At this time, only the lower 32 bits are currently used for randomization.&lt;br&gt;
example: &lt;code&gt;seed = 1246106421&lt;/code&gt;

== Water level ==
The y coordinate at which water starts being placed, for mapgens that do place water.
&lt;br /&gt;
This is also the position at which blocks are assumed to be underground if no block above is present, and thus is not given sunlight.&lt;br&gt;
example: &lt;code&gt; water_level = 1 &lt;/code&gt;

== Mapgen Limit ==
Limit of map generation, in nodes, in all 6 directions from (0, 0, 0).
* Only mapchunks completely within the mapgen limit are generated.
* Value is stored per-world.
* type: int min: 0 max: 31000&lt;br&gt;
example : &lt;code&gt;mapgen_limit = 4500&lt;/code&gt;

== Flags parameter ==
The flags parameter is a set of booleans indicating whether or not a certain option is enabled.  Global flags applying to all map generators are listed in [[mg_flags]]. Other map generator-specific flags are shown below.
&lt;br /&gt;
Like all other config and Lua flag fields, they are represented as a comma-delimited string.
E.g. the flag string "trees, caves, flat" would direct the Mapgen to create flat terrain with trees and caves.
&lt;br /&gt;
An exhaustive list of currently recognized Mapgen flags:
{| class="wikitable"
|-
! Lua/config flag name !! Defaults  !! Allowed values
|-
| mgv5_spflags || caverns || caverns, nocaverns
|-
| mgv6_spflags || jungles,biomeblend,mudflow,snowbiomes,trees || jungles, biomeblend, mudflow, snowbiomes, flat, trees, nojungles, nobiomeblend, nomudflow, nosnowbiomes, noflat, notrees
|-
| mgv7_spflags || mountains,ridges,nofloatlands,caverns || mountains, ridges, floatlands, caverns, nomountains, noridges, nofloatlands, nocaverns
|-
| mgcarpathian_spflags || caverns || caverns, nocaverns
|-
| mgflat_spflags || nolakes,nohills || lakes, hills, nolakes, nohills
|-
| mgvalleys_spflags || altitude_chill,humid_rivers,vary_river_depth,altitude_dry || altitude_chill, noaltitude_chill, humid_rivers, nohumid_rivers, vary_river_depth, novary_river_depth, altitude_dry, noaltitude_dry
|}

Other fine-tuning parameters are available for each map generator, and can be found in lua_api.md.

== Chunk size ==
The side length (in MapBlocks) of the cubic area that is generated at once.  Default is 5; larger values take longer to generate but blocks generate quicker on average and could produce larger, more intricate caves and dungeons.
&lt;br /&gt;
Don't mess around with this if you don't know what you're doing!  This parameter cannot be modified through the Lua API.

{{Incomplete}}

[[Category:Core Engine]]</text>
      <sha1>stdgpg3bn1vzgacf2xdxxgwza5exq7h</sha1>
    </revision>
  </page>
  <page>
    <title>Mapgen memory optimisations</title>
    <ns>0</ns>
    <id>910</id>
    <revision>
      <id>5353</id>
      <parentid>5027</parentid>
      <timestamp>2020-06-26T19:52:19Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <minor/>
      <comment>Remove Misc category</comment>
      <origin>5353</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4750" sha1="qeaw9poxkcp4yi03rhrwethh10bp0i9" xml:space="preserve">{{LuaTips}}

''This page is based on Paramat's [https://forum.minetest.net/viewtopic.php?t=16043 forum topic] and has been updated for Minetest 5.0.0.''

Lua map generators can use excessive memory if they are not using these 3 optimisations. Not using these optimizations can eventually lead to OOM (out-of-memory) errors because the Lua mapgen wasted way too much memory. Applying this advice is '''strongly recommended''', and should make OOM errors much less likely. But there is no guarantee this will fix all OOM errors, your mapgen might still use excessive memory for other reasons, or the computer just has very limited memory.

== Perlin noise objects: Only create once ==

The noise object is created by &lt;code&gt;minetest.get_perlin_map()&lt;/code&gt;.
It has to be created inside &lt;code&gt;register_on_generated()&lt;/code&gt; to be usable, but only needs to be created once, many mapgen mods create it for every mapchunk, this consumes memory unnecessarily.

Localise the noise object outside &lt;code&gt;register_on_generated()&lt;/code&gt; and initialise it to &lt;code&gt;nil&lt;/code&gt;.
See the code below for how to create it once only.
The creation of the perlin noise tables with &lt;code&gt;get_3d_map_flat()&lt;/code&gt; etc. is done per mapchunk

&lt;source&gt;
-- Initialize noise objects to nil

local nobj_terrain = nil
local nobj_biome = nil

-- ...
-- ...

-- On generated function
minetest.register_on_generated(function(minp, maxp, seed)
   -- ...
   -- ...
   nobj_terrain = nobj_terrain or minetest.get_perlin_map(np_terrain, chulens3d)
   nobj_biome = nobj_biome or minetest.get_perlin_map(np_biome, chulens2d)
   
   nobj_terrain:get_3d_map_flat(minpos3d, nvals_terrain)
   nobj_biome:get2d_map_flat(minpos2d, nvals_biome)
   -- ...
   -- ...
end)
&lt;/source&gt;

== Perlin noise tables: Re-use a single table ==

The Lua table that stores the noise values for a mapchunk is big, especially for 3D noise (80&lt;sup&gt;3&lt;/sup&gt; = 512000 values).
Many Lua mapgens are creating a new table for every mapchunk, while the previous tables are only cleared out slowly by garbage collection, resulting in a large and unnecessary memory use.

A &lt;code&gt;buffer&lt;/code&gt; parameter was added in 0.4.13 to avoid this, a single table is re-used by overwriting the former values.

 For each of the functions with an optional `buffer` parameter:  If `buffer` is not
 nil, this table will be used to store the result instead of creating a new table.
  
 #### Methods
 * `get_2d_map_flat(pos, buffer)`: returns a flat `&lt;size.x * size.y&gt;` element array of 2D noise
 with values starting at `pos={x=,y=}`
 * `get_3d_map_flat(pos, buffer)`: Same as `get_2d_map_flat`, but 3D noise

Localise the noise buffer outside &lt;code&gt;register_on_generated()&lt;/code&gt;
Use the &lt;code&gt;buffer&lt;/code&gt; parameter in &lt;code&gt;get_3d_map_flat()&lt;/code&gt; etc.

&lt;source&gt;
-- Localise noise buffers
local nvals_terrain = {}
local nvals_biome = {}
-- ...
-- ...
-- On generated function
minetest.register_on_generated(function(minp, maxp, seed)
   -- ...
   -- ...
   nobj_terrain:get3d_map_flat(minpos3d, nvals_terrain)
   nobj_biome:get2d_map_flat(minpos2d, nvals_biome)
   -- ...
   -- ...
end)
&lt;/source&gt;

== Lua voxelmanip table: Re-use a single table ==

The Lua table that stores the node content IDs for a mapchunk plus the mapblock shell is big (112&lt;sup&gt;3&lt;/sup&gt; = 1404928 values).
Many Lua mapgens are creating a new table for every mapchunk, while the previous tables are only cleared out slowly by garbage collection, resulting in a large and unnecessary memory use.

A &lt;code&gt;buffer&lt;/code&gt; parameter was added in 0.4.13 to avoid this, a single table is re-used by overwriting the former values.

In Minetest 0.4.15, a &lt;code&gt;buffer&lt;/code&gt; parameter was also added to &lt;code&gt;get_param2_data()&lt;/code&gt;.

 * `get_data([buffer])`: Retrieves the node content data loaded into the `VoxelManip` object
     * returns raw node data in the form of an array of node content IDs
     * if the param `buffer` is present, this table will be used to store the result instead
 * `get_param2_data([buffer])`: Gets the raw `param2` data read into the `VoxelManip` object
     * Returns an array (indices 1 to volume) of integers ranging from `0` to `255`
     * If the param `buffer` is present, this table will be used to store the result instead

Localise the data buffer outside &lt;code&gt;register_on_generated()&lt;/code&gt;.
Use the buffer in &lt;code&gt;get_data()&lt;/code&gt; or &lt;code&gt;get_param2_data()&lt;/code&gt;.

&lt;source&gt;
-- Localise data buffer
local data = {}

-- On generated function
minetest.register_on_generated(function(minp, maxp, seed)
   -- ...
   -- ...
   local vm, emin, emax = minetest.get_mapgen_object("voxelmanip")
   local area = VoxelArea:new{MinEdge = emin, MaxEdge = emax}
   vm:get_data(data)
   -- ...
   -- ...
end)
&lt;/source&gt;

[[Category:Mapgen]]</text>
      <sha1>qeaw9poxkcp4yi03rhrwethh10bp0i9</sha1>
    </revision>
  </page>
  <page>
    <title>Mapgen objects</title>
    <ns>0</ns>
    <id>771</id>
    <revision>
      <id>6261</id>
      <parentid>6039</parentid>
      <timestamp>2022-12-17T11:26:17Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <comment>Replaced content with "{{UnofficialLua}}  Please see https://minetest.gitlab.io/minetest/mapgen-objects/#mapgen-objects  [[Category:Mapgen]]"</comment>
      <origin>6261</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="117" sha1="sjc71loakhupgjlm8jpju6xnfxt3d0w" xml:space="preserve">{{UnofficialLua}}

Please see https://minetest.gitlab.io/minetest/mapgen-objects/#mapgen-objects

[[Category:Mapgen]]</text>
      <sha1>sjc71loakhupgjlm8jpju6xnfxt3d0w</sha1>
    </revision>
  </page>
  <page>
    <title>Meetings</title>
    <ns>0</ns>
    <id>974</id>
    <revision>
      <id>6395</id>
      <parentid>6394</parentid>
      <timestamp>2023-07-10T20:26:44Z</timestamp>
      <contributor>
        <username>Zughy</username>
        <id>202</id>
      </contributor>
      <comment>/* 2023-07-23 */</comment>
      <origin>6395</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="48509" sha1="c5nzukcqgblfbo96vpe9f3g4wvjuc13" xml:space="preserve">Core developer meetings are held when needed. They take place in the #minetest-dev [https://wiki.minetest.net/IRC IRC] channel.

This Wiki page contains the meeting plans for upcoming meetings, and meeting notes for previous meetings.

'''Only core devs should edit this page.'''
You can raise points to be discussed in an upcoming meeting by contacting a core dev, or messaging on IRC.
Please avoid derailing meetings by posting unrelated things whilst discussion about other things is happening.


= Upcoming Meetings =

== 2023-07-23 ==

'''Remember to post meetings in the [https://github.com/orgs/minetest/discussions GitHub discussions] in advance'''

Add your points here. Most important comes first.

'''Organization Discussion'''

* Feature freeze? Expected 5.8 milestone is August 13 (Zughy)

'''PR discussion/reviews'''

* [https://github.com/minetest/minetest/pull/13642 Import Irrlicht] (wsor4035)

Also consider:

* [https://github.com/minetest/minetest/pulls?q=is%3Aopen+is%3Apr+label%3A%22One+approval%22 "One Approval" PRs] and decide on whether to merge, request changes or close.

= Past Meetings =

== 2023-06-25 ==

'''Organization Discussion'''

* Start considering a hypothetical new name, possibly privately. See [https://github.com/minetest/minetest/issues/13510 Here] (Zughy)
** Will be discussed internally

'''PR discussion/reviews'''

* Less than two months to [https://github.com/minetest/minetest/milestone/22 5.8]: we should consider what to do with a few issues/PRs in the milestone to avoid a last month burst (Zughy)
** Not yet urgent. PRs and issues will be resolved when people have time for it.

Also discussed:

* [https://github.com/minetest/minetest/issues/13550 Debundle Minetest Game]
** Question about "featured" marks to make it more visible to newcomers


== 2023-05-28 ==

'''Organization Discussion'''

* welcome srifqi
* 5.7.1 release (justified by [https://irc.minetest.net/minetest-dev/2023-05-23#i_6086412 Android crashes])

'''PR discussion/reviews'''

* Discuss and concept approve or close [https://github.com/minetest/minetest/pulls?q=is%3Aopen+is%3Apr+label%3A%22Roadmap%3A+Needs+approval%22 "Roadmap: needs approval" PRs]
** [https://github.com/minetest/minetest/pull/12966 make falling node checks check for protection] TL;DR: Some server made ladders falling, and protection doesn't protect from fall through on_punch by other players. Possible solutions include making the registered on_punch/on_dig/on_placenode function overwritable, or only checking for protection in on_punch. What to do? (DS)
*** Removed roadmap approval needed label. (DS)

== 2023-05-14 ==

'''Organization Discussion'''

* close all the Jude's PRs that haven't been adopted (Zughy)
** done

'''PR discussion/reviews'''

* [https://github.com/minetest/minetest/pull/11016 "Dual Wielding"] I think OP is waiting for a core dev feedback, see their last comment (Zughy)
** ???

== 2023-04-30 ==

Notes inherited from the meeting 2023-04-16

'''Organization Discussion'''

* now that 5.7 has been released, we should write down a roadmap for 5.8 onwards (Zughy)
** No special action taken. Might need picking up later again.

'''PR discussion/reviews'''

* [https://github.com/minetest/minetest/pull/12749 "Move code style guidelines into repo"] Do we want this? (I'm myself neutral now that code blocks are no longer broken on the wiki.) (DS)
** Generally okay but updating it might be cumbersome. Guidelines should apply to all Minetest (group) projects (Krock)
** Closed by author (DS).
* [https://github.com/minetest/minetest/issues/13417 "Conditional textures for nodes, bulk texture changing"] Support for this? Or for the alternative linked in the original post? Or none? (Zughy)
** Yet another feature request. No interest shown. Marked as low priority.
* [https://github.com/minetest/minetest/pull/13464 "Add utility script to update/generate *.tr files"] roadmap approval or rejection?
** Answer posted in https://github.com/minetest/minetest/pull/13437
* [https://github.com/minetest/minetest/pull/13215 Irrlicht as a submodule] - how to fix Android compatibility? Ideas are welcome.
** Fix the Android script later? Waiting on numberZero when they have time (Krock)

== 2023-04-02 ==

'''Organization Discussion'''

* Where should we post next meetings notice? (Zughy)
** rubenwardy moved them to https://github.com/orgs/minetest/discussions
** People with read access: MTE + MTG + triagers
* Complaints about connected glass changes - changes the meaning of glasslike_framed_optional and there's no way for texture packs to control it.
** Reverted for now. Let's keep it as a subject for 5.8.0-dev
* 5.7.0 release
** Aiming for 9 April or earlier. Not enough developer activity in this meeting.

== 2023-03-19 ==

'''Organization Discussion'''

* Current roadmap evaluation and draft of the next one (Zughy)
** Still need focus on UI/UX improvements, entities were not touched at all, dehardcoding shouldn't be a point

== 2023-03-05 ==

'''Organization Discussion'''

* Feature freeze? (Zughy)
** Yes, now (sfan5, x2048).
* Dedicate the upcoming version to Jude/TurkeyMcMac (Zughy, original proposal by jp)
** sfan5 will do that when updating the credits
* We're choking on PRs again: shouldn't MT advertise itself more so to potentially find new core devs and/or recruit existing contributors? (Zughy)
** There is not much that can be done about it, wait for new devs.

'''PR discussion/reviews'''

* [https://github.com/minetest/minetest/pull/13046 "SSCSM execution"] (TurkeyMcMac)
** Should the PR be reviewed in parts? If so, it can be reviewed at this point.
** It would be good to divide up the work of implementing the various SSCSM APIs, if other people have time to work on this. See the TODO list in the PR description. To see how to implement SSCSM APIs, you can look at src/script/lua_api/l_csm.cpp and src/script/lua_api/l_csm_nodemeta.cpp.
** Meeting note: x2048 might have a look at it. It should be merged in small chunks, preferably with unittests (Krock)
* [https://github.com/minetest/minetest/pull/12189#issuecomment-1130461922 "Reorder client initialization"] needs sfan's take to unlock the status of the PR (Zughy)
** sfan5 unblocked it; will be reviewed when time comes.
* [https://github.com/minetest/minetest/pull/13266 MariaDB] Yes or No (Krock: Yes) - who could test this easily? (Krock)
** obsolete entry
* [https://github.com/minetest/minetest/pull/11016 "Dual Wielding"] How should we go ahead with this? (sfan5)
** Yes: item definition flag (sfan5 answered)
* [https://github.com/minetest/minetest/pull/12315  Add world-independent storage directory for mods] - approved, but there's concerns about how multiple instances of Minetest running will cause issues for modders. Is this acceptable? What should modders do in these situations? Is the design fundamentally flawed (rubenwardy)
** Ideas: callback-based updates for sane locking (sfan5)


== 2023-01-08 ==

'''Organization Discussion'''

* [https://github.com/minetest/minetest/issues/13072 "Host the generated Lua API documentation under api.minetest.net"] (Zughy)
** Assigned to rubenwardy to move it to GitHub
* Feature freeze starting on January 22? I suggest to keep every feature currently listed in the milestone (Zughy)
** focus on the Privacy Policy (sample available)
** postponed the main menu (settings) rework to 5.8.0
** minetest.get_player_window_information reviews requested
** Dual Wield should be reviewed because it's what the players want

'''PR discussion/reviews'''

* [https://github.com/minetest/minetest/issues/13037 "Static binary builds for Linux on common architectures"]: yes, no? (Zughy)
** AppImages are coming and Docker is an universal solution. Additional static binaries are not necessary.
* [https://github.com/minetest/minetest/pull/12953 "Allow zoom even with overwritten default FOV"]: There seems to be some disagreement on this in the comments. Is the change acceptable? (TurkeyMcMac)
** Handled (Krock)
* [https://github.com/minetest/minetest/pull/12928 "Add node texture variants"]: What item properties should be allowed to vary by variant? (TurkeyMcMac)
** Currently supported: "tiles", "overlay_tiles", and "special_tiles"
** Others that could be supported:
*** "inventory_image" and "wield_image": May be unnecessary as there's a separate PR for settings these using item metadata.
*** "mesh": Could be complicated to implement, I haven't looked into it.
** Should all properties vary based on the same bitfield ("param2_variant") or is this bad API design? (A single bitfield is not a functional limitation. It is still possible to let properties effectively vary independently by making a variant for each possible combination.)
** -&gt; Feedbacks given for the concept. Might be discussed again in the next meeting.


== 2022-12-04 ==

'''Organization Discussion'''

* 5.7 release when? (Zughy)
** somewhen in January is good (rubenwardy, sfan5)
* we should decide on the [https://github.com/minetest/minetest/issues/12746 new roadmap] (sfan5)
** Commented an analysis of the previous roadmap and suggestions on how to increase "success rate" (Krock)

'''PR discussion/reviews'''

* [https://github.com/minetest/minetest/pull/11016 "Dual wielding"]: can someone please take care of this PR if the author doesn't come back? It's a huge feature for modders (Zughy)
** Author came back. Check the progress as usual.


== 2022-10-23 ==

'''PR discussion/reviews'''

* [https://github.com/minetest/minetest/pull/12772 Add vector() constructor] - It seems this proposal is controversial. Its fate should be decided. (TurkeyMcMac)


== 2022-10-09 ==

'''PR discussion/reviews'''

* [https://github.com/minetest/minetest/pull/11432#issuecomment-1263562675 Add support for attached facedir/4dir nodes (comment)] - Thoughts on adding this as part of the PR? (TurkeyMcMac)
* [https://github.com/minetest/minetest/pull/12739 Add callback on_mapblocks_changed] - Decide whether this is the right approach. We could go for something with node granularity, but it would probably be more expensive. (TurkeyMcMac)
* [https://github.com/minetest/minetest/pull/12611 Implement some VoxelManip functionality safely using LuaJIT's FFI library] - Decide whether the added complexity is worth it. (TurkeyMcMac)
* [https://github.com/minetest/minetest/pull/12449 Use .md extension for markdown files] - Please decide once and for all (Zughy)
* Shader brightness issue


== 2022-09-25 ==

'''PR discussion/reviews'''

* [https://github.com/minetest/minetest/pull/9863 Set visibility of players/hide them from others] has been rebased twice, it's from 2020. Can anyone have a look at it? Or put it in the 5.7.0 milestone, I don't know (Zughy)
* [https://github.com/minetest/minetest/pull/11465 New physics modifiers] concept discussion (Wuzzy)
* The same goes for [https://github.com/minetest/minetest/pull/9776 Show relative screenshot filename on chat when applicable] (Zughy)


== 2022-09-11 ==

* [https://github.com/minetest/minetest/pull/7712 Item pickup] general concept discussion
* [https://github.com/minetest/minetest/pull/11885 Item movement unit tests] required for bugfix PR [https://github.com/minetest/minetest/pull/12595 #12595]


== 2022-08-28 ==

'''Organization Discussion'''

* Add some bugs to the 5.6.1 milestone? (Proposal: each core dev pick one and adds it)
* Two years have passed since the [https://github.com/minetest/minetest/issues/10461 first roadmap brainstorm]: create another one to then follow after 5.7? Also to gather feedback

'''PR discussion/reviews'''

* [https://github.com/minetest/minetest/pull/12449 Use .md extension for markdown files] - yes or no?
* [https://github.com/minetest/minetest/pull/12145 Doc of set_sun/-moon: Absolute orientation and difference in scale ] - document difference in size or slightly change the scale of both the celestial bodies?


== 2022-08-14 ==

'''PR discussion/reviews'''

* https://github.com/minetest/minetest/issues?q=is%3Aopen+is%3Aissue+label%3AQuestion
* [https://github.com/minetest/minetest/pull/12367 Add minetest.get_player_window_information()] - any requirements for merge?
* [https://github.com/minetest/minetest/pull/12480 Settings redesign] - how to resolve issues with focus?


== 2022-07-31 ==

'''Organization Discussion'''

* Who writes the release changelog?
* When does the release happen? presumably today

'''PR discussion/reviews'''

* Work on merging the last PRs left in [https://github.com/minetest/minetest/milestone/19 the milestone]


== 2022-07-17 ==

'''PR discussion/reviews'''

* review [https://github.com/minetest/minetest/milestone/19 5.6.0 Milestone]

Also consider:

* [https://github.com/minetest/minetest/pulls?q=is%3Aopen+is%3Apr+label%3A%22One+approval%22 "One Approval" PRs] and decide on whether to merge, request changes or close.
** in particular decide whether we want them for 5.6

== 2022-07-03 ==

'''Organization Discussion'''

* Feature freeze date for 5.6.0
** Starting on June 17. Close to 6 months release cycle.

'''PR discussion/reviews'''

* [https://github.com/minetest/minetest/pull/12367 Add minetest.get_player_window_information()]
** How to resist fingerprinting? -&gt; minor concern, rounding is possible
** Move to player ObjectRef? -&gt; player-specific function. not necessarily.
** Should this be prioritised for 5.6? -&gt; 
* [https://github.com/minetest/minetest/pull/12284 Show dep errors in Select Mods modal] - pls someone review
** review shall be done
* [https://github.com/minetest/minetest/pull/12480 Settings redesign] - concept approval, prioritisation, requirements for submission
** "yes but not in 5.6"
* [https://github.com/minetest/minetest/pull/11939 Bouncy improvements] - makes trampolines fun again.
** review shall be done
* [https://github.com/minetest/minetest/issues/12493 repeat_place_time] - what do to about this?
** Krock: write a bounds check or removal PR

Roadmapped

* [https://github.com/minetest/minetest/pull/12483 FOV mouse sensitivity]
* [https://github.com/minetest/minetest/pull/12463 http client fetch]
** not needed
* [https://github.com/minetest/minetest/pull/12353 fix acceleration] / [https://github.com/minetest/minetest/pull/11855 fix gravity calculation]
** approved
* [https://github.com/minetest/minetest/pull/10850 allow server to use media from texture_path]
** flawed, but possibly helpful
* [https://github.com/minetest/minetest/pull/10587 Only count entity as "on ground" if they are colliding on the Y axis]
** Krock + sfan5: rejected.
* [https://github.com/minetest/minetest/pull/9424 userdata command line option]
** OK, but needs changes
* [https://github.com/minetest/minetest/pull/7728 Add keep_newlines argument to wrap_text]
** OK, might need fixing
* [https://github.com/minetest/minetest/pull/7712 Add an item pick up callback (2)]
** seems useful.

== 2022-06-05 ==

'''Organization Discussion'''

* make a 5.5.2 release due to security fixes?
** yes

'''PR discussion/reviews'''

* [https://github.com/minetest/minetest/pull/12168 Make minetest.write_json use empty list instead of "null" for empty tables] - is this approach good?
* [https://github.com/minetest/minetest/pull/12355 Raise default windowed resolution to 1280x720 (720p)] - yes or no?
** no

== 2022-05-22 ==

'''PR discussion/reviews'''

* [https://github.com/minetest/minetest/pull/11545 #11545] &lt;- someone should review this --[[User:Sfan5|Sfan5]] ([[User talk:Sfan5|talk]])
** x2048
* [https://github.com/minetest/minetest/pull/12367 #12367] some questions here
** mostly answered before meeting
* https://github.com/minetest/minetest/issues/12353 -- Fix acceleration by appgurueu

== 2022-05-08 ==

'''Organization Discussion'''

* Gauge interest in 5.5.1 release
** 3 in favor, 1 neutral
* Prioritize things for 5.6?
** planned date: July, PRs will be added to milestone

'''PR discussion/reviews'''

* [https://github.com/minetest/minetest/issues/12251#issuecomment-1115477945 #11251 (comment)] - backwards compat hinders refactors, drop compat for old irrmt revisions this time?
** ''&lt;+rubenwardy&gt; anyway. I think the conclusion is that breaking it is fine, with some concerns over ease-of-use during dev''

Also consider:

* [https://github.com/minetest/minetest/pulls?q=is%3Aopen+is%3Apr+label%3A%22One+approval%22 "One Approval" PRs] and decide on whether to merge, request changes or close.
* [https://github.com/minetest/minetest/pulls?q=is%3Aopen+is%3Apr+label%3A%22Roadmap%3A+Needs+approval%22 "Roadmap: needs approval" PRs]
* oldest PRs

== 2022-04-24 ==

'''Organization Discussion'''

* What to do with closing out old PRs? Should we start assessing old PRs under the roadmap / assigning people?
** Yes, start marking PRs as supported by core dev / roadmap / needs approval. https://github.com/minetest/minetest/pulls?q=is%3Aopen+is%3Apr+-label%3ARoadmap+-label%3ABugfix+-label%3A%22Supported+by+core+dev%22+sort%3Acreated-asc+
* Release in June?
** Potentially, will discuss 5.6.0 goals in next meeting

'''Issues/planning'''

* See proposal in [https://github.com/minetest/minetest/issues/8601  Optional dependencies being overridden/turned into hard dependencies]
** Accepted
* [https://github.com/minetest/minetest/issues/12092 Calling set_detach() + set_properties() + set_pos() on the same step fails to teleport the player half of the time, especially online]
** Marked as confirmed, to be investigated

'''PR discussion/reviews'''

* Close [https://github.com/minetest/minetest/pull/11854 Shader improvements: Saturation Optimization]?
** Closed.

Roadmap: needs approval

* [https://github.com/minetest/minetest/pull/12181 Single functions to get/set every celestial vault element]
** Approved.
* [https://github.com/minetest/minetest/pull/12118 Make debug.g/setmetatable respect the "__metatable_debug" metatable field]
** Postponed for further inputs.
* [https://github.com/minetest/minetest/pull/12080 WIP: Do not stat /etc/localtime all the time]
** Needs actions or will be closed.
* [https://github.com/minetest/minetest/pull/11946 Add mods list formspec display for /mods cmd]
** Approved but needs a better implementation.

High-level/Concept approval for:

* [https://github.com/minetest/minetest/pull/12208 Add support for translating content title and descriptions]
** Inputs provided.
* [https://github.com/minetest/minetest/pull/12185 Add login/register dialog to separate login/register]
** Inputs provided.

Other:

* New spatial index library for entity lookup performance improvements [https://github.com/minetest/minetest/pull/12040 12040]
** Library needs checking, first PR should also replace existing spatial lib
* [https://github.com/minetest/minetest/issues/12128 Add bulk ABMs by TurkeyMcMac]
** Unsure of the question, skipped

== 2022-04-10 ==

'''Organization Discussion'''

* More regular meetings
** agreed on fortnightly meetings, starting 2022-04-10 and 2022-04-24
* Review roadmap rules. Remove 1 week limit, use meetings instead
** raise limit to 1 month, attempt review sooner during regular meetings

'''PR discussion/reviews'''

Also have a look at "One Approval" PRs and decide on whether to merge, request changes or close.

* [https://github.com/minetest/minetest/pull/11567 SQLite media cache]
** Closed for lack of benchmarks. Opinion is split on whether sqlite is a good approach
* [https://github.com/minetest/minetest/pull/11843 proller's breaking world]
** Closed due to scale of changes vs prioritisation. Agreement made that a hard network break should not be done
* [https://github.com/minetest/minetest/pull/11630 Add API function minetest.activate_objects_in_area]
** worth more consideration, posted comment in PR
* [https://github.com/minetest/minetest/pull/12131 CSM settings]
** Supported by core dev
* [https://github.com/minetest/minetest/issues/12084 Add text tile modifier]
** Closed as draft and bad approach
* [https://github.com/minetest/minetest/issues/11939 Restore and enhance bouncy behavior by pecksin]
** Supported by core dev
* [https://github.com/minetest/minetest/issues/11016 Dual Wielding]
** concept accepted, no need for an arbitrary amount of wields
* [https://github.com/minetest/minetest/issues/11933 A light_source should not override sunlight]
** Krock brought up an implementation concern
* [https://github.com/minetest/minetest/pull/11073 Add rotation support for wallmounted nodes in 'ceiling' or 'floor' mode]
** concept accepted

'''MTG discussion/reviews'''

* [https://github.com/minetest/minetest_game/pull/2942 Don't block fluid (water, lava) flow by flowers, mushrooms, grass and saplings]
** Does this break builds? Does this count as a feature? '''-&gt;''' Closed as too close to a feature

== 2021-09-04 ==

Add your points here. Most important comes first.

'''Organization Discussion'''

'''PR discussion/reviews'''

* Android update for November
** WIP. Waiting for rubenwardy. Not very urgent yet.
* Irrlicht milestone
** Await hecks' OpenGL rewrite until beginning of October.
** .. otherwise remove shadowmap main menu setting and disable within C++
* ItemStack metadata network optimizations - https://github.com/minetest/minetest/pull/11014
** Closed.
* Automatic selection of mods - Adopt or Won't add - https://github.com/minetest/minetest/pull/11274
** Closed.
* Death item duplication and callback fix - https://github.com/minetest/minetest/pull/11445
* Joystick controls - https://github.com/minetest/minetest/pull/11262
* New movement tweak (trivial) - https://github.com/minetest/minetest/pull/11367
** To be discussed later.
* Perhaps provide an alternative fix for https://github.com/minetest/minetest/issues/9725
* TODO reviews
** Dynamic Media V2 https://github.com/minetest/minetest/issues/11550
** Animated particle spanwers https://github.com/minetest/minetest/issues/11545

Also have a look at "One Approval" PRs and decide on whether to merge, request changes or close.

'''MTG discussion/reviews'''

== 2021-01-23 ==

'''Organization Discussion'''

* SDL2 integration into Irrlicht
** Ensure that adding an "original Irrlicht" compatibility mode is somehow possible if necessary (ex. Android). (mentioned by sfan5)
** Development on a separate branch to merge when it's usable
** SDL2 as Irrlicht device. WIP (nerzhul) https://github.com/minetest/minetest/pull/10780
** SDL2 for text input. WIP (numzero)

* Plans for 5.4.0 and feature freeze
** '''Feature freeze on 30 Jan 2021'''

'''PR discussion/reviews'''

* https://github.com/minetest/minetest/issues/9352 get_player_information issue
** No solution yet.

* https://github.com/minetest/minetest/pull/10693 Builtin translate
** Needs re-review. Soon ready for merge prior 5.4.0 freeze

* https://github.com/minetest/minetest/pull/10636 Android, ready for review.
** Gradle error is fixed in master (rebase)
** rubenwardy will review/test

* https://github.com/minetest/minetest/pull/10083 Inventory slots style
** Waiting for merge or another approval (v-rob)

* https://github.com/minetest/minetest/issues/10555 Game settings bug
** Fix Settings for once and all in 5.4.0: https://github.com/minetest/minetest/pull/10819

* https://github.com/minetest/minetest/pull/10265 Formspec image features
** Considered for 5.4.0 prior freeze, but not priority

'''MTG discussion/reviews'''

* https://github.com/minetest/minetest_game/pull/2803 Texture compression issue
** Based on issue https://github.com/minetest/minetest_game/issues/2801
** imagefilters.cpp  imageCleanTransparent()  might need fixing to get white-filled opaque leaves after adding colors to the texture
** Affected textures are whitelisted, but ExeVirus review that again


== 2020-12-19 ==

'''Organization Discussion'''

* 5.3.1 or 5.4.0 release date? There have been multiple big security fixes.
** Perhaps January, depending on how quickly the milestone issues can be resolved
** Texture alpha warnings issue: sfan5 needs time to work on it
** game settings fallback issue: needs decision whether to fix overrideDefaults() or the whole Settings structure (https://github.com/minetest/minetest/issues/10555)

'''PR discussion/reviews'''

Various concepts to judge:

* https://github.com/minetest/minetest/pull/10384 image transparency
* https://github.com/minetest/minetest/pull/10430 mapgen constant
* https://github.com/minetest/minetest/pull/10516 base64 (2)

'''MTG discussion/reviews'''



== 2020-10-03 ==

Logs: http://irc.minetest.net/minetest-dev/2020-10-03#i_5738345

'''Organization Discussion'''
* 5.4.0 release plan -&gt; December? https://github.com/minetest/minetest/milestone/17
** -&gt; Rough approximated date for release (after 6 months) 
* Roadmap - everyone list 3 goals for development (ie: Improve UI), this can then be condensed into a roadmap of goals.
** -&gt; https://github.com/minetest/minetest/issues/10461
* Add trusted contributors as issue triagers. https://github.com/orgs/minetest/teams/engine/discussions/25
** Suggested users: Wuzzy, Calinou.  Wuzzy was already offered core dev, but refused.
** They would help ensure issue quality (asking for information, editing, closing duplicated) and oragnise issues (labelling, prioritising)
** This doesn't prevent core developers from doing the above.
** celeron55 is willing to trial this, paramat is against this.
** -&gt; Krock, rubenwardy: Demo run with a few chosen people. Rules will be written down during this phase to ensure everything's going well. Needs discussion with paramat.

'''PR discussion/reviews'''
* Decide on a "use_texture_alpha" solution: https://github.com/minetest/minetest/issues/10342
** -&gt; sfan5 will take care of it
* &lt;s&gt;Adopt or modify anticheat fix: https://github.com/minetest/minetest/pull/10340&lt;/s&gt;
* Require debug priv to view gameplay-relevant debug info (2nd try), add wireframe priv  https://github.com/minetest/minetest/pull/9315
** Requested by GreenXenith
** -&gt; Will be reviewed...

'''MTG discussion/reviews'''

== 2020-08-01 ==

'''Organisation Discussion'''
* Theme of 5.4.0 (ie: what to focus on)
* New core developers
** New member invited
* Minimal/Devtest policy: https://github.com/minetest/minetest/issues/9645
** Wrote comment
* minetest-mods.github.io needs a library update - could there be any problems? volunteers?
** postpone, not so relevant

'''PR discussion/reviews'''
* HUD minimap: https://github.com/minetest/minetest/pull/9079
* HUD compass: https://github.com/minetest/minetest/pull/9312
* Relative ~coordinates: https://github.com/minetest/minetest/pull/9588
* LuaEntitySAO API: https://github.com/minetest/minetest/pull/9717
** Massive PR, but stalls. Needs clarification what to do
** Incompatible with the recent on_step moveresult changes
** Krock: Some API functions might be superfluous (not generic enough), check later again

'''MTG discussion/reviews'''
* Wall extension (trivial): https://github.com/minetest/minetest_game/pull/2237
* Craftguide: https://github.com/minetest/minetest_game/pull/2396


== 2020-06-06 ==

'''Organisation Discussion'''
* Allow or deny UTF-8 characters in the source code? [https://github.com/minetest/minetest/pull/9828 relevant PR]
** Many different encodings. Non-ASCII characters should be avoided http://irc.minetest.net/minetest-dev/2020-06-06#i_5698515
* Translations and minetest.conf.example need updating. Volunteers?
** Reminder. Will be done when feature freeze starts.
* Feature freeze date
** Bone rotation issues need to be fixed (or reverted)
** Freeze in 1 week: 13 Jun (2 weeks for bugfixes after)

'''PR discussion/reviews'''
* [https://github.com/minetest/minetest/pull/9914 POC: Introduce SerializeStream helper class]
** Split input/output stream and polish for a real PR.

'''Suspected issues'''
* [https://github.com/minetest/minetest/issues/9592 network desync]
** sfan5: http://irc.minetest.net/minetest-dev/2020-06-06#i_5698555 not important for release, networking limits
* Wireframe glitch (graphics related)
** Driver issue. Wait for AMD to fix their stuff


== 2020-03-07 ==

Most important first.

'''Organisation Discussion'''
* Release date for 5.2.0: March 14, if possible
* Open issues: https://github.com/minetest/minetest/issues?q=is%3Aissue+is%3Aopen+label%3ABlocker
** Sky fix: https://github.com/minetest/minetest/pull/9472
** Entity shader fix: (none yet)

'''PR discussion/reviews'''
* Delayed for 5.3.0: Android XXL PR https://github.com/minetest/minetest/pull/9066
** Fix dependencies in https://github.com/minetest/minetest_android_deps_binaries
** Startup crash needs fixing
** Build script works (sfan5)

'''MTG discussion/reviews'''
* Probably 5.3.0 or later: Craft guide: https://github.com/minetest/minetest_game/pull/2396
** Should this be added in 5.2 or not?


== 2020-01-11 ==

Arranged by: Krock

Most important first.

'''Organisation Discussion'''
* Looking for new Core Developer members
* What's missing for 5.1.1?

'''PR discussion/reviews'''
* Formspec text cursor feature https://github.com/minetest/minetest/pull/8665
* Scroll container https://github.com/minetest/minetest/pull/9101
* Images in tabs https://github.com/minetest/minetest/pull/8621

'''MTG discussion/reviews'''
* Craftguide from pauloue https://github.com/minetest/minetest_game/pull/2396


== 2019-08-10 ==

Arranged by: Krock

'''PR discussion/reviews'''

* Custom particle generators for particle spawners https://github.com/minetest/minetest/pull/6688
** Should this be closed?
* Fix debug.txt growing bigger and bigger https://github.com/minetest/minetest/pull/8382
** What to change? Or reject &amp; close?
* Punchwear https://github.com/minetest/minetest/pull/6804
** Who wants to adopt it? The feature was requested many times.
* Add support for set_formspec_prepend in main menu https://github.com/minetest/minetest/pull/8611
* Hide chat when console is open https://github.com/minetest/minetest/pull/8656


== 2019-06-29 ==

Arranged by: rubenwardy

Logs:  http://irc.minetest.net/minetest-dev/2019-06-29#i_5561978

'''Organisation discussion'''

* Is 5.0.2 needed for the newlines in setting name bug? (https://github.com/minetest/minetest/pull/8590)
** Yet no clear decision
* What is needed to have good mobs in Minetest (- Game)?
** I suggest roping in mob devs like tenplus1 and stujones1
** No blood included. Belongs to another mod
* Combine pathfinder issues into a single issue
** https://github.com/minetest/minetest/issues/8642
* Possible close issues/PRs: https://github.com/minetest/minetest/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc+label%3A%22Possible+close%22
* Does 1 disapproval block a PR?
** SmallJoker seems to think it does

'''Proposed order of merging formspec PRs'''

The idea is to merge the most important PR first (top of list) to not drown in conflicts:
'''https://github.com/minetest/minetest/projects/6'''

* style[] https://github.com/minetest/minetest/pull/8383
* scroll_container[] https://github.com/minetest/minetest/pull/8591
* list spacing https://github.com/minetest/minetest/pull/7971 (perhaps integrate into style[]?)
* Unarelith's refactors

== 2018-July-August ==
Arranged by: Krock

'''Organisation discussion'''

* Will there be a 0.4.18 release?
** http://irc.minetest.net/minetest-dev/2018-07-14#i_5358759 - sounds like a definitive "no"?
* Specify a rough 5.0.0 release date (month, year)
** Freeze for multiple weeks for testing &amp; fixing
* Forums: Clarify which rules (amongst license) apply for WIP modpacks/mods/games
** https://forum.minetest.net/viewtopic.php?t=20630

'''PR discussion/reviews'''

* Colorize command parameters and privilege names (https://github.com/minetest/minetest/pull/7019)
** Improves readability - does it need `string.format` for a possibly prettier code?
* Protocol cleanups https://github.com/minetest/minetest/pull/7348
** Review needed (compat break)

== 2018-06-?? ==
Arranged by: Krock

'''Organisation discussion'''

* Will there be a 0.4.18 release?
* Bugfixing the bugfix release
** https://github.com/minetest/minetest/commit/014a1a08 fix for https://github.com/minetest/minetest/issues/6092
** https://github.com/minetest/minetest/commit/a1598e1b (c_internal.cpp only) fix for https://github.com/minetest/minetest/issues/7419
* Proposal: change master version scheme to: 5.0.0

'''PR discussion/reviews'''

* Colorize command parameters and privilege names (https://github.com/minetest/minetest/pull/7019)
** Improves readability - does it need `string.format` for a possibly prettier code?
* Lua parameter reading https://github.com/minetest/minetest/pull/7410
** Good design concept? Comments?
* Protocol cleanups https://github.com/minetest/minetest/pull/7348
** Review needed (compat break)
* CSM keypress - is this advantage acceptable? https://github.com/minetest/minetest/pull/7008
** Needs flavors to be added: http://irc.minetest.net/minetest-dev/2018-06-11#i_5329651

== 2018-05-19 ==
Arranged by: Krock

Proposed time: 18:00 UTC

'''Organisation discussion'''

* 0.4.17 - backport missing fixes and set date for freeze
** ~Android-specific fix for https://pastebin.com/j4mjniaq must be added too (during freeze?)~
** Needs buildbot fixes (404 packages)
** Backport https://github.com/minetest/minetest/commit/4bb41a19d (http://irc.minetest.net/minetest-dev/2018-05-19#i_5310266)
* 0.4.17 - set release date

'''PR discussion/reviews'''

* Colorize command parameters and privilege names (https://github.com/minetest/minetest/pull/7019)
** Improves readability - does it need `string.format` for a possibly prettier code?
* Fix missing ignore textures (https://github.com/minetest/minetest/pull/7326)
** Needs more dev opinions &amp; reviewing

== 2018-05-05 ==
Arranged by: Krock

It's now almost a month since the last meeting - it time for the next one.
Proposed time: 18:00 UTC

'''Organisation discussion'''

* When do we have time to release 0.4.17?
** Still unclear freeze and release dates. 1 MTE needs backporting first
* Whether to leave the issue number link in a commit message when merging on Github
** MTE: Keep the numbers if they're inserted automatically (high PR count, helpful for the web interface blame or fast jumps in commits)
** MTG: The numbers may be removed if wanted (small amount of PRs)
** http://irc.minetest.net/minetest-dev/2018-05-05#i_5298887

'''PR discussion/reviews'''

* Colorize command parameters and privilege names (https://github.com/minetest/minetest/pull/7019)
** Improves readability - does it need `string.format` for a possibly prettier code?
* Abort when trying to set a not registered node (https://github.com/minetest/minetest/pull/7011)
** Needs more dev opinions &amp; reviewing

== 2018-04-07 ==
Arranged by: Krock

'''Organisation discussion'''

* Questions related to 0.4.17, 0.4.18 or future development?
* 0.4.17 release should be moved to 21/22 April for backports (http://irc.minetest.net/minetest-dev/2018-04-07#i_5272834)
** Feature/backport freeze after 14 April to have enough time for testing

'''PR discussion/review'''

* Android joystick (https://github.com/minetest/minetest/pull/7126)
* Formspecs: Add a &lt;use_color_alpha&gt; parameter to the box[] element (https://github.com/minetest/minetest/pull/7116)
** Causes errors in-game for older clients but doesn't affect playability - merge or not? 
* Colorize command parameters and privilege names (https://github.com/minetest/minetest/pull/7019)
** Improves readability - does it need `string.format` for a possibly prettier code?

'''MTG discussion/reviews'''

* Tools: rebalance (https://github.com/minetest/minetest_game/issues/1681)
** Needs either a levelling system and/or special abilities for different materials to add variety
** paramat suggests removing bronze, which is incorrectly a stronger tool than steel (http://irc.minetest.net/minetest-dev/2018-04-07#i_5272959)
** Future mese concept: http://irc.minetest.net/minetest-dev/2018-04-07#i_5273013

== 2018-03-31 ==
Arranged by: Krock

'''PR discussion/reviews'''

* Introduce clang-tidy to the CI (https://github.com/minetest/minetest/pull/6295)
* Android joystick (https://github.com/minetest/minetest/pull/7126)
** Minor change requests, discussion about joystick placement

'''0.4.17 release schedule'''

* Definitive release date
** Announced. 15 April 2018, see https://forum.minetest.net/viewtopic.php?f=18&amp;t=19905
* Any new, important bugfixes to backport?
** Added the `core.rotate_node` bugfix, otherwise probably not. It's pretty much stable.
* Volunteer for cherry-picking the ToDo backport commits (https://github.com/minetest/minetest/pull/6746)
** `&lt;sfan5&gt; probably me` (http://irc.minetest.net/minetest-dev/2018-03-31#i_5264276)

== 2018-03-10 ==
Arranged by: Krock

'''Organisation discussion'''

* New Doxygen rule
** Log: http://irc.minetest.net/minetest-dev/2018-03-10#i_5249578
** Opposed: paramat, sfan5, SmallJoker, Shara
** Comments in the functions directly are more welcome
* Group issues in projects?
** Log: http://irc.minetest.net/minetest-dev/2018-03-10#i_5249600
** Purpose is unclear and questionable due missing information, needs to be discussed later again

'''PR discussion/reviews'''

* Remove texture pack caching (https://github.com/minetest/minetest/pull/6660)
* Don’t create CSM script env (https://github.com/minetest/minetest/pull/6951)
** Log: http://irc.minetest.net/minetest-dev/2018-03-10#i_5249625
** Needs improvement, questionable solution due request of server-provided CSM (https://github.com/minetest/minetest/issues/5393)
* “Bugfix” for 0.4-backported rotate_node calls (https://github.com/minetest/minetest/pull/6900)
** SmallJoker will test again and possibly merge after success
* Android C++11 build fix (https://github.com/minetest/minetest/pull/6796)
** Log: http://irc.minetest.net/minetest-dev/2018-03-10#i_5249684
** sfan5 and nerzhul will try to test it soon. It does not break the regular setup, so a merge is to expect soon
** Confirmed working by Wayward_One (http://irc.minetest.net/minetest-dev/2018-03-10#i_5249720)
* Autogenerated settings header (https://github.com/minetest/minetest/pull/6728)
** Log: http://irc.minetest.net/minetest-dev/2018-03-10#i_5249703 (stub)
** Needs attention

'''0.4.17 release schedule'''

* Definitive release date
** absent nerzhul: “release 0.4.17 ASAP” (http://irc.minetest.net/minetest-dev/2018-03-10#i_5249422)
* Are there any new, important bugfixes to backport?
* Volunteer for cherry-picking the 6 TODO (+ ^ from above) commits (https://github.com/minetest/minetest/pull/6746)
[[Category:Organisation]]

== 2017-05-20 ==

  &lt;nowiki&gt;Minetest developer meeting 2017-05-20

Last chance to merge/improve the remaining PR before feature freeze:

Old business:
 * Additional hooks for inventory manipulations callbacks (#4035)
   * Krock was working on it (#5647), but had an issue with a mysterious crash bug.  Progress?
 * Timed move (#1489)
   * Merge/close?
   * nerzhul: close for me
   * nore: Merge
   * Krock: Merge
 * Split block position in SQLite3 database (and use R*Tree) (#1845)
   * Rebased, performance tests to do soon(tm).
   * nerzhul: performance is a little bit slower, but it's ridiculous compared to mapblock
    deserialization part (no bench to show it atm, but i did it 2 years ago on my fork, and SQLite was improved since this date)
 * Add list_predict formspec element (#1988)
   * sofar worked on a rebase a while ago.  Close or merge a modern version?
 * New screenshots for website (web#78)  https://github.com/minetest/minetest.github.io/issues/78
   * ShadowNinja: "good" screenshots are fairly subjective and it doesn't look like we're actually
    getting anywhere near a decision in the issue thread, therefore I propose assigning someone to choose and install new screenshots.
   * &gt; Calinou will handle it


New business:
 * First, release blockers:
 * https://github.com/minetest/minetest/pull/5767 Don't add damage flash while punch texture modifier is active #5767
   * &gt; Bugfix, punted to next meeting.
 * https://github.com/minetest/minetest/issues/5782 [CSM] Disable preview mod before release #5782
   * CSM disabled by default anyways since it's experimental
   * &gt; Fixed by #5554
 * https://github.com/minetest/minetest/issues/5728 Block instadig after tool switch #5728
   * &gt; Fixed by #5785
 * nerzhul:
 * https://github.com/minetest/minetest/pull/5732 (CSM nodedefs/itemdefs read)
 * maybe close https://github.com/minetest/minetest/pull/5654
 * Single/Multiplayer tab merge https://github.com/minetest/minetest/pull/5627 (user UI experience)
   * &gt; Merge with minor changes
 * Create world better experience: https://github.com/minetest/minetest/pull/5589
 * Permit to enable/disable mods on CSM  https://github.com/minetest/minetest/pull/5554 (very important)
   * ShadowNina: CSM is experimental, so I don't think any CSM issues should be blockers
     * nerzhul: here the problem if a user enable client side modding his experience will be affected by this preview mod, dedicated to modders)
   * &gt; nerzhul will merge
 * https://github.com/minetest/minetest/pull/5589 (start world after creation)
 * LMDB backend (https://github.com/minetest/minetest/pull/4206)
   * nerzhul: Close? We already have 5 backends to maintain and we already cover all the usecases (client usage, performance usage, reliability usage)

&lt;/nowiki&gt;

== 2017-05-13 ==

  &lt;nowiki&gt;Minetest developer meeting 2017-05-13

Old business:
 * Additional hooks for inventory manipulations callbacks (#4035)
   * Krock was working on it (#5647), but had an issue with a mysterious crash bug.
   * &gt; No progress
 * Timed move (#1489)
   * Merge/close?
   * &gt; nerzhul: close for me
   * &gt; nore: Merge
   * &gt; Krock: Merge
 * Split block position in SQLite3 database (and use R*Tree) (#1845)
   * Rebased, performance tests to do soon(tm).
   * nerzhul: performance is a little bit slower, but it's ridiculous compared to mapblock deserialization part (no bench to show it atm, but i did it 2 years ago on my fork, and SQLite was improved since this date)
 * Add list_predict formspec element (#1988)
   * sofar worked on a rebase a while ago.  Close or merge a modern version?


New business:
 * New screenshots for website (web#78)  https://github.com/minetest/minetest.github.io/issues/78
   * ShadowNinja: "good" screenshots are fairly subjective and it doesn't look like we're actually getting anywhere near a decision in the issue thread, therefore I propose assigning someone to choose and install new screenshots.
 * Fix 'alpha' property for liquid nodes (#5494)
   * &gt; paramat testing.
 * CSM: Fix undocumented API calls (#5756)



nerzhul: please look at recent PR for this meeting. Feature Freeze is in 8 days
Here is a list to look at:
 * https://github.com/minetest/minetest/pull/5746 (cleanup content_mapblock)
 * https://github.com/minetest/minetest/pull/5732 (CSM nodedefs/itemdefs read)
 * maybe close https://github.com/minetest/minetest/pull/5654
 * Single/Multiplayer tab merge https://github.com/minetest/minetest/pull/5627 (user UI experience)
 * Create world better experience: https://github.com/minetest/minetest/pull/5589
 * Permit to enable/disable mods on CSM  https://github.com/minetest/minetest/pull/5554 (very important)
&lt;/nowiki&gt;

== 2017-05-06 ==

 &lt;nowiki&gt;Minetest developer meeting 2017-05-06

Old business:
    "Add configurable key bindings" (#1439)
        Rebased by nore, needs tweaks and merge.
    Additional hooks for inventory manipulations callbacks (#4035)
        Krock is working on it, progress?
    Timed move (#1489)
        Merge/close?
    nerzhul: close for me
    Use a settings object for the main settings (#1949)
        Rebased, should be merged soon.
    Split block position in SQLite3 database (and use R*Tree) (#1845)
        Rebased, performance tests to do soon(tm).
        nerzhul: performance is a little bit slower, but it's ridiculous compared to mapblock deserialization part
      (no bench to show it atm, but i did it 2 years ago on my fork, and SQLite was improved since this date)
    Add list_predict formspec element (#1988)
        sofar worked on a rebase a while ago.  Close or merge a modern version?
    Use object property "stepheight" for player stepheight too. (#2056)
        Agreed to merge, but nobody yet assigned.
    Make players respect makes_footstep_sound in the object properties (#2852)
        Agreed to merge, nobody assigned.

New business:
    Add support for multiple listen addresses (#2604)
        Big patch, but can't really be split up much more since everything's interdependent.
    Make the player collisionbox settable (#2738)
    Clean up numeric.h and split FaceFositionCache from it (#3256)
        Up-to-date and looks more-or-less ready to merge, just needs formal approval.
    &lt;nerzhul&gt;:
        https://github.com/minetest/minetest/pull/5361 Background color on textarea/field/pwdfield)
        https://github.com/minetest/minetest/pull/5355: vertical bar in text areas
        Possible close: https://github.com/minetest/minetest/pull/5281 and https://github.com/minetest/minetest/pull/5279
        Documentation update: https://github.com/minetest/minetest/pull/4968 close or not close ?

For future meeting:
    If finished: https://github.com/minetest/minetest/pull/5544 (on_item_use CSM)
&lt;/nowiki&gt;

== 2017-04-29 ==

Arranged by: paramat

ShadowNinja is unavailable today, paramat will be hosting in his stead.

'''Old business''': (Things mentioned at previous meetings that haven't yet been resolved)

* "Add configurable key bindings" (#1439)
** Rebased by nore, needs tweaks and merge.
* Additional hooks for inventory manipulations callbacks (#4035)
** Krock is working on it, progress?
* Minetest subgame meeting
** paramat held one at 1900Z
* Timed move (#1489)
** Merge/close?
* Use a settings object for the main settings (#1949)
** Rebased, should be merged soon.
* Split block position in SQLite3 database (and use R*Tree) (#1845)
** Rebased, performance tests to do soon(tm).
** nerzhul: performance is a little bit slower, but it's ridiculous compared to mapblock deserialization part (no bench to show it atm, but i did it 2 years ago on my fork, and SQLite was improved since this date)
* Add list_predict formspec element (#1988)
** sofar worked on a rebase a while ago.  Close or merge a modern version?

'''New business:''' (mainly oldest or least recently updated PRs that haven't been handled yet)

* Added formspec element 'KeyEventBox' for charbased input by ninnghazad (#1737)
** Closed: better done with client-side mods.
* Use object property "stepheight" for player stepheight too. (#2056)
** Agreed to merge, but nobody assigned.
* Add mapgen settings to create world dialog by srifqi (#2561)
** Merge, but needs changes.

== 2017-04-22 ==

 &lt;nowiki&gt;
Minetest developer meeting 2017-04-22

Old business:
    "getTime refactoring" (#1188) not yet merged (nore)
    "Delayed shutdown" merged by nerzhul.
    "Disable Android LevelDB" rebased by nore and merged by nerzhul.
    "Add configurable key bindings" (#1439) rebased by nore, needs tweaks and merge.
    Additional hooks for inventory manipulations callbacks (#4035)
        Needs rebase and cleanup, volunteers?
    Rename .txt to .md (#5451)?

New business:  (PRs obtained by sorting by age on GitHub)
    Schedule Minetest subgame meeting?
    Coverity: https://scan.coverity.com/projects/12441
        Need to triage issues, many legitimate issues to fix.
    Timed move (#1489)
    Added formspec element 'KeyEventBox' for charbased input (#1737)
    Add ability to escape commands with a back-slash (#1768)
        &lt;ShadowNinja&gt; I may want to tweak this so that it doesn't strip the slash when you type "\foo" (or maybe not?
     It should at least work for the client-side dot-commands too)
    Split block position in SQLite3 database (and use R*Tree) (#1845)
    Use a settings object for the main settings (#1949)
        &lt;ShadowNinja&gt; I also unified Initialize and InitiallizeAsync, which was necessary to implement this.
        I think the unification is worth merging even without the settings object change.  This conflicts with just about
        the entire ScriptAPI, so I don't want to rebase it too often :-)
    Add listpredict to the formspec (#1988)
    Add non-global mod namespaces (#2039)

&lt;/nowiki&gt;


= Template =

Add your points here. Most important comes first.

'''Organization Discussion'''

* ...

'''PR discussion/reviews'''

* ...

Also consider:

* [https://github.com/minetest/minetest/pulls?q=is%3Aopen+is%3Apr+label%3A%22One+approval%22 "One Approval" PRs] and decide on whether to merge, request changes or close.
* [https://github.com/minetest/minetest/pulls?q=is%3Aopen+is%3Apr+label%3A%22Roadmap%3A+Needs+approval%22 "Roadmap: needs approval" PRs]</text>
      <sha1>c5nzukcqgblfbo96vpe9f3g4wvjuc13</sha1>
    </revision>
  </page>
  <page>
    <title>Merging core pull requests to upstream</title>
    <ns>0</ns>
    <id>580</id>
    <revision>
      <id>6192</id>
      <parentid>5609</parentid>
      <timestamp>2022-09-24T16:08:05Z</timestamp>
      <contributor>
        <username>Celeron55</username>
        <id>8</id>
      </contributor>
      <origin>6192</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2175" sha1="hmt992wncrgwes8l3z5ohtpx0csmj55" xml:space="preserve">This page contains '''technical guidelines''' for core developers when deciding whether to merge a pull request.

For determining who is allowed to do what, see [[Organisation]].

For guidelines and rules on Git and Github, see [[Git Guidelines]].

Also see:
* https://github.com/minetest/minetest/blob/master/.github/CONTRIBUTING.md
* https://github.com/minetest/minetest/blob/master/doc/direction.md

== Requirements ==

There are five major requirements that each pull request must fullfill in order to be mergeable to upstream Minetest.

# It should follow a roadmap in some way, to make sure it fits the whole picture of the project. Different roadmaps and project guidance is managed in https://github.com/minetest/minetest/blob/master/doc/direction.md. A core dev can decide to review and merge something that doesn't follow direction.md if they consider it to be beneficial to the project.
# It must work in the first place. Compile it and test it in game, or write mod code that uses it.
# The code style must be correct. http://dev.minetest.net/Code_style_guidelines
# The internal interfaces of the code must be good, and it should be reasonably optimized, depending on how often the code is called.
# The protocols and formats that it uses must be well designed, including the required compatibility in the part in question. On-disk formats are extremely important to get right. Modding API concerns are split between this and req2. This is about knowing the engine's design along with its pitfalls.

...which can be checked by:

# Anyone.
# Anyone, or at least any modder.
# Those with a bit of general C++ and Lua knowledge.
# Those with a lot of general C++ and Lua knowledge.
# Those who have studied the file formats, the protocol and the Lua API, and know how version compatibility can be reliably done.

== How can this help? ==

I (celeron55) am interested in seeing whether we could end up in a situation
where pull requests would get comments like "req 1, 2 and 3 checked.", after which
someone could do the rest and ultimately anyone could merge it based on these
simple comments, after each of the five requirements have been checked.
[[Category:Git]]</text>
      <sha1>hmt992wncrgwes8l3z5ohtpx0csmj55</sha1>
    </revision>
  </page>
  <page>
    <title>MetaDataRef</title>
    <ns>0</ns>
    <id>906</id>
    <revision>
      <id>6242</id>
      <parentid>5122</parentid>
      <timestamp>2022-10-25T14:06:29Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6242</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4840" sha1="bvryvnzjhv44dye8eaa3algv8e6qdf3" xml:space="preserve">{{UnofficialLua}}

See [https://minetest.gitlab.io/minetest/class-reference/#metadataref MetaDataRef] and [https://minetest.gitlab.io/minetest/metadata/ Metadata] in the Lua API documentation.

'''Warning''' all metadata is sent to client, don't store sensitive stuff here.

== Example ==
This adds a chatcommand, that opens a formspecs in that you can change the color and name of an item, if you havethe rename priv.
&lt;source&gt;
minetest.register_privilege("rename", {
	description = "Can rename Items and Nodes",
	give_to_singleplayer = false
})

minetest.register_chatcommand("rename", {
    func = function(name, param)
        minetest.show_formspec(name, "rename:renameform",
                "size[4,4.5]" ..
                "label[0,0;rename]" ..
                "field[1,1.5;3,1;name;New Node/Item name;]" ..
								"field[1,2.5;3,1;color;New Color;]" ..
                "button_exit[1,3;2,1;exit;Rename Now!]")
    end
})


minetest.register_on_player_receive_fields(function(player,
        formname, fields)
    if formname ~= "rename:renameform" then

        return false
    end

    local has, missing = minetest.check_player_privs(player:get_player_name(), {
            rename = true})

    if has then
      local itemstack = player:get_wielded_item()
      local meta = itemstack:get_meta()
      meta:set_string("description", fields.name)
			meta:set_string("color", fields.color)
      player:set_wielded_item(itemstack)

      return true
    else
        minetest.chat_send_player(player:get_player_name(), "You have no privilige to rename things :( ")
    end
&lt;/source&gt;
&lt;source&gt;
local meta = minetest.get_meta(pos)
meta:set_string("formspec",
        "invsize[8,9;]"..
        "list[context;main;0,0;8,4;]"..
        "list[current_player;main;0,5;8,4;]")
meta:set_string("infotext", "Chest");
local inv = meta:[NodeMetaRef]get_inventory()
inv:set_size("main", 8*4)
print(dump(meta:[NodeMetaRef]to_table()))
meta:from_table({
    inventory = {
        main = {
[1] = "default:dirt",
[2] = "",
[3] = "",
[4] = "",
[5] = "",
[6] = "",
[7] = "",
[8] = "",
[9] = "",
[10] = "",
[11] = "",
[12] = "",
[13] = "",
[14] = "default:cobble",
[15] = "",
[16] = "",
[17] = "",
[18] = "",
[19] = "",
[20] = "default:cobble",
[21] = "",
[22] = "",
[23] = "",
[24] = "",
[25] = "",
[26] = "",
[27] = "",
[28] = "",
[29] = "",
[30] = "",
[31] = "",
[32] = ""}
    },
    fields = {
        formspec = "invsize[8,9;]list[context;main;0,0;8,4;]list[current_player;main;0,5;8,4;]",
        infotext = "Chest"
    }
})
&lt;/source&gt;

== An excerpt from an e-mail between Minetest developers ==
&lt;pre&gt;
&gt; When I attach a Lua table to a node I seem to have a
&gt; choice: to store things with many calls to
&gt; meta.set_int/meta.set_string etc. or via meta:from_table.
&gt; meta:from_table lets me store an arbitrary table under "fields":
&gt; 
&gt; local meta = minetest.get_meta(pos)
&gt; local mt = meta:to_table()
&gt; 
&gt; len = tonumber(mt.fields.length_remaining)
&gt; 
&gt; ... only I have noticed that every key under fields can only store
&gt; strings. So as a general purpose 'table' store, this is not so useful.
&gt; I came upon this because I wanted to store the initial position of a
&gt; node. This requires either:
&gt; 
&gt; meta:set_int('x', pos.x)
&gt; meta:set_int('y', pos.y)
&gt; meta:set_int('z', pos.z)
&gt; 
&gt; or something like:
&gt; 
&gt; mt.fields.tail_pos = "return {" .. pos.x .. "," .. pos.y .. "," .. pos.z .. "}"
&gt; 
&gt; and then something like this to read it back:
&gt; tail_pos = loadstring(mt.fields.tail_pos)()
&gt; 
&gt; 
&gt; ...correct? Or am I missing an obvious alternate solution? The api
&gt; docs are not detailed on this.

Answer by celeron55:

For simplicity, all the fields are internally strings, and don't store
any type information. I can see the inconvenience though.

You shouldn't use loadstring() directly, because then somebody could
create a world which stores arbitrary Lua code, which can eg. remove
all files, or something similar.

For storing Lua variables with type information, you can use
minetest.serialize() and minetest.deserialize(). They take any
serializable Lua table, which can contain:
- tables
- strings
- numbers
- functions that don't access anything outside of what is stored in
  the data itself and what is passed as a parameter))
and make it into a string, and the other way around, and they
will not execute any foreign code (unless you do certain
complicated-ish stupid things, which probably won't happen).

You can check out the implementation in builtin/serialize.lua.

So if you want to store a position in the data of a node, you can use:
  local pos = {x=this, y=and, z=that}
  meta:set_string("tail_pos", minetest.serialize(pos))
and
  local pos = minetest.deserialize(meta:get_string("tail_pos")).

Keep in mind though that that thing isn't very largely in use, and
there might be unnoticed problems.
&lt;/pre&gt;

[[Category:Objects]]</text>
      <sha1>bvryvnzjhv44dye8eaa3algv8e6qdf3</sha1>
    </revision>
  </page>
  <page>
    <title>Minetest Game development</title>
    <ns>0</ns>
    <id>596</id>
    <revision>
      <id>6053</id>
      <parentid>6052</parentid>
      <timestamp>2022-05-24T11:53:42Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <minor/>
      <comment>Shorten inclusion section</comment>
      <origin>6053</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1937" sha1="bq7wljye1iel6wluwwi29lfck9ic0e1" xml:space="preserve">This page describes the values of Minetest Game. These may be changed when the majority of MTG developers agree.

== Core Gameplay Values ==
* '''Exploration''' - interesting mapgen/biomes
* '''Creativity''' - enough nodes without contradicting semi-minimalism
* '''Immersion''' - adding feedback such as sounds, mobs, and interactivity to make the world feel alive

== Criteria for inclusion ==
As of May 2022, only bugfixes and basic maintenance stuff are accepted. See the [[#Development]] section.

=== Old criteria (before maintenance mode) ===
* '''Balance''' - Ensure balanced gameplay while still adding new and useful items/nodes/etc
* '''Semi-minimalism''' - No additions that are decided to be too much (e.g. adding homedecor in its entirety)
* '''Stability''' - Focus on stability and completeness (no half-finished stuff)
* '''Extendability''' - Improve/add API to allow mods to extend the base features (e.g. API for new crops for &lt;i&gt;farming&lt;/i&gt;)

== Basic Concepts ==
* '''Medieval''' - Minetest Game is generally agreed to be late-medieval
* '''Alien''' - Mese is an alien crystal / meteorite

== Graphic Style ==
* All nodes should fit the voxel grid or a sub division. Note this is a general rule, there are cases when it's OK such as [https://github.com/minetest/minetest_game/pull/793 chests]
* Entities should be voxel-ish
* Textures should be 16x16

== Development ==
As of May 2022, Minetest Game is in "maintenance mode" since July 2020. This means no new features are accepted, only bugfixes and basic maintenance. Translations count as maintenance and are thus accepted. Source: [https://forum.minetest.net/viewtopic.php?f=18&amp;t=25152]

See also [[Git]] and [[Git Guidelines]].

'''Note:''' To prevent problems with the development like before Minetest Game is maintained by only eight people (sfan5, nore, ShadowNinja, paramat, sofar, rubenwardy, Krock/SmallJoker, Shara/Ezhh).
[[Category:Rules and Guidelines]]</text>
      <sha1>bq7wljye1iel6wluwwi29lfck9ic0e1</sha1>
    </revision>
  </page>
  <page>
    <title>Minetest Schematic File Format</title>
    <ns>0</ns>
    <id>876</id>
    <revision>
      <id>6376</id>
      <parentid>6285</parentid>
      <timestamp>2023-05-01T11:18:09Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <comment>lua_api.txt -&gt; lua_api.md</comment>
      <origin>6376</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4936" sha1="1hkfs64okw35lluwk17c7tll2ywi304" xml:space="preserve">The '''Minetest Schematic File Format''' if the file format used when schematics are seralized by e.g. minetest.create_schematic. Schematic files are supposed to have “.mts” as a file name suffix. This document describes the MTS format native to Minetest.
== Informal definition ==
Warning: This definition has not been proofread yet! Don't rely on it 100% yet.

=== Overview ===
An MTS file has 3 sections, in this order:

* Header
* Name ID Table
* Node Definitions Section

All values are stored in ''big endian'' format.

=== Header ===

&lt;pre&gt;
| Offset  | Length | Description                              |
|---------|--------|------------------------------------------|
|       0 |      4 | magic number, ASCII letters "MTSM"       |
|       4 |      2 | file format version, currently 4         |
|       6 |      2 | size X                                   |
|       8 |      2 | size Y                                   |
|      10 |      2 | size Z                                   |
|      12 |      Y | layer probability values                 |
|    12+Y |      2 | number of strings in Name ID Table       |
&lt;/pre&gt;

Layer probability values: This is a sequence of unsigned 8-bit numbers (0-255) for each Y layer. Each Y layer has a chance of appearing with the given probability. The probability ranges from 0 to 127, with 0 meaning 0% probability and 127 meaning 100% probability. Bit 7 is reserved and must be 0, meaning that values greater than 127 should be avoided.

The header is followed by the Name ID Table, which is followed by the Node Definitons section.

=== Name ID Table ===

For each string, the following record format repeats:

&lt;pre&gt;
| Offset | Length | Description              |
|--------|--------|--------------------------|
|      0 |      2 | length of the string (N) |
|      2 |      N | string, node itemstring  |
&lt;/pre&gt;

The node IDs in the next section reference these.

=== Node Definitons Section ===

This part of the file is zlib compressed, with the deflate algorithm using gz header bytes
[http://tools.ietf.org/html/rfc1950 RFC 1950], but not with the gzip header which has magic bytes too. After uncompressing,
the format is as follows:

&lt;pre&gt;
| Offset  | Length     | Description                              |
|---------|------------|------------------------------------------|
|       0 | 2*X*Y*Z    | node IDs (param0)                        |
| 2*X*Y*Z | X*Y*Z      | probability values (param1)              |
| 3*X*Y*Z | X*Y*Z      | param2                                   |
&lt;/pre&gt;

To get the node ID from &lt;code&gt;param0&lt;/code&gt; for a given coordinate (x,y,z), you should calculate the index &lt;code&gt;param0[(Z-z)*Z*Y + y*X + x]&lt;/code&gt;.
That's right, the Z axis is mirrored.

Each node ID is stored on a big endian 2 bytes. Orientation is '''not''' defined in any way, there's absolutely no convention.

Probability values in &lt;code&gt;param1&lt;/code&gt; are encoded in unsigned 8 bits. They are indexed the same way as node IDs. Probability ranges from 0 (0%) to 127 (100%). Bit 7 means force node placement, i.e. the node will be able to replace non-air nodes as well.
(In legacy version 3, &lt;code&gt;param1&lt;/code&gt;'s probability range was from 0 to 0xFF, there's no force placement.)

&lt;code&gt;param2&lt;/code&gt; is an 8-bit value (0-255), the meaning depends on the node definition. See &lt;code&gt;lua_api.md&lt;/code&gt; to learn more about &lt;code&gt;param2&lt;/code&gt; (keywords: “param2”, “paramtype2”).

== Official definition ==
The official definition of version 4 of this file format follows and has been copied from [https://github.com/minetest/minetest/blob/5.1.0/src/mapgen/mg_schematic.h /src/mapgen/mg_schematic.h] in the Minetest 5.1.0 source code.

&lt;pre&gt;
All values are stored in big-endian byte order.
[u32] signature: 'MTSM'
[u16] version: 4
[u16] size X
[u16] size Y
[u16] size Z
For each Y:
	[u8] slice probability value
[Name-ID table] Name ID Mapping Table
	[u16] name-id count
	For each name-id mapping:
		[u16] name length
		[u8[]] name
ZLib deflated {
For each node in schematic:  (for z, y, x)
	[u16] content
For each node in schematic:
	[u8] param1
	  bit 0-6: probability
	  bit 7:   specific node force placement
For each node in schematic:
	[u8] param2
}
&lt;/pre&gt;

* Source code 5.1.0: [https://github.com/minetest/minetest/blob/5.1.0/src/mapgen/mg_schematic.h /src/mapgen/mg_schematic.h]
* Source code bleeding edge: [https://github.com/minetest/minetest/blob/master/src/mapgen/mg_schematic.h /src/mapgen/mg_schematic.h]

== Version changes ==
As of Minetest 5.1.0, the current version of the MTS file format is 4.

* 1—Initial version
* 2—Fixed messy never/always place; the probability of &lt;code&gt;0&lt;/code&gt; is now never, and &lt;code&gt;0xFF&lt;/code&gt; is always
* 3—Added y-slice probabilities; this allows for variable height structures
* 4—Compressed range of node occurence probability, added per-node force placement bit (used since 0.4.16 or earlier)

[[Category:Core Engine]]</text>
      <sha1>1hkfs64okw35lluwk17c7tll2ywi304</sha1>
    </revision>
  </page>
  <page>
    <title>Mod interoperability</title>
    <ns>0</ns>
    <id>843</id>
    <revision>
      <id>6379</id>
      <parentid>6262</parentid>
      <timestamp>2023-05-01T11:19:41Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <comment>lua_api.txt -&gt; lua_api.md</comment>
      <origin>6379</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="16888" sha1="2hldh60lo4vwtbpomuul7hzrp6mdasb" xml:space="preserve">{{LuaTips}}
This page is aimed towards modders and lists a couple of mods and conventions which are known in the community.

The main goal is to improve interoperability between mods and reduce code duplication. Often it is better to use existing APIs rather than trying to reinvent the wheel to reduce code duplication, redundancy and overall chaos. Of course, deciding to not use existing APIs may still be a viable choice if they do not suit your needs.

This page will be a permanent work of progress since there are many different mods out there.

== Mods ==
One way to ensure interoperability is to know what other mods exist out there. This section will show you mods which you can use to achieve a particular task or point you to mods which might need some “special treatment” for maximum interoperability.

=== Basics ===
This section is about mods and practices which apply to almost every mod.

==== Player physics ====
Using &lt;code&gt;set_physics_override&lt;/code&gt; to change player physical attributes is potentially dangerous! This is because it always sets the raw value of e.g. player speed, thus destroying any previous changes made by other mods. This is poison for any attempt at mod interoperability and an open invitation to race conditions and lots of other potential bugs. So please be very cautions before you use &lt;code&gt;set_physics_override&lt;/code&gt;. You should take other mods into account.

There's a mod that solves the problem of interoperability:

* [https://content.minetest.net/packages/Wuzzy/playerphysics/ Player Physics API] [playerphysics]: Lightweight API to modify player physics without interference. Setting the attributes directly is banned in this mod, instead mods can add and remove factors to speed, gravity and jump strength. The final physical attribute will be the product of all factors.

Note the idea of this mod requires that ALL mods use it. If even just one mod (except [playerphysics], of course) uses &lt;code&gt;set_physics_override&lt;/code&gt; directly, interoperability is destroyed.

For further discussion of the problem with &lt;code&gt;set_physics_override&lt;/code&gt;, see [[Player physics]].

==== Internationalization ====
Since version 5.0.0, the preferred way to make mods and games translatable is with help of the Lua API with &lt;code&gt;minetest.get_translator&lt;/code&gt;. No additional mod is required. Refer to &lt;code&gt;lua_api.md&lt;/code&gt; or [https://rubenwardy.com/minetest_modding_book/en/quality/translations.html the modding book chapter on translation] to learn how it works.

==== Help ====
”Help” refers to any form of in-game help, explanations or other things which aim to aid the player in understanding the game.

===== Help modpack =====
The [https://forum.minetest.net/viewtopic.php?f=9&amp;t=15912 Help] modpack is a sophisticated in-game help system. It allows you to write help texts for almost everything; it could be used to document items, mods or even an entire game, entirely within the game only.

The following Help mods are relevant for modding:

* [https://forum.minetest.net/viewtopic.php?f=9&amp;t=15912 Item Help] [doc_items]: Allows you to add long item explanations, an usage help and automatically generated help texts for items
* [https://forum.minetest.net/viewtopic.php?f=9&amp;t=15912 Lookup Tool] [doc_identifier]: The lookup tool opens up the appropriate help entry on almost everything it punches. It almost works out of the box, but manual intervention from the modder is required for any custom entity
* [https://forum.minetest.net/viewtopic.php?f=9&amp;t=15912 Documentation System] [doc]: Low-level core API (for advanced users). Allows you to add your own entries and even entire help categories from scratch. Also has many utility functions

To get started with this modpack quickly, there's an example mod to demonstrate how to use these mods: [http://repo.or.cz/minetest_doc_example.git doc_example]

=== General gameplay ===
==== Status effects ====
If you want to add temporary or permanent status effects for players (such as poisoning), you can use this:

* [https://forum.minetest.net/viewtopic.php?f=11&amp;t=9689 Player Effects] [playereffects]
* [https://forum.minetest.net/viewtopic.php?f=11&amp;t=14895 Player Monoids] [player_monoids]

==== RPG-like elements ====
This includes things usually found in RPGs (role-playing games) like stats, leveling up, experience points, quests, etc.

* [https://forum.minetest.net/viewtopic.php?f=11&amp;t=11154 Mana] [mana]: Adds a new player attribute (mana), could be used as resource for magic spells, weapons, tools, etc.
* [https://forum.minetest.net/viewtopic.php?f=9&amp;t=13199 Sunburn] [sunburn]: Makes sunlight dangerous, by causing sunburn (damage in direct sunlight)
* [https://forum.minetest.net/viewtopic.php?f=9&amp;t=11406 SkillsFramework] [skillsframework] Skills
* [https://forum.minetest.net/viewtopic.php?f=11&amp;t=11265 Quest framework] [quests]: Quest framework
* [https://forum.minetest.net/viewtopic.php?f=9&amp;t=14222 sys4_quests] [sys4_quests]: Another quest framework, depends on [quests]

==== Mobs ====
Mobs are non-player creatures to interact with the world, they may be peaceful or attack on sight. Usually they are based on entities. Minetest does not support mobs natively, but if you still want to add custom mobs, you have various mods to choose from, each of them with somewhat different priorities. Most APIs are not compatible which each other, so in general you should only use the API which suits your needs in the best way. If you want to create a game, you have to be very careful with interoperability.

Note: Only mature mods with their own dedicated API are listed.
Note: There are multiple mods with the short name “mobs”, you can only use one of these mods at once.

* [https://content.minetest.net/packages/TenPlus1/mobs/ Mobs Redo] [mobs] Fork of Simple Mobs, is backwards-compatible to Simple Mobs
* [https://content.minetest.net/packages/Termos/mobkit/ Mobkit] [mobkit]
* [https://content.minetest.net/packages/ElCeejo/creatura/ Creatura] [creatura] An animal focused API

See also: [http://wiki.minetest.net/Mobs Mobs page on the Community Wiki]

==== Protection ====
“Protection” refers to a way to own a certain area in the world and preventing other players to make any changes in this area.&lt;br/&gt;
There are mods which add protection nodes, which protect within a range around the placed node, and mods which allow protecting whole chunks. 

Mods should use &lt;code&gt;minetest.is_protected&lt;/code&gt; when testing whether a player owns a specific position. Protection mods simply override this function.

This section needs to be finished. Notes for general interoperability requirements/recommendations should be added by someone more experienced.

==== Other gameplay concepts ====
* [https://content.minetest.net/packages/rubenwardy/awards/ Achievements] [awards]: API for adding your own achievements
* [https://content.minetest.net/packages/Wuzzy/treasurer/ Treasurer] [treasurer]: API for randomly selecting a treasure out of a pool of previously registered treasures

==== Testing for pipeworks fake players ====
[https://content.minetest.net/packages/VanessaE/pipeworks/ Pipeworks] [pipeworks] provides automation and creates fake players for that purpose. If you need to, these can be distinguished from real players by the field &lt;code&gt;is_fake_player&lt;/code&gt; in their definition.

=== Nodes ===
==== Templates ====
Many mods offer convenience functions to add new new nodes which follow a simple template, like a fence made from a different kind of wood.

* Standalone mods
** [https://forum.minetest.net/viewtopic.php?f=11&amp;t=14910 Furniture] [furniture]: Tables, chairs and stools
** [https://forum.minetest.net/viewtopic.php?f=11&amp;t=15724 more shelves] [moreshelves]: Shelves
** [https://forum.minetest.net/viewtopic.php?f=9&amp;t=15265 flower pots] [flowerpots]: Flower pots
** [https://forum.minetest.net/viewtopic.php?f=9&amp;t=15731 Minetest Game Plus] [mtg_plus]: Cups
** [https://forum.minetest.net/viewtopic.php?f=9&amp;t=15399 corrupt shapes] [csh]: Additional shapes: Cylinders and related shapes
** [https://forum.minetest.net/viewtopic.php?f=11&amp;t=10425 mymillwork] [mymillwork]: Additional shapes: Crown moulds, beams, columns, baseboards
** [https://forum.minetest.net/viewtopic.php?f=11&amp;t=13762 kaeza's/VanessaE's signs library] [signs_lib]: Advanced signs
** [https://forum.minetest.net/viewtopic.php?f=11&amp;t=12999 Biome library] [biome_lib]: Growing plants
** [https://github.com/pyrollo/display_api Display API] [display_api]: Nodes with a dynamic display, e.g. digital clocks. See [https://forum.minetest.net/viewtopic.php?f=11&amp;t=13563 Display Modpack]
** [https://github.com/pyrollo/font_api Font API] [font_api]: Make textures from text and fonts. See [https://forum.minetest.net/viewtopic.php?f=11&amp;t=13563 Display Modpack]
** [https://github.com/pyrollo/signs_api Signs API] [signs_api]: Combining Font API and Display API, easy creation of any kind of signs. See [https://forum.minetest.net/viewtopic.php?f=11&amp;t=13563 Display Modpack]
* [https://content.minetest.net/packages/Minetest/minetest_game/ Minetest Game]
** [default]: Fences
** [beds]: Beds
** [doors]: Doors and trapdoors
** [farming]: Farming plants
** [stairs]: Stairs and slabs
** [tnt]: Explosives
** [walls]: Walls
** [xpanes]: Panes

==== Modifications ====
These mods extend the possibilities of node definitions:

* [https://content.minetest.net/packages/lordfingle/walkover/ Walkover] [walkover]: Adds callback function which is triggered when a player walks over the node

==== Causing explosions ====
Whenever you want to cause an explosion which affects other nodes, make sure you to try to call the node's &lt;code&gt;on_blast&lt;/code&gt; method first before using your own explosion handling. The reason for this is that e.g. your explosion could otherwise destroy a node which is normally immune to explosions.

==== Suffering explosions ====
If you are happy with what explosions caused by other mods do to your block (e.g. destroying it), you don't need to do anything. If you want to customize the behavior, define the on_blast method.

==== Indestructible nodes ====
Making a block truly indestructible in normal gameplay is not really obvious, so here's a tested and proven template which should prevent all well-programmed mods from destroying your block accidentally:

&lt;pre&gt;
 minetest.register_node("example:indestructible", {
         description = "Indestructible Block",
         is_ground_content = false,
         on_blast = function() end,
         on_destruct = function () end,
         can_dig = function() return false end,
         diggable = false,
         drop = "",
 })
&lt;/pre&gt;

Note: There is no way a node can “defend” against &lt;code&gt;VoxelManip&lt;/code&gt;. If a mod for gameplay directly uses this without any checking, this is probably a bug in this mod, rather than the mod with the indestructible block.

==== Destroying nodes ====
Be very careful when you want to destroy a node by calling &lt;code&gt;minetest.remove_node&lt;/code&gt; directly. There is no way a node can “defend” against such a call, so this needs to taken into consideration for interoperability.

You should only use &lt;code&gt;minetest.remove_node&lt;/code&gt; directly for technical and/or debugging mods, but for actual gameplay, you should do some checks first. Otherwise, you might end up accidentally destroying blocks which are supposed to be indestructible (see above).

Recommendation: First check if any of the node's callback functions are appropriate to be called (e.g. call on_blast when you create an explosion). If you want to destroy a block in another manner, first check if the node is not indestructible (checking fields like &lt;code&gt;diggable&lt;/code&gt; and other fields mentioned above might usually work). If the block does not seem to be indestructible, calling &lt;code&gt;minetest.remove_node&lt;/code&gt; should normally be safe.

==== Preventing pistons from pushing or pulling your node ====
The [https://forum.minetest.net/viewtopic.php?f=11&amp;t=628 Mesecons] modpack has pistons which are able to push and pull other blocks around. By default, this happens for pretty much all blocks. If you want to prevent this behavior for your block, you have to explicitly exclude your block.

To do this for a node “example:myblock”, add &lt;code&gt;mesecons_mvps&lt;/code&gt; to your optional dependencies in &lt;code&gt;mod.conf&lt;/code&gt; and the following code after the registration function of your node:

&lt;pre&gt;if minetest.global_exists(mesecon.register_mvps_stopper) then
        mesecon.register_mvps_stopper"example:myblock"
end&lt;/pre&gt;

=== Interface ===
==== Showing status information ====
If you create a new player attribute/stat (like health) and you want to expose it to the interface somehow, you can use:

* [https://content.minetest.net/packages/Wuzzy/hudbars/ HUD Bars] [hudbars]: Add your own indicators like the “hearts” for health. Displayed in either a “progress bar”-like fashion, the classic statbars like in vanilla Minetest or a variant of the classic statbars with a simple background

==== Messages ====
For showing messages to players.
* [https://forum.minetest.net/viewtopic.php?f=9&amp;t=12720 Central Message] [central_message]: Simple API to show messages at the center of the screen for a short time

==== Inventory menu enhancements ====
Some mods enhance or change the inventory menu and provide an API to add buttons and other things to the inventory menu. This can come in handy if you have made your own formspec and seek for ways to access them.

* Simple Fast Inventory [sfinv]: Part of Minetest Game, you can add custom tabs to the inventory menu. See https://rubenwardy.com/minetest_modding_book/en/chapters/sfinv.html
* [https://forum.minetest.net/viewtopic.php?f=9&amp;t=16079&amp;p=244441 Simple Fast Inventory Buttons] [sfinv_buttons]: Adds a new tab “More” to the inventory menu of Minetest Game, in which mods can add buttons for doing any action you want
* [https://forum.minetest.net/viewtopic.php?f=11&amp;t=12767 Unified Inventory] [unified_inventory]: Supports adding buttons for doing any action you want (undocumented API)
* [https://forum.minetest.net/viewtopic.php?f=11&amp;t=6204 Inventory++] [inventory_plus]: Supports adding buttons for adding “sub-menus” to the inventory menu. This mod does not work well together with newer versions of Minetest Game but it may still be usable for some other games

==== Formspecs ====
* [https://forum.minetest.net/viewtopic.php?f=11&amp;t=7553&amp;p=116028 Smart Formspecs] [smartfs]: Simplification and enhancement of the formspec API
* [https://forum.minetest.net/viewtopic.php?t=20109 Select Item] [select_item]: Dialog to select an item

=== Decorational ===
==== Colors ====
If your mod provides blocks in multiple colors, there are various mods and conventions to consider for ensuring the best interoperability.

It is strongly recommended you only use colors which follow an agreed-upon set of predefined colors.
A basic set of 15 colors is defined in the “dye” mod in Minetest Game. Read the source code to learn more. Other mods provide an extended set of dyes.
The mod [https://forum.minetest.net/viewtopic.php?id=2178 Unified Dyes] [unifieddyes] extends the set of colors to 90 colors.

Other specific mods for consideration:

* Colorization by crafting: Consider if you want to add crafting recipes by adding a dye and your item (like wool in Minetest Game, read it source code to learn how it works)
* [https://forum.minetest.net/viewtopic.php?f=11&amp;t=6670 Color Machine] [colormachine]: Coloring support will be provided by the mod itself, as long as the authors update the mod. Your task would to to make sure that the names of the textures and nodes follow naming conventions
* [https://forum.minetest.net/viewtopic.php?f=11&amp;t=9170 Paint Roller] [paint_roller]: Use the API of this mod to enable the paint roller to colorize your blocks
* [https://forum.minetest.net/viewtopic.php?f=11&amp;t=14274 mypaint] [mypaint]: This mod allows to paint in arbitrary colors using paint buckets and brushes; internally it seems to work very different than the other mods

==== Other ====
* [https://github.com/pyrollo/display_modpack/tree/master/font_api Font API] [font_api]: A library for displaying text on entities. Part of [https://forum.minetest.net/viewtopic.php?t=19365 Display Modpack]

== Groups ==
Another way for interoperability is by using groups. If used properly, they can greatly increase ease-of-use when other modders want to work with our mod.
The rule of thumb here is that you generally use groups which are already widely used if you can. Only if your needed group does not exist, you should define your own group.

On this wiki, the [[Groups/Custom groups]] page tries to document the usage of groups and lists some commonly used groups. If your mod defines its own groups and they are *not* just to be used internally, please edit the Groups page to help other modders.


[[Category:Mods]]</text>
      <sha1>2hldh60lo4vwtbpomuul7hzrp6mdasb</sha1>
    </revision>
  </page>
  <page>
    <title>Modding Book</title>
    <ns>0</ns>
    <id>1020</id>
    <revision>
      <id>6205</id>
      <timestamp>2022-10-14T14:56:42Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <comment>Create</comment>
      <origin>6205</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="80" sha1="o3tjto9k7i85mv138ucru9rdj8i3jad" xml:space="preserve">&lt;big&gt;[https://rubenwardy.com/minetest_modding_book/ Minetest Modding Book]&lt;/big&gt;</text>
      <sha1>o3tjto9k7i85mv138ucru9rdj8i3jad</sha1>
    </revision>
  </page>
  <page>
    <title>Modding FAQ</title>
    <ns>0</ns>
    <id>600</id>
    <revision>
      <id>6217</id>
      <parentid>6164</parentid>
      <timestamp>2022-10-24T19:33:03Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <comment>point to regular FAQ</comment>
      <origin>6217</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="108" sha1="2hkf5chqfxamqo79w3fa0mtxqbatsbd" xml:space="preserve">Moved to https://wiki.minetest.net/FAQ#Game_and_Mod_Development


[[Category:Mods]] [[Category:Modding API]]</text>
      <sha1>2hkf5chqfxamqo79w3fa0mtxqbatsbd</sha1>
    </revision>
  </page>
  <page>
    <title>Modding Intro</title>
    <ns>0</ns>
    <id>583</id>
    <revision>
      <id>6370</id>
      <parentid>6295</parentid>
      <timestamp>2023-05-01T11:14:12Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <comment>/* Lua API Reference */</comment>
      <origin>6370</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2735" sha1="jwl7i8hnl4uvb5a5v5x1d3mhywbts2x" xml:space="preserve">Minetest has a scripting '''API''', which is used to program games and mods, creating whole new experiences or extending existing ones.

The API is accessed using Lua, an easy-to-use programming language.
Version 5.1 of Lua is used, but many people run LuaJIT for greater performance.

The only thing you will need is ''basic'' programming knowledge.

== Documentation ==

=== Tutorials ===
The [https://rubenwardy.com/minetest_modding_book/ Minetest Modding Book] is a friendly introduction to Minetest modding and game creation, introducing you to various aspects of the API.

It is recommended you start here, even if you are already apt at programming, to get a good understanding of how Minetest mods work and are structured.

=== Lua API Reference ===
The official Lua API documentation is &lt;code&gt;lua_api.md&lt;/code&gt;. It's available as [https://github.com/minetest/minetest/blob/master/doc/lua_api.md markdown] or [https://minetest.gitlab.io/minetest/ HTML]. You can find the plaintext version in your Minetest installation, in the &lt;code&gt;doc&lt;/code&gt; directory.

This is a concise description of the entire API, explaining functions, data structures, registration templates &amp; more. The core developers of minetest maintain it, changes going through a quality control process.

Any functions not listed here are subject to change and not guaranteed to be compatible across versions, though usually they are.

=== The Minetest-Docs Project ===
A work-in-progress project is underway to create new, more detailed, documentation. They can be read from its [https://github.com/minetest/minetest_docs/ GitHub repo], contributions are greatly appreciated.


== Useful tools ==
Here are some useful tools that most modders use when making Minetest mods:

* [https://code.visualstudio.com/ Visual Studio Code]/[https://vscodium.com/ VSCodium], powerful code editor with a [https://marketplace.visualstudio.com/items?itemName=GreenXenith.minetest-tools Minetest extension] available for code completion.
* [https://github.com/lunarmodules/luacheck luacheck], static analysis tool for Lua. See [https://rubenwardy.com/minetest_modding_book/en/quality/luacheck.html this modding book chapter] for more information on how to use it with Minetest.

== Other useful links ==
* Check out [https://content.minetest.net/ ContentDB] to see mods that have been published by the community.
* Get mod help from the community:
** [https://forum.minetest.net/viewforum.php?f=47 Forums]
** [https://discord.gg/minetest Discord]
** [https://matrix.to/#/#minetest:tchncs.de Matrix]
** ...[https://www.minetest.net/get-involved/ more]
* Suggest a mod idea in the [https://forum.minetest.net/viewtopic.php?f=9&amp;t=2434 mod request thread].

[[Category:Modding API]]</text>
      <sha1>jwl7i8hnl4uvb5a5v5x1d3mhywbts2x</sha1>
    </revision>
  </page>
  <page>
    <title>Modding Overview</title>
    <ns>0</ns>
    <id>1019</id>
    <revision>
      <id>6155</id>
      <timestamp>2022-08-16T02:12:19Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <comment>Created page with "See https://rubenwardy.com/minetest_modding_book/en/index.html"</comment>
      <origin>6155</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="62" sha1="dhaw12xrwz5607euedwxghjfkw5cq35" xml:space="preserve">See https://rubenwardy.com/minetest_modding_book/en/index.html</text>
      <sha1>dhaw12xrwz5607euedwxghjfkw5cq35</sha1>
    </revision>
  </page>
  <page>
    <title>Modding Tips</title>
    <ns>0</ns>
    <id>981</id>
    <revision>
      <id>6374</id>
      <parentid>6229</parentid>
      <timestamp>2023-05-01T11:17:51Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <comment>lua_api.txt -&gt; lua_api.md</comment>
      <origin>6374</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="13093" sha1="db0p72ofj0o1x5i6q2cac7xn65p72sx" xml:space="preserve">{{LuaTips}}

This page is a random collection of various tips and tricks, and solutions to common tasks/problems that occur frequently in mod/game development. See also: [https://wiki.minetest.net/FAQ#Game_and_Mod_Development Modding FAQ]

== Troubleshooting ==
=== OOM errors ===
If your game or mod crashes due to an OOM error, it means that Minetest has ran out of memory (=OOM). This happens if your Lua code somewhere uses up a large amount of memory. This can happen if you construct large tables and fill them with lots of data and never free them, or you got a nice [https://en.wikipedia.org/wiki/Memory_leak memory leak]. Badly coded mapgens are a likely cause of OOM errors, if you implement a Lua API, you should always apply all [[Mapgen memory optimisations]].

=== “Irrlicht: PNG warning: iCCP: known incorrect sRGB profile” ===
If you debug log level is set to “warning” or lower, you probably ran into the warning “Irrlicht: PNG warning: iCCP: known incorrect sRGB profile” quite often.
 it means that *some* PNG file is bad. But this warning is useless for you because there's no file name mentioned.

If you want to track down ''which'' PNGs are broken, set the debug level (&lt;code&gt;debug_log_level&lt;/code&gt;) to “verbose”. Now the log will show the PNG file name right above the warning. Now just fix the offending PNGs with your favourite image editor to get rid of these warnings.

=== Deprecated function calls ===
As Minetest develops, some API functions fall out of use and become deprecated in favour of newer functions with different names. Looking at console log or debug log output should give you the deprecation warnings that your mod throws. See the warning, which might give the name of the new function, and the Lua API for any eventual change in behaviour it has.

When upgrading your mod from Minetest 0.4.x to 5.x, you may use the [https://gist.github.com/SmallJoker/cb89c3f9e4be27a0e8bc10ced1c5fc31 MT-replace-deprecated.sh] script ([https://forum.minetest.net/viewtopic.php?f=18&amp;t=20403 forum thread]) which can automatically rename some deprecated functions.

To abort on any execution of a deprecated function, you can set the “deprecated_lua_api_handling” setting to “error”, useful during development to clearly see any deprecated functions being used.

=== Positional sounds are either full volume or completely silent ===
Problem: You want to play a sound at a position, but it's always at full volume when you're in range or completely silent if you're not. For example, you have a zombie that growls, but when it growls, somehow its growl is either at full volume or not hearable at all (if you're out of the sound range); there's no gradient at all. This can be annoying.

Reason: Your audio file is probably stereo. The fix is to make all positional sounds mono. You probably want to check ALL audio files then, it's very likely this wasn't the only one.

The documentation says:

 For positional playing of sounds, only single-channel (mono) files are
 supported. Otherwise OpenAL will play them non-positionally.

Note that non-positional sounds do not have to be mono, so you don't have to touch them.

=== The mapgen generates some nodes that let me see through the world but I still collide and/or interact with them ===
This can happen in the mapgen v6 if you forgot to set some mapgen aliases, or a mapgen alias is set to a non-existing node. What is happening here is that these “broken” nodes are [https://wiki.minetest.net/Ignore Ignore] nodes because the v6 mapgen doesn't know which node to place here (because the given node name was invalid or undefined).

If you are using the mapgen v6, you must make sure that the mapgen aliases are set to a valid value. See &lt;code&gt;lua_api.md&lt;/code&gt; for a list.

=== My nodes don't propagate light properly until I dig around them ===
This is probably because they don't have &lt;code&gt;paramtype="light"&lt;/code&gt; set. Depending on the node drawtype, this paramtype is required for the lighting to work correctly (see lua_api.md for details). Note this might not immediately fix existing worlds, try a new world for testing instead.

=== I have floating plants ===
If you have plant decorations that for some inexplicable reason float in the air, there are multiple possible reasons for this, but here are some of the common ones:

* The v6 mapgen is a little buggy
* Other decorations accidentally have plants on the floor and the schematic author overlooked them when saving the schematic
* ???

== Tips ==
=== Making warnings visible in chat ===
By default, warnings are only seen in the debug log file and the program's console. For developers, it is very helpful to make all warnings visible in the chat as well so you won't miss them. Many warnings are about stuff like deprecated code, so it's a good idea to have them always highly visible.

Set the setting &lt;code&gt;chat_log_level&lt;/code&gt; to &lt;code&gt;warning&lt;/code&gt; to enable this.

=== Improving Lua mapgen memory performance ===
If you created a Lua mapgen, it is strongly recommended to make sure you optimize the memory performance, otherwise you could quickly run into OOM (out-of-memory) errors. See [[Mapgen memory optimisations]].

=== More optimization tips ===
For more optimization tips, go to [[Lua Optimization Tips]].

=== Checking if a mod exists ===
If you want to check if a mod named “example” is currently loaded and actively used, use this code:

&lt;code&gt;
local mod_exists = minetest.get_modpath("example") ~= nil
&lt;/code&gt;

Now &lt;code&gt;mod_exists&lt;/code&gt; will be true if the mod exists and false otherwise.

This works because &lt;code&gt;minetest.get_modpath&lt;/code&gt; returns nil if the mod is not loaded.

=== Ensuring mod interopability ===
A good mod is one that still works when a lot of other mods are used. Read [[Mod_interoperability]] for a lot of useful hints.

== Quality checklist ==
Here's a list of things to check in your game or mod to improve general quality and to avoid common pitfalls. Not all things might apply for your game, always use good judgement.

Note: Some of these can be checked quickly with [https://forum.minetest.net/viewtopic.php?t=15759 QA-Block]. See also: [[Development Tools]].

=== Preventing crashes, exploits and bugs ===
* In &lt;code&gt;minetest.after&lt;/code&gt;, do you consider that any external variable or object might become nil or disappear in the meantime?&lt;ref&gt;For example, if minetest.after does anything on a player object that you got 5 seconds ago, it's possible the player has left in that time. If you do anything (besides checking for existence) on the player object, you trigger a crash&lt;/ref&gt;
* In formspecs, did you check for all [https://forum.minetest.net/viewtopic.php?f=47&amp;t=19129 Time Of Check is not Time Of Use vulnerabilities]?
* In formspecs, do you [https://forum.minetest.net/viewtopic.php?f=47&amp;t=19129 Never Trust User-Provided Data]?
* In formspecs, do you enclose all variable, unpredictable text in &lt;code&gt;minetest.formspec_escape&lt;/code&gt;? &lt;ref&gt;Variable text, especially translations or user input, can potentially contain the magic characters that formspecs use, so if unescaped, they will break the formspec.&lt;/ref&gt;
* Does the game behave properly when restarted?&lt;ref&gt;Some game data might be accidentally reset or just not be persisted across restarts. For example, rainy weather might be reset to clear because it was not saved.&lt;/ref&gt;
* Did you check if implementing [https://forum.minetest.net/viewtopic.php?f=18&amp;t=12471 mod security] is necessary? If yes, did you implement it?
* For singleplayer games: Do you error out if someone tries to run your game in multiplayer?&lt;ref&gt;Use &lt;code&gt;minetest.is_singleplayer&lt;/code&gt; to check. Use Lua's &lt;code&gt;error&lt;/code&gt; function to error out, or just kick all players.&lt;/ref&gt;
* Do you restrict detached inventories to players, where necessary?&lt;ref&gt;Detached inventories are sent to everyone unless you specify a name in the registration. So other players using a modified/hacked client could theoretically alter any detached inventory without an attached name.&lt;/ref&gt;

=== General code quality ===
* Does the game/mod avoid polluting the global namespace with tons of identifiers?&lt;ref&gt;The keyword “&lt;code&gt;local&lt;/code&gt;” should be your new friend. Everything that does not need to be visible outside should be made local. This will avoid a lot of weird bugs caused by mods overwriting their global variables each other. As a rule of thumb, your mod should only have up to 1 global variable which is also the same name as the mod. Make this a table in which you include all global stuff. You can use [https://forum.minetest.net/viewtopic.php?t=15759 QA-Block] to find suspicious global variables.&lt;/ref&gt;
* All deprecated code removed/replaced?&lt;ref&gt;See also: [[MT-replace-deprecated.sh]]&lt;/ref&gt;
* Are all APIs (that are intended for external use) documented?

=== Performance ===
* Do you use the “buffer” argument in the LuaVoxelManip and Perlin noise functions (like &lt;code&gt;get_data&lt;/code&gt; or &lt;code&gt;get_2d_map_flat&lt;/code&gt;)?&lt;ref&gt;See also [[Mapgen_memory_optimisations]]&lt;/ref&gt;
* Do you avoid re-creating the same Perlin noise over and over again?&lt;ref&gt;See also [[Mapgen_memory_optimisations]]&lt;/ref&gt;

=== Entities/players ===
* Do all entities still behave properly when they unload, and then load again?&lt;ref&gt;Entities will forget most variables when they unload, which is easy to overlook for beginners. Make sure to make use of staticdata.&lt;/ref&gt;
* If you change player physics (&lt;code&gt;set_physics_override&lt;/code&gt;) anywhere, will it still work when another mod changes it?&lt;ref&gt;If you don't apply any checks when overwriting player physics, this will very likely lead to very hilarious bugs if 2 mods want to change player physics directly, as they will constantly compete for “their” physics. This will likely screw up the player physics badly. To solve this, you should generally avoid setting player physics directly, unless you want to implement a physics interface yourselves. But for normal use, we highly recommend to use an [[Mod_interoperability#Player_physics API]].&lt;/ref&gt;

=== Items and nodes ===
* Is &lt;code&gt;is_ground_content&lt;/code&gt; set to false for all nodes that the cavegen should not destroy?&lt;ref&gt;Note this value is true by default, and can be forgotten easily.&lt;/ref&gt;
* Do all nodes have appropriate sounds?&lt;ref&gt;Of course, silence is also “appropriate” if that's what you intented.&lt;/ref&gt;
* Do all nodes have appropriate selection boxes?&lt;ref&gt;As a rule of thumb, try to match the graphics pixel-perfectly, if it makes sense. Selection boxes that are completely misplaced or just tiny are generally perceived as highly annoying by players.&lt;/ref&gt;
* Do all items intented for use only in Creative Inventory have set the &lt;code&gt;not_in_creative_inventory=1&lt;/code&gt; group?
* Do all crafts work?&lt;ref&gt;Use a craft guide to check&lt;/ref&gt;

=== Game/mod metadata ===
* For games: Are all unsupported mapgens disabled in game.conf?
* Does your game/mod have a name?
* Is the name of the game/mod used consistently everywhere?
* For games: Name, icon, header present?&lt;ref&gt;The images just to help identifying the game in the game icon list in the main menu. Without an icon, your game is harder to find. At least draw a dummy image if you're in a hurry.&lt;/ref&gt;

=== Graphics, audio, text ===
* Are all positional sounds mono?&lt;ref&gt;See troubleshooting above.&lt;/ref&gt;
* Does the UI still work in higher scaling/DPI?
* Are all required textures included?
* Do your leaves still look okay when simple leaves are used (&lt;code&gt;leaves_style = simple&lt;/code&gt;)&lt;ref&gt;Minetest will use the color of the transparent pixels of the PNG file; check out your manual of your graphics program to learn how to set the color of transparent pixels&lt;/ref&gt;
* Do all items that the player can legitimately get have &lt;code&gt;description&lt;/code&gt; set?
* Do all chat commands have &lt;code&gt;description&lt;/code&gt; and parameter list set?
* In the parameter list of chat commands, does it follow the format defined in &lt;code&gt;lua_api.md&lt;/code&gt;?
* Do all items have unique descriptions (=no confusing duplicates, unless intentional for some reason)
* Is the writing style consistent across the entire game?
* No typos/grammar fails?
* Do you use &lt;code&gt;blank.png&lt;/code&gt; instead of a custom transparent image?&lt;ref&gt;blank.png is a fully transparent texture that is available by default. No need to create your own transparent texture.&lt;/ref&gt;
* Do all items have an appropriate item image that helps in keeping items apart?&lt;ref&gt;It's annoying if 2 very different items share the same icon&lt;/ref&gt;

=== Translations ===
* Does the UI provide reasonably enough space for translations?
* Was at least one translation playtested?
* Do you avoid using string concatenation to include variable text?&lt;ref&gt;If you don't understand this, review lua_api.md&lt;/ref&gt;
* Can all user-facing texts be translated?
* Have all in-game images with baked-in, untranslatable texts, been replaced with text?&lt;ref&gt;There might be possible exceptions, such as names and logos. But generally, all baked-in text should be avoided where possible.&lt;/ref&gt;

== Footnotes ==
&lt;references/&gt;



[[Category:Modding API]]</text>
      <sha1>db0p72ofj0o1x5i6q2cac7xn65p72sx</sha1>
    </revision>
  </page>
  <page>
    <title>OldChangelog</title>
    <ns>0</ns>
    <id>867</id>
    <revision>
      <id>5638</id>
      <parentid>5568</parentid>
      <timestamp>2021-10-03T22:32:28Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <minor/>
      <comment>/* Modding-related changes */ fix format</comment>
      <origin>5638</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="96378" sha1="i2821w8zz7x7243q32rutsi2i4yltur" xml:space="preserve">This is Minetest's old changelog for outdated Minetest versions and posterity.

For the latest versions, see [[Changelog]].

== 0.4.17.1 → 0.4.17.2 (Android Only) ==

Patched 0.4.17.1 to fix some Android crashes, released on June 28, 2018.

* Android: Use correct temporary path (''stujones11'')
* Fix MurmurHash implementation to really be unaligned (''sfan5'')
* Fix crash caused by Lua error during startup (''red-001'')
* Fix buffer overrun in SRP (''red-001'')
* Android: use c++_shared library instead of c++_static (''nerzhul'')
* Android: Fix android tools version used to build MT (''nerzhul'')

== 0.4.17 → 0.4.17.1 ==

Patched 0.4.17 to fix a crash, released on June 10, 2018.

* Correct character encoding for chat_send_player and chat_send_all
* Fix crash caused by log_deprecated and the use of deprecated functions
* Fix crash on pause menu when pressing up/down keys
* Android build system fixes

== 0.4.16 → 0.4.17 ==

Backported release containing only bug fixes and small features.
0.4.17 was released on June 3, 2018.

=== Features ===
* Builtin auth handler: Speed up file writing
* LBM lookup performance improvement on mapblock loading
* Minetest ASCII art: Move from actionstream to rawstream
* CollisionMoveSimple: Collide with 'ignore' nodes
* Allow objects to exist outside of 'mapgen limit' (mapblocks may exist)
* Find nodes in area (under air): Raise volume limit
* Allow dumping userdata using dump()
* Add minetest.is_player API function
* Refine movement anticheat (again)
* Apply physics overrides correctly during anticheat calculations
* Shut down mapgen threads before other shutdown tasks
* Show script source of deprecated function calls
* Inventory: Restrict access from too far away (anticheat)
* Improve Settings tab button alignments
* Add minetest.sha1 util API function
* Avoid filtering low-res textures for animated meshes
* Add setting for near plane distance to improve performance
* Footstep sounds: Reduce gain to balance volume
* Positional sound: Limit volume when closer than 1 node
* Leveled nodebox: Change levels from 1/63rds to 1/64ths
* ClientInterface: user limit checking function
* Make dropped items colorable
* Trigger on_rightclick regardless on the formspec meta field
* Clarify "Full viewing range" key message
* Rework new sneak code, minimize
* Tile material: Opaque textures by default to prevent xray effect
* Automatic item and node colorization
* find_nodes_in_area: Extend maximal count to U32_MAX
* Add server option to remove color codes from chat messages

=== Bug fixes and Improvements ===

* Various build fixes (LuaJIT not found, OpenBSD)
* Dungeons: Mostly fix missing stair nodes
* Cavegen: Fix variable typo that broke mgvalleys large cave distribution
* Prevent translating empty strings
* upright_sprite: Fix texture position for players
* core.rotate_node: Do not trigger after_place_node for mod compatibility
* macOS: don't require X11 libraries during compilation
* Generate Notifier: Clear events once after all 'on generated' functions
* Fix liquid post effect colour behaviour in third person view
* Delete world dialog: Move buttons to avoid double click deletion
* Fix /shutdown countdown parameter
* Check argument types inside MetaDataRef Lua API
* Fix "Ignoring CONTENT_IGNORE redefinition" warning
* dropped items and falling nodes: Delete in 'ignore' nodes
* Move setlocale from Lua to C++
* Fix off-by-one in log output line length
* Fix buffer parameter not working in getMapSlice()
* Fix rounding error in g/set_node caused by truncation to float
* Fix dancing text in text input fields
* Fix undefined behaviour on getting pointer to data in empty vector
* Fix wrong scrolling in text areas
* Builtin: Fix handle_node_drops crash with nil digger
* Damage: Remove damage ignore timer due to abuse potential
* Ensure no item stack is being held before crafting
* Several documentation additions, improvements
* core.rotate_node: Run callbacks like with any regular placed node
* Biome dust node: Only place on 'walkable' cubic non-liquid drawtypes
* Make use of safe file writing in auth handler
* Add minetest.safe_write_file() API function
* Fix issue Minetest crash when custom font path is not exist
* Fix Settings tab formspec alignment 
* Do not scale texture unless necessary
* httpfetch: Enable gzip support
* Fix day_night_ratio_do_override not being initialised server-side
* Fix default item callbacks to work with nil users
* Prevent from crafting non-existent, unknown items
* Profiler: Fix var args not being passed to callback register function
* Unkown nodes: Provide position on interact
* Fix attached particle spawners far from spawn
* Localplayer: Fix disable_jump effect and standing node position
* Fix blocks written by vmanip not being marked as modified
* Set placer to nil instead of a non-functional one in item_OnPlace
* Fix Rotate Node Placement
* ServerEnv: Clean up object lifecycle handling (item deletion)
* Fix the core.wrap_text function
* Fix empty legacy meta being persisted
* Statbars: fix incorrect half-images in non-standard orientations
* Android stepheight: Only increase if 'touching ground'
* Fix Android node selection distance
* serialize: use a temporary for SerializeException
* Fix player coordinate rounding in collisionMoveSimple()
* Various crash and error fixes
* Fix for empty key/value when reading item string with wear but no metadata
* Fix render order of overlays
* Fix console resize issue when maximising game window
* Fix console not being properly resized after window size changed
* Verify HudSetParams input when hotbar textures are set
* (Re)spawn players within 'mapgen_limit'
* Fix sending color codes to clients that don't support them

== 0.4.15 → 0.4.16 ==

0.4.16 was released on June 3, 2017.

* Minimum version supported is now 0.4.11

=== Features ===

* Add 2D sheet animations for nodes ''(sfan5)''
* Drop client side chat prediction. No more messages shown to chat when you talk and you are disconnected. ''(red-001)''
* Add particle animation, glow ''(sfan5)
* Server list: add ping indicators ''(kilbith)''
* Server side occlusion culling ''(lhofhansl)''
* New custom progress bar (you can customize it with texture packs) ''(kilbith)''
* Implement delayed shutdown for server owners: /shutdown 60 =&gt; shutdowns in 1 min /shutdown -1 cancels it ''(nerzhul)''
* Add support for requesting a reconnect and changing the shutdown message to /shutdown ''(red-001)''
* Add a mapblock cache in MeshUpdateQueue to improve client rendering performance ''(celeron55)''
* Player data can now be into database. This is an important change, players to files are always supported for this release but deprecated. Files backend for players will be removed in a future release. See http://wiki.minetest.net/Database_backends for compat matrix and migration steps. ''(nerzhul)''
* Sounds: add fading sounds ''(Bremaweb, krock)''
* Save automatically window size when modified. This behaviour can be disabled in client settings ''(nerzhul)''
* Add cancel button to password change formspec ''(red-001)''
* Improve pause menu with more user friendly informations and update keys dynamicly depending on your configuration ''(red-001)''
* Merge singleplayer &amp; server tab on desktop clients ''(octacian)''
* Add /clearinv chat command ''(octacian)''
* Add keyword-based search to server-list and advance settings ''(red-001, rubenwardy)''
* Add hardware-based itemstacks and node coloring ''(juhdanad)''
* Undersampling which should make minetest run better on low end devices ''(numberZero)''

=== Cheat fixes ===
* Breath cheat is now definitively fixed. Hacked clients cannot ignore breath anymore. ''(nerzhul)''
* Fix node damage cheat. They are now calculated server side. Hacked clients cannot ignore node damages anymore (fire, lava, cactus...). ''(nerzhul)''
* Disallow dropping items while dead. ''(sfan5)''
* Calculate maximum interact distance from wielded tool. ''(sfan5)''

=== Bug fixes and Improvements ===

* Little antispam fix ''(nerzhul)''
* Fix a little bit fog calculations ''(lhofhansl)''
* Fix player deletion problem when too many objects are in a mapblock ''(nerzhul)''
* Better block sending priorities to send map to players ''(???)''
* Sneaking changes ''(krock, paramat, sfan5)''
* Huge ABM handling code performance improvement ''(nerzhul)''
* Smooth lighting for all nodes ''(numberZero)''
* Added mesh generation delay ''(numberZero)''
* PostgreSQL bugfix on blocks deletion ''(nerzhul)''
* Windows integration enhancements ''(???)''
* Wieldmesh natural orientation ''(kilbith)''
* Memleak fix on client disconnection ''(nerzhul)''
* Various performance fixes ''(???)''
* Fix Windows icon ''(adrido)''
* Fix various minor memleaks ''(nerzhul?)''
* Recent LuaJIT fixes ''(nerzhul)''
* Reduce network packet reading/writing memory usage ''(???)''
* Binding tab now doesn't exit game when used ''(sofar)''
* Light update for mapblocks ''(juhdanad)''
* Client: reduce fake object reactions in client event queue ''(nerzhul)''
* Crashfix when reading schematic calls from API in some cases ''(nerzhul)''
* Limit sound volume when incorrect value was set into config ''(???)''
* Fix Cursor lock problem when window is inactive ''(krock)''
* Particles are now sent to client regarding distance (huge performance improvement on particle servers) ''(paramat)''
* Really disable minimap when disabled in configuration ''(nerzhul)''
* Fix a damage bug when falling from a very high height ''(red-001)''
* Various documentation fixes ''(???)''
* Expose singlenode mapgen to menu ''(nerzhul)''
* Dropdown menu selection fix ''(red-001)''
* Tooltip display unification between tooltip[] and list[] ''(krock)''
* ServerActiveObjects are now removed when overtaking map limits ''(nerzhul, paramat)''
* Chat console height can now be set by the player. ''(Shara RedCat)''
* Additional option added to node highlighting drop-down. ''(Shara RedCat)''

=== Client Modding ===
* Introducing Client-Side modding (CSM for the initiated). You can now have local mods to read various client data and handle different client events. This new modding step is very secure, you don't have access to all standard Lua API, just a subset, to protect your computers. Mods should be installed in @user_path@/clientmods. 
* You will also have access to Client side commands, starting with a dot.
* If you want to know more about CSM API, please look at [https://github.com/minetest/minetest/blob/master/doc/client_lua_api.md Client Side Modding documentation]
* Added by nerzhul, red-001, bigfoot547, Dumbeldor and paly2.

=== Server Modding ===

* Enable mod_security by default
* Add minetest.player_exists() ''(rubenwardy)''
* Add player attributes backend. This permits modders to store misc player related data to core and retrieve it after player loading. The attribute save is done by core. ''(nerzhul)''
* Add mod metadata API permitting mods to have a standard way to write their own data. We recommend you to use this instead of your custom files backend. ''(nerzhul)''
* Add position &amp; anchor attributes for formspecs ''(adelcoding1)''
* Add minetest.spawn_falling_node call ''(zaoqi)''
* Remove core.cause_crash Lua call ''(nerzhul)''
* Add on_flood server Lua callback ''sofar)''
* Add clouds API ''(bendeutsch)''
* Add private node meta to prevent some informations to be leaked to client (example: chest contents) ''(sfan5)''

=== Other / Misc ===

* Redis backend authentication support ''(sfan5)''
* PostgreSQL &lt; 9.5 support ''(???)''
* Code refactoring (Game, Environments) ''(???)''
* Introduce clang-format on repository to check and reformat C++ code with our rules (~15% source code managed) ''(nerzhul)''
* Move external libs outside of src/ to lib/ ''(nerzhul)'' 
* Update jsoncpp embedded lib to last C++03 version (0.10.6) ''(nerzhul)''
* Disable leveldb on Android ''(Ekdohibs)''
* Implement daily gitlab package build for Debian/Ubuntu/Fedora ''(nerzhul)''
* Translations updates ''(Multiple people)''

=== Minetest Game changes ===

== 0.4.14 → 0.4.15 ==

0.4.15 was released on Dec 22, 2016.

No official changelog exists yet, however you can find an unofficial one here: https://forum.minetest.net/viewtopic.php?p=243949#p243949


== 0.4.13 → 0.4.14 ==

0.4.14 was released on May 15, 2016.

=== Features ===

* Add viewing range GUI setting (kilbith)
* New settings tab contain all possible settings (PilzAdam)
* WoW-style Autorun (Duane Robertson)
* Add server side ncurses terminal (est31)
* Add support for audio feedback if placing node failed (BlockMen)
* New 3D Mode: Pageflip (Dalai Felinto)
* Add Valleys mapgen (Duane Robertson)
* Add /admin command which says who the server admin is (Splizard)
* Add '/clearobjects quick' (kahrl)
* Minimap: show player markers (RealBadAngel)
* Add support for non-ASCII characters to chat console (ShadowNinja)
* Nodebox: Allow nodeboxes to "connect" (Auke Kok)
* Add option to disable entity selectionboxes (TriBlade9)
* Add option to change screenshot file format (kaeza)

=== Bug fixes and Improvements ===

* Fix object position border checking (est31)
* Fix falling through nodes on world load (Christof Kaufmann)
* Add environment variable MINETEST_WORLD_PATH (SmallJoker)
* Fix crash regression when invsize formspec gets used (est31)
* Fix GUITable selection issues with trees (kahrl)
* Speed up and make more accurate relief mapping (RealBadAngel)
* Add option to give every object a nametag (BlockMen)
* Add support for limiting rotation of automatic face movement dir entities (sapier)
* Fix wield item glitch (RealBadAngel)
* Allow per-tiles culling (Auke Kok)
* Mapblock mesh: Eliminate meshgen lags (RealBadAngel)
* Fix jumping at node edge (gregorycu)
* Restore simple settings tab and add advanced settings as dialog (BlockMen)
* Mapblock mesh: Allow to use VBO (RealBadAngel)
* Update menu header image (Jean-Patrick Guerrero)
* Fix player dying on login (Ekdohibs)
* Mainmenu: Refactor tab UI code (Rui419)
* Fix hotbar placement on displays with low screen density (PilzAdam)
* Mainmenu: Unify favorite servers with main serverlist (kilbith)
* Builtin: Add basic_privs setting (rubenwardy)
* Optimize default settings for Android build (Maksim Gamarnik)
* Fix locked hardware buttons on Android (Maksim Gamarnik)
* Disallow stacking items with different meta (hunterdelyx1)

=== Modding ===

* Add /emergeblocks command and core.emerge_area() Lua API (kwolekr)
* Add get_biome_id(biome_name) callback (Duane Robertson)
* Added minetest.wallmounted_to_dir (Fernando Carmona Varo)
* Allow setting chunksize in core.set_mapgen_params (kwolekr)
* ABMs: Make catch-up behaviour optional (paramat)
* Decoration API: Add flag for placement on liquid surface (paramat)
* Add more ways to pass data to check_player_privs (Robert Zenz)
* Add option to disable backface culling for models (BlockMen)
* Schematics: Add core.place_schematic_on_vmanip API (kwolekr)
* Add LuaSecureRandom (est31)
* Allow craft replacements to use groups (TeTpaAka)
* Add Lua interface to HTTPFetchRequest (Jeija)
* Implement AreaStore serialization (ShadowNinja)
* Add AreaStore custom ID API (ShadowNinja)
* Add an option to colorize to respect the destination alpha (Samuel Sieb)
* Lua_api.txt: Add warnings of l-system lighting bug (paramat)
* Add [resize texture modifier (SmallJoker)
* Make the inventory bar HUD take offset into account (rubenwardy)

=== Mapgen ===

* Dungeongen: Remove floating frames (paramat)
* Blob ore: Fix partial blobs (paramat)
* Mapgen: Add 4D fractal mapgen (paramat)
* Mgfractal: Independent offset/slice params for mandelbrot and julia (paramat)
* Mapgen: Add global 'decorations' flag (paramat)
* Mgv5/v7/flat/fractal: More large pseudorandom caves (paramat)
* Mgfractal: Add 3D and 4D fractals (paramat)
* Mgvalleys: Add Dry Riverbeds (Duane Robertson)
* Mapgen: Spread both night and day light banks in spreadLight (kwolekr)
* Mgv7: Decrease cliff steepness (paramat)

=== Other / Misc ===

* Clean up threading (ShadowNinja)
* Improve locale directory detection (est31)
* Add new ContentParamType2 "CPT2_DEGROTATE" (est31)
* Refactor logging (ShadowNinja)
* Improve rollback database indexing (cheapie)
* Mgfractal: Add documentation to conf.example and settingtypes (paramat)
* Add the player name to dropped items (Robert Zenz)
* Implement OSX Travis builds (Pavel Puchkin)
* Simplify custom games packaging (Pavel Puchkin)
* New timer design (Auke Kok)
* Add option to not send pre v25 init packet (est31)
* Clean up Strfnd (ShadowNinja)
* Add CONTRIBUTING.md (Craig Davison)
* Mainmenu: Standardize the menu button order and sizes (SmallJoker)
* Android: Increase player_stepheight for thicker snow nodebox (Maksim Gamarnik)

=== Minetest Game changes ===

==== API changes ====

* A modding API was added to TNT, which allows mods to easily create explosion effects (red-001)
* A modding API was added to doors, which allows mods to create new doors that are feature-rich (sofar)
* A fence, wall, and fence gate API was added (sofar)
* A give_initial_items API was added (rubenwardy)

==== Interface changes ====

* Creative inventory now allows searching for nodes by name and description (kilbith)

==== Visual/Effect/Audio changes ====

* Several new textures were added by many different contributors (paramat, kilbith, sofar, kevdoy, Craig Davison, Wouters)
* Water texture alpha and water post effect color were changed (paramat)
* Steel door sounds were added (sofar)
* Flowers will wave when the waving plant shader is enabled (paramat)
* Doors are now made out of a single mesh and not two half nodes (sofar)

==== Mapgen/Landscape changes ====

* Grass can grow on sandy beaches and dunes (paramat)
* More flowers will grow in many biomes (paramat)
* Almost all biomes are now richer and more varied (paramat)
* Aspen trees were added to forests (sofar)
* Fallen logs were added (mgv5, mgv7), and mushrooms can grow on them (sofar)
* Dirt and sand blobs may appear in sandstone (paramat)

==== Gameplay changes ====

* Book interface was entirely rewritten to allow for proper pages and wrapping (kilbith, tenplus1, mt-modder)
* A metal sign was added, as well as a steel ladder (kilbith)
* mushroom spores were removed (sofar)
* a metal (locked) trapdoor was added (sofar)
* books can be copied in the craft grid (sofar)
* A new permanent flame node was added, as well as "flint and steel" (paramat, kilbith)
* Moss can grow on cobblestone if it gets wet (paramat)
* TNT was largely rewritten and has many new effects and behaviors (red-001, sofar)
* Stone walls were added for all cobble stone types (sofar)
* A simple Fence gate was added (sofar)
* The boat is now slightly faster (paramat)

== 0.4.12 → 0.4.13 ==

0.4.13 was released on August 20, 2015.

=== Features ===

* Add camera smoothing and cinematic mode (F8) (rubenwardy)
* Radius parameter for /deleteblocks here (SmallJoker)
* Save creative_mode and enable_damage setting for each world in world.mt (fz72)
* Configurable automatic texture scaling and filtering at load time. (Aaron Suen)
* Connect rails with connect_to_raillike and shorten the codes (SmallJoker)
* Clouds: Make cloud area radius settable in .conf (paramat)
* Added hour:minute format to time command (LeMagnesium)
* Add mod security (ShadowNinja)
* Add texture overriding (rubenwardy)
* Improved parallax mapping. Generate heightmaps on the fly. (RealBadAngel)
* Make attached objects visible in 3rd person view (est31)
* Remove textures vertical offset. Fix for area enabling parallax. (RealBadAngel)
* Add minimap feature (RealBadAngel, hmmmm, est31, paramat)
* Add new leaves style - simple (glasslike drawtype) (RealBadAngel)
* Add ability to specify coordinates for /spawnentity (Marcin)
* Add antialiasing UI setting (Mark Schreiber)
* Add wielded (and CAOs) shader (RealBadAngel)
* Add map limit config option (rubenwardy)

=== Bug fixes and Improvements ===

* Add count based unload limit for mapblocks (est31)
* Kick players when shutting down server or on Lua crash (nerzhul)
* Fix relief mapping issues (RealBadAngel)
* Improve group-based connection between raillike nodes (BlockMen)
* Use skin font for usernames (fixes #2363) (BlockMen)
* Fix some memory leaks on packet sending. (nerzhul)
* Fix android build (nerzhul)
* Fix serialization of floating point numbers (ShadowNinja)
* Disallow object:remove() if the object is a player (Kahrl)
* Fix wrapDegrees family of functions (Zeno)
* Optimise MapBlockMesh related functions (gregorycu)
* Fix minor memory leak (Android) (Zeno)
* Fix occlusion (Miguel Almeida)
* ClientInterface::getClientIDs doesn't need a std::list. Use a std::vector for better perfs (nerzhul)
* Fix some rendering glitches (BlockMen)
* Fix mapgen using unitialised height map values (Zeno)
* Fix Android text bug (no text displaying) (Zeno)
* Improve Clouds::render mathematics (nerzhul)
* For usages of assert() that are meant to persist in Release builds (when NDEBUG is defined), replace those usages with persistent alternatives (Zeno)
* Fix RUN_IN_PLACE broken due to invalid usage of assert (sapier)
* Respect game mapgen flags and save world noise params (ngosang)
* Don't use luaL_checkstring to read node names, it's only for arguments (ShadowNinja)
* Heightmaps: Fix uninitialised values in mgv5/mgv6. findGroundLevel: Return -MAP_GENERATION_LIMIT if surface not found (paramat)
* Make the dummy backend only look up blocks once (ShadowNinja)
* Fix unitialized data when creating TOSERVER_INIT packet (nerzhul)
* Fix memleak pointed by issue #2439. Also change bzero to memset. bzero doesn't work on windows (nerzhul)
* Stop formspecs closing with double-click in empty area (Zeno)
* Ensure that heightmap is initialized before use (Zeno)
* lua_api/l_mapgen: Fix overlapping areas of minetest.generate_ores/decorations (paramat)
* Mgv6: Fix uninitialised heightmap used by cavegen (paramat)
* Disable double-click -&gt; ESC translation for main menu (Zeno)
* If player is dead, permit it to respawn, even if damages are not enabled (nerzhul)
* Android: Fix auto-entry of server address and port in mainmenu (est31)
* Fix various damage related bugs (client-side) (Zeno)
* Minor bug fix (lag between damage flash and hearts updating) (Zeno)
* Fix game minetest.conf default settings (est31)
* Optimize minetest.get_(all)_craft_recipe(s) (gregorycu)
* Fix composite textures with texture_min_size (Aaron Suen)
* Protect Player::hud from concurrent modifications  (nerzhul)
* Fix minetest.get_craft_recipe function (est31)
* Fix set_bits (kwolekr)
* Fix usage of destroyed mutex (kwolekr)
* Fix crash caused by null texture in GUI formspec/HUD. (Aaron Suen)
* Fix players spawned at (0,0,0) in some rare cases instead of static_spawnpoint (nerzhul)
* Crafting speedup (est31)
* Fix uninitialized variabled in ConnectionEvent (nerzhul)
* Fix a rare crash case un SendPlayerHP (nerzhul)
* Schematics: Fix core.schematic_create() (kwolekr)
* fix infinite spawners (obneq)
* Disable connection timeout for singleplayer and server tabs (est31)
* Fix mod store rating (ShadowNinja)
* Fix sign-compare compiler warnings in mg_ore.cpp (ShadowNinja)
* Fix player pitch and yaw not being set properly (Kevin Ott)
* Fix fast leaves with texture_clean_transparent enabled. (Aaron Suen)
* Fix minetest.clear_* creating new LOCAL table instead of clearing the existing one. (Tomas Brod)
* Noise: Fix PcgRandom::randNormalDist() when range contains negative numbers (kwolekr)
* Add a check for animation when getting an extruded mesh (Kevin Ott)
* Stop NetworkPacket methods from producing bloated packets (Jay Arndt)
* Replace Wieldmesh::setItem assertion that could be triggered by the server with an error (kwolekr)
* Ensure that Map::findNodesWithMetadata() reports nodes strictly within the node-granular area (kwolekr)
* Fix typo in WieldMesh::setItem() (kwolekr)
* Don't crash if an item gets dropped into unloaded space (tenplus1)
* ANDROID: Do not limit situations where fast is enabled (Zeno)
* Fix current mod name change missed during rebase (ShadowNinja)
* Noise: Fix interpolation at negative coordinates (kwolekr)
* (Android) Only simulate holding down fast key if fast_move is toggled to true (Zeno)
* dofile error reporting for syntax errors (est31)
* Don't crash when saplings try to grow on unknown nodes (y.st, ShadowNinja)
* Remove unneccessary space for tab completion (Nathaniel Olsen)
* Fix some issues with animations, and allow non-looped animations to be defined (MirceaKitsune)
* Fix bug when craft input isn't replaced (TeTpaAka)
* Fix string conversion error message (est31)
* Fix bugs in mainmenu (kilbith, jp)
* Fix single click world select (est31)
* Shaders fixes and cleanup relief mapping code. (RealBadAngel)
* Fix missing check for 0 in craft replacements (TeTpaAka)
* Craftdef: Use numbers instead of iterators (est31)
* Fix attempt to start a world when no world is selected/created (kilbith)
* Fix endless loop since grandparent commit (est31)
* Fix damage flash when damage disabled (kwolekr)
* Add more robust error checking to deSerialize*String routines (kwolekr)
* Fix minetest.get_(all)_craft_recipe(s) regression (est31)
* Fix FSAA dropdown option reset after changing another dropdown option (kilbith)
* Fix MSVC number conversion warning (SmallJoker)
* Fix srp.cpp:815 leak (est31)
* Fixed minimap memory leak (Břetislav Štec)
* Android: Fix minor makefile bugs (est31)
* src/network/connection.h: Fix race condition (Břetislav Štec)
* src/environment.cpp: Fix NULL pointer dereference (Břetislav Štec)
* Improve accuracy and safety of float serialization (kwolekr)
* src/client.cpp: Fix mapper memory leak (Břetislav Štec)
* src/wieldmesh.cpp: Fix mesh extrusion memory leak (Břetislav Štec)
* Android: fix sound issue, and gitignore (est31)
* src/client/tile.cpp: Fix reference counting (Břetislav Štec)
* Fix "bouncy" blocks (Miner59)
* src/util/numeric.{cpp,h}: Fix FacePositionCache data race (Břetislav Štec)
* Fix tiling issues for PLANTLIKE and FIRELIKE with FSAA (RealBadAngel)
* connection: Make assertions non-fatal for received data (kwolekr)
* Fix critical vulnerabilities and bugs with NetworkPacket (kwolekr)
* Fix BufferedPacket race condition (fixes #2983) (kwolekr)
* Fix detection of sneaking node This fixes bug 1551 (gregorycu)
* Fix camera updates being toggled by N key in release mode (#2762) (Kahrl)
* Fix segfaults caused by the Environment not being initialized yet (rubenwardy)
* Display Lua memory usage at the time of Out-of-Memory error (kwolekr)
* Make NetworkPacket respect serialized string size limits (kwolekr)
* Fix intlGUIEditBox leak and uninitialized value in Mapper (reported by valgrind) (Kahrl)
* Fix Lua PcgRandom (est31)
* Fix segfault caused by a8e238ed06ee8285ed4459e9deda3117419837f6 (Perttu Ahola)
* Fix sneaking (fixes #665 and #3045) (BlockMen)
* Rollback: Fail on bad precondition instead of causing assertion error (kwolekr)
* Fix inventory replace bug (est31)
* Fix indianred and indigo of color-string (Rui)
* Optimizations (multiple)

=== Modding ===

* Add mod.conf file support - allows mods to specify a mod name for now (kaeza)
* Add find_nodes_in_area_under_air (nerzhul, Zeno)
* Add core.register_schematic() and cache schematics on use (kwolekr)
* Schematics: Reorganize (de)serialization and add Lua serialization API (kwolekr)
* Add minetest.global_exists() (ShadowNinja)
* Fix pathfinder to produce more useful paths (obneq)
* Add core.find_nodes_with_meta() script API (kwolekr)
* Schematics: Add per-node force placement option (kwolekr)
* is_player() is no player-only function (est31)
* Add code to support raillike group names (Novatux)
* Add get and set functions for the nametag color (TeTpaAka)
* Add minetest.register_on_punchplayer (Brandon)
* Schematics: Fix probability values for .mts version 1 (kwolekr)
* Add core.mkdir (ShadowNinja)
* Add core.request_insecure_environment() (ShadowNinja)
* Add core.get_dir_list (ShadowNinja)
* SAPI: Accept either ARGB8 table or ColorString to specify colors (kwolekr)
* Add some missing getter functions to the lua API (TeTpaAka)
* Decrease minetest.after globalstep lag (HybridDog)
* Add return list of individual counts to find_node_in_area (TeTpaAka)
* Add minetest.register_on_player_hpchange (TeTpaAka)
* Add list-rings (est31)
* Add Lua errors to error dialog (rubenwardy)
* Biome API decorations: 'spawnby' searches a 3D neighbourhood (paramat)
* Make acc and vel deprecated in add_particle and search for acceleration and velocity instead (TeTpaAka)
* Added get_player_velocity() method. Fixes #1176 (Elia Argentieri)
* Allow random menu images for games (sfan5)
* Document game main menu image system (est31)
* Add AreaStore data structure (est31)
* Actually document what minetest.is_protected should do (est31)
* SAPI: Track last executed mod and include in error messages (kwolekr)

=== Mapgen ===

* Mgv5: Remove blobgen. Remove crumble and wetness noises (paramat)
* Biome API: Re-calculate biome at every surface in a mapchunk column (paramat)
* Mgv6: Add heightmap. Do not make large caves that are entirely above ground (paramat)
* Cavegen, mgv5: Cleanup code (paramat)
* Fix memory leak in MapgenV6 (Zeno)
* Biome API: Enable decorations 
* Mgv5/mgv7: Add desert temples if desert stone detected in mapchunk (paramat)
* mg_decoration: Raise highest allowed deco top to max edge of voxelmanip (paramat)placed on water (paramat)
* Mgv6: Remove addDirtGravelBlobs, replaced by blob ore in Minetest Game (paramat)
* Mgv5/mgv7: Sprinkle dust from full_node_max.Y if chunk above is generated (paramat)
* Mgv7: 1 up , 1 down overgeneration for chunk border continuity (paramat)
* lua_api/l_mapgen: generate_ores/decorations: make p1, p2 optional (paramat)
* ObjDefManager, Mapgen SAPI: Huge refactoring (kwolekr)
* Treegen: Add pine tree. Force place trunks (paramat)
* Mgv6: Add optional snow biomes (paramat)
* Mgv6: Fix taiga, allow pine tree spawning on snowblocks (paramat)
* Mgv5/v7: Add check for water for deciding biome node stability (paramat)
* Mgv5: Fix above/below ground spawn when water level is altered (paramat)
* Biome API: Add biome-specific river water (paramat)
* Noise: Correct noise objects created with invalid dimensions (kwolekr)
* Ore: Add biomes parameter (kwolekr)
* Noise: Add noise unittests (kwolekr)
* Mapgen v5/6/7: Cleanup node resolver and aliases (paramat)
* Noise: Make buffer size parameters unsigned (kwolekr)
* Mapgen v5/v7: Detect sandstone, enable sandstone brick dungeons (paramat)
* SAPI/Noise: Add PerlinNoiseMap:getMapSlice() function (kwolekr)
* Mgv5/v7: Fix generateBiomes biome recalculation logic Biomegen down to y = -192 for mgv5 deep oceans. Improve code (paramat)
* Biome API, mgv7: Increase heat/humidity spreads. Improve mgv7 noise parameters (paramat)
* Mgv6: Enable snowbiomes by default. Double biome noise spread. 3 octaves, 0.5 persistence for humidity (paramat)
* Mgv5/mgv7: Trigger biome recalculation at underwater surfaces (paramat)
* Minimal: Edit mapgen aliases. Use blob ore for clay, update other ores. Update simple biomes. Cleanup code (paramat)
* Minimal: Add snow biome and jungleleaves nodes. Add mapgen aliases (paramat)
* Biome API: Enable biome generation to lower world limit (paramat)
* Mgv6: Don't create air gap in tundra at y = 48 in custom high terrain (paramat)
* Biome API: Add noise defined biome blend (paramat)
* Mapgen objects: Enable heatmap and humidmap for all biome api mapgens (paramat)
* Mgv7: Edit noise parameters. Fewer octaves, larger spreads. (paramat)
* Mgv5/mgv7 caves: Remove sand found in underground tunnels (paramat)
* Biome API: Increase heat and humidity noise spreads to 1000 (paramat)
* Cavegen: Cleanup code. Define constant for MGV7_LAVA_DEPTH (paramat)
* Mgv7: Lower base of mountain generation to -112 and define constant (paramat)
* Mgv7: Auto-set lowest mountain generation level (paramat)
* Cavegen: Mgv6: No small caves entirely above ground (paramat)
* Mgv7: Use density noise + density gradient for mountain terrain (paramat)
* Treegen: Rename pine tree mapgen alias (paramat)
* Biome API: Make fallback biome stone and water, disable filler (paramat)
* Cavegen V6: Make all caves consistent with 0.4.12 stable (paramat)

=== Other / Misc ===

* Start adding utf-8 support (est31, Ilya Zhuravlev)
* Unit tests must be done at integration process. (nerzhul)
* Improve FindIrrlicht.cmake module (Markus Koschany)
* Rename --do-unittests to --run-unittests as @Zeno- and @sfan5 requested (nerzhul)
* Clean up database API and save the local map on an interval (ShadowNinja)
* Don't start a server for map migration (ShadowNinja)
* Dungeongen: Optionally set ignore to be untouchable to disable floating dungeons (paramat)
* Finer progress bar updates when initializing nodes (est31)
* Minor cleanup: game.cpp (Zeno)
* Add support for the PCG32 PRNG algo (and associated script APIs) (kwolekr)
* Change filename of screenshots to something more human readable (Zeno)
* Clean scaling pre-filter for formspec/HUD. (Aaron Suen)
* Remove errorstream logging on password change (est31)
* Add reason to kicked log message and use present tense (est31)
* RotateAlongYAxis: For facedir case, return if param2 &gt;= 4 (paramat)
* Change lower limit of display_gamma to 1.0 (linear light) (Zeno)
* More reliable serverlist behaviour (HybridDog)
* Close keybind settings menu with esc (est31)
* Disable mesh cache by default (est31)
* Set server_announce to world.mt and respect modes when changing game (Sokomine)
* Use minetest logging facilities for irrlicht log output (ShadowNinja)
* Display an access denied message when client detects a server timeout (Kahrl)
* Change texture pack description file name (ExcaliburZero)
* Refactor particle code to remove the while loops (TeTpaAka)
* MoveItemSomewhere double bugfix (est31)
* Remove profiler.h include where it's not needed. Remove some unreachable and very old code (nerzhul)
* Ask auth handler to create auth when a default password is set (est31)
* Optional reconnect functionality (est31)
* Fix documentation of dedicated_server_loop (est31)
* Remove drivers dropdown in the settings tab (kilbith)
* Cleanup server addparticle(spawner) by merge two identical functions. (nerzhul)
* Precalculate mapblock relative size. This permit to remove many s16 calculs on runtime (nerzhul)
* Android: Add githash header to spare rebuilds after new commits (est31)
* Prepend "Lua: " before lua exceptions src/server.cpp src/emerge.cpp (Břetislav Štec)
* Improve Script CPP API diagnostics (kwolekr)
* Initialize random for verification key generation too (est31)
* game.cpp: Update cached settings (est31)
* SAPI: Disable unlockable time profiling (kwolekr)
* Client: disable mmdb modstore (est31)


== 0.4.11 → 0.4.12 ==

0.4.12 was released on February 18, 2015.

=== New features ===

* Add player direction to debug text (''yamanq'')
* Reorganized client and server tabs (''kilbith'')
* Implemented DPI automatic detection on X11 (''sapier'')

=== Map generation ===

'''v5:'''

* Caves check for biome nodes, only excavate stone under water level (''paramat'')
* Unease caves noises, use 0.3.x parameters (''paramat'')
* Blobgen after cavegen (''paramat'')
* Biomegen: remove “is replaceable content” bool (''paramat'')

=== Tweaks ===

* Increased step height on Android (''sapier'')
* Increased default &lt;code&gt;font_size&lt;/code&gt; (''BlockMen'')
* Improved minetest.desktop, added German and French text to minetest.desktop (''nerzhul'')
* More consistent progress bar (''sapier'')

=== Bug fixes ===

* Fixed font_size under Windows (''BlockMen'')
* Ignored old entities from 0.3 (''Novatux'')
* Fixed FTBFS on GNU/Hurd platform (''apoleon'')
* Modified Y positioning of health/breath statbars to prevent overlapping with hotbar (''kwolekr'')
* Fixed memory leaks related to gettext (''ShadowNinja'')
* Give full breath after death (''SmallJoker'')
* Fix &lt;code&gt;NDT_GLASSLIKE&lt;/code&gt; normals (''kahrl'')
* Water flowing fixes (''gregorycu'')
* Compiler tweaks and warning fixes (''ShadowNinja'', ''kwolekr'')
* Fix imprecise serialization of large numbers (''ShadowNinja'')
* Fix performance regression (''Zeno-'')
* Fix getCraftRecipe returning wrong recipes (''sapier'')
* Fix unused (and so, broken) enable_rollback_recording. (''nerzhul'')
* Fix .zip extraction (mod store) (''ngosang'')
* Fix translation memory leak (''ShadowNinja'')
* Fix F7 crash (''nerzhul'')
* Fixes to default screenshots in mainmenu (''Rui914'')
* Fix map_seed not changed when creating a new world after login to another (''fz72'')
* Add modname convention checking, fixes issues with mod enabling (''est31'', ''Novatux'')
* Fix problems related to still receiving damage after dying (''SmallJoker'', ''gregorycu'')

=== Modding-related changes ===
* Add &lt;code&gt;vein&lt;/code&gt; and &lt;code&gt;blob&lt;/code&gt; ore type (''kwolekr'')
* Change assignment to global in a function to warning (''rubenwardy'')

=== Vanilla game changes (minetest_game) ===

==== Gameplay ====

* Mossy cobblestone can now be smelted to stone (''MT-Modder'')
* Added straw, crafted with 9 wheat (''kilbith'')
* Added obsidian and obsidian brick stairs and slabs (''CraigyDavi'')

==== Visuals ====

* Many new textures renewed (''kilbith'')
* Changed furnace fire icons (''Kalabasa'')
* Added fancy inventory for bones (''CraigyDavi'')

=== Master server (server list) ===

* Announce MIN/MAX protocol version to server list (''est31'')


== 0.4.10 → 0.4.11 ==

0.4.11 was released on December 24, 2014.

=== New features ===

'''Big gameplay changes'''

* Added mapgen v5 ''(paramat)''
* Added enable_build_where_you_stand option ''(Sokomine)''

'''Smaller gameplay tweaks'''

* Added inventory right click drag and drop ''(sruz25, Zeno)''
* Remove buildable_to nodes without dropping item when replaced by a falling node ''(Casimir)''

'''Visual changes'''

* Reduced time of red screen when damaged ''(SmallJoker)''
* Added video driver selection to settings menu ''(sapier, webdesigner97)''
* Removed alpha channel from screenshots ''(BlockMen)''
* Added node highlighting ''(RealBadAngel)''
* Added configurable selection box width. Min width = 1, max = 5 ''(TriBlade9)''
* Changed default halo.png for better visibility ''(RealBadAngel)''
* Added in-game key change menu ''(Mushiden)''
* Improved lighting of the wielded item ''(kahrl, RealBadAngel)''
* Increased step smoothing to fit 1:1 stairs ''(Calinou)''
* Scale form elements consistently using new font engine by sapier ''(Zefram)''
* Made dropped items larger and rotate faster ''(Calinou)''
* Increase third person view distance ''(Calinou)''
* Made directional fog colors respect tonemap ''(Taoki)''
* Display serverlist flags as icons ''(kahrl, kilbith, VanessaE et al.)''

'''Build system changes'''

* Added ZLIBWAPI_DLL and LEVELDB_DLL CMake options ''(sfan5)''
* Removed legacy MINGWM10_DLL CMake option ''(sfan5)''
* Changed build directory for build bots to '_build' to prevent removal of Android build files ''(sfan5)''
* Updated 32-bit build bot (OpenAL updated, zlib updated) ''(sfan5)''
* Added -win64 suffix to build bots for 64-bit Windows builds ''(sfan5)''
* Updated the cURL the buildbot uses to 7.38.0 ''(sfan5)''
* Added Android Makefile support for builds without LevelDB ''(sapier)''
* Improved Travis CI configuration ''(Mikaela Suomalainen)''
* Added gettext to Travis build ''(ShadowNinja)''
* Build for win32 &amp; win64 on Travis too ''(sfan5)''
* Update MinGW toolchain downloads used by Travis ''(sfan5)''
* Fixed various build issues on Windows/MSVC ''(SmallJoker)'', Android ''(sapier, Kodexky)'', Mac OS X ''(Pavel Puchkin)''

'''Logistical changes'''

* Don't unload blocks if save failed ''(kwolekr)''
* Don't copy back already generated blocks on map generation ''(kwolekr)''
* Moved MapBlock (de)serializing code out of Database class ''(sfan5)''
* Don't include cmake_config_githash.h into files that don't need it ''(sfan5)''
* Moved #includes from version.h to version.cpp ''(kahrl)''
* Improved timeout calculation when packets are lost ''(sapier)''
* Refactored a section of ban.cpp ''(Selat)''
* Allowed use all 6 faces for special tiles ''(RealBadAngel)''
* Saved previously generated blocks on Mapgen blitback ''(kwolekr)''
* Refactored Settings ''(ShadowNinja, Zeno, kwolekr)''
* Added setting groups (used for NoiseParams) and multiline entries ''(kwolekr)''
* Added NodeResolver and cleaned up node name -&gt; content ID resolution system ''(kwolekr)''
* Added support for eased 3d noise ''(kwolekr)''
* Added notice when only minimal is installed ''(rubenwardy)''
* Split up mapgen.cpp ''(kwolekr)''
* Refactored the_game ''(Zeno)''
* Added Generator Element Management framework ''(kwolekr)''
* Cleaned up rollback ''(ShadowNinja)''
* Refactored main.cpp ''(Zeno)''
* Rewrote generate notification mechanism ''(kwolekr)''
* Rewrote fs::GetDirListing(file), fixing a potential buffer overflow ''(kahrl)''

'''Other changes'''

* Removed math mapgen ''(proller)''
* Removed indev mapgen ''(proller)''
* Removed proller from credits ''(proller)''
* Updated default control documentation ''(BlockMen)''
* Made lighting CPU-only by removing finalColorBlend implementation from shaders ''(RealBadAngel)''
* Added /dummyball &lt;count&gt; command to the minimal game ''(kahrl)''
* Made the LuaJIT exception wrapper handle more exceptions ''(kahrl)''
* Added missing doc for minetest.get_us_time() ''(sapier)''
* Made HTTPFetch use the configured bind_address ''(ShadowNinja)''
* Made config compatible with C++ 2011 ''(donat_b)''
* Added a .mailmap file ''(Stefan Beller)''
* Search for games using $MINETEST_SUBGAME_PATH ''(David Thompson)''
* Added Indonesian language ''(srifqi)''
* Updated translations ''(kilbith, ShadowNinja)''
* Replaced setting unlimited_player_transfer_distance with player_transfer_distance ''(SmallJoker)''
* Added last_login field to auth.txt ''(Ryan Newell)''
* Added tooltips to main menu games button bar ''(Wuzzy)''
* Added option 'eased' to NoiseParams ''(SmallJoker)''
* Added (optional) client-side saving of server map to disk ''(sfan)''
* Added name of node 'pointed at' to debug ''(rubenwardy, Zeno)''
* Added space between client names in status text ''(Muhammad Rifqi Priyo Susanto)''
* Disabled loading .mtl files ''(RealBadAngel)''
* Made biome heat and humidity noise parameters user-configurable ''(kwolekr)''
* Added paste command (Ctrl-V) in chat console ''(kahrl)''
* Responsive tooltip offset for Android ''(Kodexky)''
* Allowed footstep sounds to play for liquid and ladder nodes ''(Taoki)''
* Added basic support for generating API documentation using Doxygen ''(Jürgen Doser)''
* Set WM_CLASS window hint for Xorg ''(kwolekr)''

=== Performance ===

* Disabled preload_item_visuals by default ''(ShadowNinja)''
* Sped up mapblock_mesh ''(RealBadAngel, Zeno)''
* Implemented caching of facedir rotated meshes (controlled by enable_mesh_cache setting) ''(RealBadAngel)''
* Removed most exceptions from getNode() (and variants) ''(Zeno)''
* Sped up removing a node (less block mesh updates) ''(RealBadAngel)''
* Reduced number of extrusion meshes to (usually) 5 instead of one per item ''(kahrl)''
* Improved VoxelArea variable locality ''(Wouters Dorian)''
* Optimised functions from CNodeDefManager and VoxelManipulator ''(Zeno)''
* Optimised serialization, for example by using machine native byte swapping if available ''(Rafael Reilova)''
* Optimised main client loop ''(Zeno)''
* Optimised noise implementations ''(kwolekr)''
* Optimized getLight() by 2x ''(Zeno)''
* Stopped liquid queue from eating up more and more RAM; also liquid_loop_max now defaults to 100000 ''(Zeno, celeron55)''
* Changed TileSpec::frames to be std::vector not std::map ''(unknown, Zeno)''

=== Bug fixes ===

* Fixed face shading issues ''(RealBadAngel)''
* Fixed crash reported here: https://forum.minetest.net/viewtopic.php?f=6&amp;t=9726 ''(Novatux)''
* Fixed flipped textures for drawtype "glasslike" ''(sapier)''
* Fixed indexing error in timer processing ''(Zefram)''
* Made tooltip_show_delay=0 work ''(Zefram)''
* Fixed error handling on inconsistent client ready message ''(sapier)''
* Fixed texture hack in fences ''(RealBadAngel)''
* Fixed texture glitches for plants with visual scale &gt; 1.0 (jungle grass) ''(RealBadAngel)''
* Fixed makeCuboid to apply rotations to all faces when 1 tile is given ''(RealBadAngel)''
* Fixed display of interior of glasslike_framed node when its not defined ''(RealBadAngel)''
* Fixed LuaVoxelManipulator memory leak ''(Zeno-)''
* Fixed seeds corrupting world creation menu formspec ''(ShadowNinja)''
* Made face shading correct for all possible lighting modes ''(RealBadAngel)''
* Fixed liquid sources and flowing surfaces having different brightness ''(RealBadAngel)''
* Fixed main menu game initialization ''(BlockMen)''
* Made safeWriteToFile() remove empty file if there is an error ''(Selat)''
* Don't call player events without having player to do a event for ''(sapier)''
* Fixed "ghost" blocks if block update is "on wire" while player digs nodes ''(sapier)''
* Added player name length checks ''(sapier)''
* Fixed chat messages capturing mouse interactions for menu/formspecs ''(sapier)''
* Fixed segmentation fault if popping from empty stack (L-system trees) ''(Zeno)''
* Fixed interlaced 3D mode second image being flipped when compiling with Irrlicht 1.8+ ''(sapier)''
* Fixed only one texture being updated on window resize, breaking side-by-side and top-bottom 3D modes ''(sapier)''
* Fixed access to invalid data when receiving empty packets ''(sapier)''
* Fixed some locking bugs ''(kahrl, ShadowNinja)''
* Use round if falling node is misplaced ''(SmallJoker)''
* Fixed and simplified player modification checks ''(ShadowNinja)''
* Fixed unit tests failing if IPv6 not available ''(Zeno)''
* Fixed wield mesh getting clipped by camera far value ''(kahrl)''
* Fixed raillike rendering bug on Android ''(Kodexky)''
* Don't corrupt stepheight when setting other properties ''(Ciaran Gultnieks)''
* Fixed mouse events getting passed from a table's scrollbar to its parent ''(kahrl)''
* Fixed minetest.place_schematic() when defined by a Lua table ''(kwolekr)''
* Ignore .name directories and files in main menu ''(SmallJoker)''
* Fixed some typos ''(sapier, rubenwardy, William Teder, ShadowNinja, kahrl, Zeno)''

=== Modding-related changes ===

* New drawtypes: mesh ''(RealBadAngel)'', firelike ''(TriBlade9)'', glasslike_framed_optional ''(BlockMen)''
* New texture modifiers: ^[mask ''(sfan5)'', ^[colorize ''(BlockMen)''
* New formspec element: scrollbar ''(sapier)''
* Allowed non-integer sizes for item_image[] ''(Zefram)''
* Added texture grouping via ( ... ) ''(sfan5)''
* Added mod profiling support ''(sapier)''
* Added compression API ''(ShadowNinja)''
* Added update of the Mapgen VoxelManipulator on buffer invalidation ''(kwolekr)''
* Added LuaVoxelManip methods: get_node_at() and set_node_at() ''(kwolekr)''
* Simplified and optimized schematic replacements ''(ShadowNinja)''
* Made dump's output prettier ''(ShadowNinja)''
* Added collision_box node property ''(RealBadAngel)''
* Added warning when creating a global variable (unless it has the same name as the current mod) ''(ShadowNinja)''
* Added minetest.copy_table(table), vector.apply(v, func) and math.sign(x, tolerance) ''(SmallJoker)''
* Improved documentation for remove_item, string_to_pos, dig_node, on_step, get_meta ''(Ciaran Gultnieks)''
* Added minetest.clear_registered_biomes() ''(kwolekr)''
* Added new noise parameters: flags and lacunarity ''(kwolekr)''
* Added support for NoiseParams in minetest.get_perlin() ''(kwolekr)''
* Exposed mapgen chunksize in on_mapgen_init callbacks ''(kwolekr)''

=== Vanilla game changes (minetest_game) ===

==== Gameplay ====

* Made opened trapdoor climbable ''(Zefram)''
* Made doors form double-doors with other doors of any kind ''(Zefram)''
* Added filled buckets to creative inventory ''(Zefram)''
* Enabled dungeon generation by default ''(Amaz1)''
* Improved handling of boats ''(paramat)''
* Added pine trees, with needles, tree, wood and saplings ''(paramat, PilzAdam)''
* Made player-placed leaves not decay ''(PilzAdam)''
* Reworked infotext of furnace ''(PilzAdam)''
* Added Obsidian Bricks ''(HybridDog)''
* Changed controls of screwdriver ''(tenplus1, PilzAdam)''

==== Visuals ====

* Changed ingot textures ''(Nore)''
* Made TNT smoke round ''(ShadowNinja)''
* Made fire use new fire drawtype ''(BlockMen)''
* Added new textures for cobble and furnace ''(Neuromancer56, BlockMen)''
* Added new textures for grass ''(BlockMen, Philipbenr)''
* Made glass use new, optional framed drawtype ''(BlockMen)''
* Added new textures for apples, chests, dirt, desert stone bricks, HP bar, snowballs ''(BlockMen)''
* Added new textures for ores, vessels, grass (plant), leaves and ladders ''(kilbith)''
* Added new textures for flowers ''(RHRhino)''
* Added new textures for doors ''(Amaz1)''
* Changed soil textures to use an overlay over default_dirt.png ''(PilzAdam)''
* Added new textures for soil ''(PilzAdam)''
* Added a bit white to crack texture ''(ShadowNinja)''
* Made signs a 3D box, instead of just a 2D plane ''(Calinou)''

==== Bug fixes ====

* Fixed crafting recipe for iron bars ''(BlockMen)''
* Added protection support to TNT ''(BlockMen)''
* Retain sign text when editing is aborted via Esc ''(Zefram)''
* Fixed Desert Sand Soil dropping itself ''(Amaz1)''
* Consistently use group:stick in tool recipes ''(Zefram)''
* Fixed boats flying upwards ''(paramat)''
* Fixed hoes wearing out in creative mode ''(BlockMen)''
* Fixed brown dye being in yellow color group ''(BlockMen)''
* Fixed player staying attached when removing boat ''(BlockMen)''
* Removed “leaked” global variables ''(PenguinDad, kaeza, CraigyDavi, PilzAdam)''
* Fixed various bugs with fire sounds ''(PilzAdam)''
* Fixed possible stacking of books in bookshelf ''(MT-Modder)''
* Fixed soil drying out if nearby water is unloaded ''(PilzAdam)''
* Fixed rotating of locked doors to bypass them ''(PilzAdam)''
* Fixed screwdriver overriding bits in param2 that are not used for rotation ''(PilzAdam)''

==== Miscellaneous ====

* Added enable_tnt setting ''(ShadowNinja, Yepoleb)''
* Optimized TNT explosion ''(ShadowNinja)''
* Added option for custom opening and closing sound for doors ''(Jat15, Zefram)''
* Removed generation of flowers, papyrus, cactus and grass (plant) generation from other mapgenerators than v6 ''(paramat)''
* Removed ore definitions for indev mapgen ''(paramat)''
* Added all saplings to group sapling ''(PilzAdam)''
* Allowed the group book to be placed in bookshelf ''(PilzAdam)''
* Added a minetest.conf.example with all settings from minetest_game, that can be changed in mintest.conf ''(PilzAdam)''
* Removed remains of weather and finite liquids ''(PilzAdam)''
* Restructured and moved furnace code to furnace.lua ''(PilzAdam)''

=== Master server (server list) ===
* Announce mg_name from map_meta.txt instead of minetest.conf ''(kahrl)''

== 0.4.9 → 0.4.10 ==

0.4.10 was released on July 6, 2014.

=== New features ===

'''Big gameplay changes'''

* Added third person view ''(BlockMen)''
* Removed finite liquid and weather ''(proller)''

'''Smaller gameplay tweaks'''

* Create bones only when the player's inventory is not empty &amp; remove the bones when emptied ''(arsdragonfly)''
* Made pause menu actually pause singleplayer game and use lower maximum FPS in it ''(celeron55)''
* Prevented placing node when player would be inside new node ''(BlockMen)''
* Drop an item instead a stack while sneaking ''(Lord89James)''
* Added support for exiting formspecs by doubleclicking outside ''(sapier)''

'''Logistic changes'''

* Made build prefer pkg-config for freetype2 detection ''(hasufell)''
* Added function to deregister a profiler from profiler list ''(sapier)''
* Made MutexQueue use jsemaphore for signaling ''(sapier)''
* Added maximum recursion depth to read_json_value ''(ShadowNinja)''
* Made default User-agent follow RFC 2616 ''(ShadowNinja)''
* Include system info in the HTTP user agent on Windows ''(sfan5)''
* Added proper client initialization ''(sapier)''
* Settings: Add no-exception variants of each get method ''(kwolekr)''
* Huge overhaul of the entire MapgenParams system ''(kwolekr)''
* ServerEnvironment: Remove direct dependency on EmergeManager ''(kwolekr)''
* Replace pause, message, and death menus by formspec ones ''(sapier)''
* Pass arguments by reference, reducing data copies ''(Selat)''
* Cleaned up client init states by bumping protocol version ''(sapier)''
* Added support for named threads on Linux, BSD, and Windows (MSVC-only) ''(sapier, ShadowNinja)''
* Infered ipv6_server from bind_address; fixed client connect to IN(6)ADDR_ANY ''(kahrl)''
* Fixed all warnings reported by clang ''(sfan5)''
* Removed locks that aren't absolutely required from JThread ''(sapier)''
* Use narrow_to_wide in gettext instead of operating system dependent conversion function ''(sapier)''
* Organized builtin into subdirectories ''(ShadowNinja)''
* Switched to "core" namespace internally ''(ShadowNinja)''
* Mapped Irrlicht log level to Minetest's and allowed writing Irrlicht logs to debug file ''(RelaBadAngel)''
* Made print() NUL-safe ''(ShadowNinja)''
* Added formspec toolkit and re-factored main-menu to use it ''(sapier)''
* Reworked dumping functions ''(ShadowNinja)''
* Improved performance by removing some temporary objects ''(sapier)''
* Added an AppData file ''(David Gumberg)''
* United node shaders and improved shader performance ''(RealBadAngel)''
* Made players only stay loaded while they're connected ''(ShadowNinja)''
* Added formspec API versioning ''(sapier)''
* Added support for multipart/form-data to HTTPFetch ''(ShadowNinja)''
* Improved error reporting of LevelDB backend ''(sfan5)''

'''Visual changes'''

* Added waypoint HUD element ''(RealBadAngel)''
* Added on-the-fly normal map generation ''(RealBadAngel)''
* Made sun and moon textureable ''(RealBadAngel)''
* Made formspec text-area word-wrap ''(RealBadAngel)''
* Added support for DPI based HUD scaling ''(sapier)''
* Made debug text adjust it's border to the screensize ''(ShadowNinja)''
* Added download rate to non-HTTP media progress bar ''(sapier)''
* Added support for interlaced-polarized, top-bottom, and side-by-side 3D screens ''(sapier)''
* Made pause menu hide before "Shutting down..." message is drawn ''(sapier)''
* Sorted commands and privileges alphabetically in '/help' ''(kaeza)''
* Improved face shading with and without shaders ''(RealBadAngel)''
* Added support for scalable font and GUI elements ''(sapier)''
* Made GUITable mouse wheel scrolling faster ''(kahrl)''

'''Other changes'''

* Added the option to bind to a specific address ''(ShadowNinja)''
* Made flag strings clear specified flag with 'no' prefix ''(kwolekr)''
* Added check to avoid usage of broken LuaJIT &lt; 2.0.0-beta-8 ''(sapier)''
* Lots of new and updated translations ''(many contributors)''
* Improved performance of ABMs by only calcuating object counts once ''(CiaranG)''
* Improved win32 file version information ''(sapier)''
* Documented CMake options in README ''(sfan5)''
* Corrected misleading detached inventory error message ''(CiaranG)''
* Added more informative error messages for inventory and item method errors ''(ShadowNinja)''
* Added redis database backend ''(sfan5)''
* Moved the old stuff to doc ''(BlockMen)''
* Removed dependency on marshal and many other async changes ''(ShadowNinja)''
* Made item entity stacks merge on the ground and add TTL to item entities ''(RealBadAngel)''
* Updated buildbot scripts and added 64-bit buildbot ''(sfan5)''
* Added support for directly starting a world by name from command line ''(sapier)''
* Many performance improvements and memory usage reductions ''(sapier)''
* Added support for Android 2.3 and later ''(sapier)''

=== Bug fixes ===

* Fixed objects being selected behind a node ''(Novatux)''
* Fixed absence of images when compiled with RUN_IN_PLACE=0 ''(xyz)''
* Added option to link to OpenGL ES ''(sfan5)''
* Fixed CMake list parsing in build ''(hasufell)''
* Fixed cutting of multi-line error messages at half of second line in main menu dialog ''(celeron55)''
* Created new instance of mesh every time it's required ''(celeron55)''
* Escaped error messages in error dialog ''(PilzAdam)''
* Added operating system to user agent ''(proller)''
* Prevented auto-rotated nodes from replacing the nodes they were placed on ''(ShadowNinja)''
* Added protection support to auto-rotated nodes ''(ShadowNinja)''
* Prevented looking up node texts in a endless recursion loop ''(sapier)''
* Set locale properly when built without gettext support ''(celeron55)''
* Fixed Minetest's reliable UDP implementation ''(sapier)''
* Compare values instead of pointers in Inventory::operator== ''(kahrl)''
* Fixed some errors reported by clang static analyzer ''(xyz)''
* Fixed win32 reading semaphore count not working (broke all queues) ''(sapier)''
* Prevented player from jumping into nodes from below ''(BlockMen)''
* Fixed cURL DLL not getting installed when sound was disabled ''(sfan5)''
* Fixed error on mod download failure ''(ShadowNinja)''
* Fixed use of previously deallocated EmergeManager ''(kwolekr)''
* Fixed only half of unreliable queue being handled per step in worst case ''(sapier)''
* Fixed player textures by adding '-' to list of allowed characters in media filenames ''(sapier)''
* Fixed texture pack names corrupting mainmenu ''(ShadowNinja)''
* Fixed crash when a error occurred in a globalstep callback ''(ShadowNinja)''
* Fixed a heap-use-after-free in pause menu ''(xyz)''
* Added checks for invalid user input for important settings ''(kwolekr)''
* Fixed memory leak in database migration ''(Selat)''
* Fixed invalid check for fread error on extracting zip ''(sapier)''
* Fixed a unloaded but active block problem ''(CiaranG)''
* Fixed rendering glitches when far from the center of the map ''(Novatux)''
* Fixed race condition on exit to menu ''(sapier)''
* Fixed generating winresource.o with build dir != source dir ''(sfan5)''
* Fixed special characters in pause and message menu ''(BlockMen)''
* Fixed game pause in singleplayer ''(BlockMen)''
* Fixed "ghost stacks" created when a player clicks an item on the ground ''(Novatux)''
* Fixed double sending of chat messages ''(sapier)''
* Fixed bug in RemoteClient::GetNextBlocks ''(celeron55)''
* Fixed crash when teleporting near unknown node ''(BlockMen)''
* Fixed broken IPv4 serialization on win32 ''(sapier)''
* Fixed invalid liquid lighting ''(RealBadAngel)''
* Fixed wrong node texture rotation for facedirs 5 and 7 ''(MetaDucky)''
* Fixed crash when trying to draw too many items from inventory in HUD ''(celeron55, RealBadAngel)''
* Fixed a text border update bug ''(ShadowNinja)''
* Added a hack to avoid a 2 second startup delay on local games ''(sapier)''
* Fixed player:set_animation() in third person view ''(BlockMen)''
* Fixed numeric underflow on calculating window size adjustment ''(sapier)''
* Fixed heart + bubble bar size on different texture packs ''(sapier)''
* Added a limit to node meta data resolving recursion ''(ShadowNinja)''
* Fixed typo (std::encl) in src/gettext.cpp ''(JakubVanek)''
* Fixed wielded index being greater than inventory size ''(RealBadAngel)''
* Fixed chat overlaying full screen ''(sapier)''
* Fixed build on big endian architectures ''(mat8913)''
* Made lack of IPv6 non-fatal to unit tests ''(sapier)''
* Fixed the Map and Rollback databases not closing ''(sapier)''
* Fixed day/night passing at the wrong speed on some architectures ''(sapier)''
* Handle missing tablecolumns[] ''(kahrl)''
* Fixed wrong status text rectangle ''(sapier)''
* Fixed GenericCAO not grabing member objects, causing them to be deleted early ''(sapier)''
* Fixed support for Max OSX ''(mdoege)''
* Fixed regression in light calculation ''(sapier)''

=== Modding-related changes ===

* Passed pointed_thing to after_place_node ''(ShadowNinja)''
* Documented "wielditem" visual ''(ShadowNinja)''
* Passed pointed_thing to on_rightclick ''(Novatux)''
* Added forceloading ''(Novatux)''
* Added InvRef::get/set_lists() ''(ShadowNinja)''
* Mapgen V6: Added flag to stop mud flow ''(kwolekr)''
* Allowed vertical axis particle rotation constraint ''(khonkhortisan)''
* Used tables for adding particles, deprecated former way ''(khonkhortisan)''
* Added formspec table ''(kahrl)''
* Added minetest.override_item ''(ShadowNinja)''
* Added reading of slice probability table from schematic descriptors ''(kwolekr)''
* LuaVoxelManip: Added get_param2_data and set_param2_data ''(kwolekr)''
* Added pointed_thing to minetest.register_on_placenode ''(ShadowNinja)''
* Added pointed_thing to minetest.register_on_punchnode and on_punch callbacks ''(ShadowNinja)''
* Added player:set_sky() with simple skybox support ''(celeron55)''
* Added player:override_day_night_ratio() for arbitrarily controlling sunlight brightness ''(celeron55)''
* Added minetest.kick_player(name, reason) ''(sapier)''
* Added capability to read table flag fields from Lua API ''(kwolekr)''
* Added minetest.set_noiseparam_defaults() ''(kwolekr)''
* Added force_placement parameter to minetest.place_structure ''(kwolekr)''
* Removed "Server -!- " prefix from player messages ''(ShadowNinja)''
* Updated set_mapgen_params and set_gen_notify to use new flag format ''(kwolekr)''
* Added player:set_local_animations() ''(BlockMen)''
* Added player:set_eye_offset() ''(MirceaKitsune, BlockMen)''
* Added support for function serialization to minetest.serialize ''(ShadowNinja)''
* Added proper Lua API deprecation handling ''(sapier)''
* Made dump2() return the serialized string, like dump() ''(ShadowNinja)''
* Added item eat callback ''(rubenwardy)''
* Added success and output return values to chat commands ''(ShadowNinja)''
* Allowed custom liquids to have drops ''(sfan5)''
* Made dropdown formspec elements send their values the same way that buttons do ''(sapier)''
* Reworked tooltips, adding a tooltip element ''(RealBadAngel)''
* Reworked the glasslike_framed drawtype ''(RealBadAngel)''

=== Vanilla game changes (minetest_game) ===

* Added desert cobblestone, dropped by desert stone ''(brunob.santos, sfan5)''
* Added desert stone brick and sandstone brick stairs/slabs ''(Amaz1)''
* Added extended doors mod ''(PenguinDad, BlockMen)''
* Added glass panes and iron bars ''(BlockMen)''
* Added TNT ''(BlockMen)''
* Reworked farming mod, added API ''(webdesigner97)''
* Upwards digging for papyrus and cactus ''(casimir)''
* Additional mirrored recipes for axes ''(marvok)''
* Bookshelves have an inventory (for books) ''(arsdragonfly)''
* Added furnace protection and progress visualization ''(Krock)''
* Added /sethome and /home commands (with “home” privilege) ''(sfan5)''
* Added Mese and diamond hoes ''(BlockMen)''
* Enabled jungles by default on new worlds ''(sfan5, BlockMen)''
* Increased crafting output for stairs (4 → 6) ''(Jonathon Station)''
* Made punching bones pick up items ''(Krock)''
* Made items drop if no space for bones ''(Krock)''
* Don't create bones when inventory is empty ''(arsdragonfly)''
* Added cuboid wieldhand ''(paramat)''
* Many new textures, added inventory backgrounds ''(BlockMen)''

=== Master server (server list) ===

* Fixed null string escape in server list ''(proller)''
* Made server announcing use multipart/form-data ''(ShadowNinja)''
* Fixed boolean typing and alignment ''(ShadowNinja)''
* Fixed code style, const-correctness, and types ''(ShadowNinja)''
* Moved the master server to separate repository ''(ShadowNinja)''
* Fixed seconds validity check ''(ShadowNinja)''
* Made README more complete ''(ShadowNinja, sfan5)''
* Made the hovered entry highlight in very light gray ''(sfan5)''
* Switched to 'display' instead of 'visibility' to prevent the page from having white space at the bottom ''(sfan5)''

== 0.4.8 → 0.4.9 ==

0.4.9 was released on January 1, 2014.

=== New features===
&lt;!--'''Big gameplay changes'''--&gt;
&lt;!--'''Smaller gameplay tweaks'''--&gt;

'''Logistic changes'''

* Added SQLite rollback ''(Mario Barrera &amp; ShadowNinja)''
* Implemented HTTPFetch ''(kahrl)''
* Replaced SimpleThread with JThread ''(sapier)''
* Added handling for LuaErrors in Lua -&gt; C++ calls on LuaJIT ''(ShadowNinja)''
* Made SHA1::addBytes(..., 0) a no-op instead of an assertion failure ''(kahrl)''

'''Visual changes'''

* Reworked shaders ''(RealBadAngel)''
* Added configurable font shadow ''(xyz)''
* Added Directional fog + horizon colors ''(Taoki)''
* Removed FPS from window title (Doubles performance on some window managers) ''(PilzAdam)''

'''Other changes'''

* Implemented modstore search tab and version picker ''(sapier)''
* Added check for denied access in itemdef/nodedef/media fetch loop ''(kahrl)''

=== Bug fixes ===

* Fixed line_of_sight() ''(sapier)''
* Fixed modstore/favourites hang by adding asynchronous Lua ''(sapier)''
* Fixed LevelDB maps ''(sfan5)''
* Fixed Lua mapgen override param handling ''(kwolekr)''
* Fixed leak and possible segfault in minetest.set_mapgen_params ''(kwolekr)''
* Fixed segfault in indev cave generation due to uninitialized variable ''(kwolekr)''
* Added check for if width, height or start index of a list[] is negative ''(PilzAdam)''
* Fixed single character formspec field labels ''(BlockMen)''
* Added handling for Lua errors in on_generate callbacks ''(kwolekr)''
* Update mapgen params in ServerMap after Mapgen init ''(kwolekr)''
* Fixed wrong names for parallax settings in config example. ''(RealBadAngel)''
* Fixed particle code ignoring return value of std::vector::erase(). ''(kahrl)''
* Fixed minetest.facedir_to_dir when param2 is 5 or 7. (Again) ''(Novatux)''
* Fixed InventoryList reading order ''(ShadowNinja)''
* Initialize world before creating BanManager and RollbackManager ''(ShadowNinja)''
* Fixed exception caused by destroying sockets on Server shutdown ''(kwolekr)''

=== Modding-related changes ===

* Added area parameters back to calc_lighting() and set_lighting() ''(kwolekr)''
* Added get_light_data() and set_light_data() to LuaVoxelManip ''(kwolekr)''
* Added minetest.swap_node ''(Novatux)''
* Assumed a selection box for fences ''(0gb.us)''
* Decoration: Added schematic Y-slice probability support ''(kwolekr)''
* Added sneak and sneak_glitch in set_physics_override() ''(PilzAdam)''
* Used a table in set_physics_override() ''(PilzAdam)''
* Added 'on_prejoinplayer' callback ''(kaeza)''
* Made line_of_sight return blocking node position ''(stujones11)''
* Removed support for optdepends.txt ''(ShadowNinja)''
* Added map feature generation notify Lua API ''(kwolekr)''
* Added 'minetest.write_json' ''(ShadowNinja)''
* Log guilty node name when allow_metadata_inventory_move/put/take fails ''(kahrl)''
* Fixed enum element name in Lua HUD code (position vs. pos) ''(kaeza)''

== 0.4.7 → 0.4.8 ==

0.4.8 was released on November 24, 2013.

=== New features ===

'''Big gameplay changes'''

* Added drowning ''(PilzAdam, RealBadAngel, BlockMen)''
* Added weather support ''(proller)''

'''Smaller gameplay tweaks'''

* Added new sounds ''(someone who can't decide if he wants to be called mitori or mito551)''
* Don't predict placing and removing nodes if interact privilege is missing ''(PilzAdam)''

'''Logistic changes'''

* Clean up rendering code a bit (increases FPS by 5 to 10) ''(Exio)''
* Added support for IPv6 ''(matttpt)''
* Don't write player files all the time if they are not modified ''(PilzAdam)''
* Made the main menu Lua based ''(sapier, kahrl)''
* Change static ContentFeatures array into a vector ''(rathgit, kahrl)''
* Allow multiple singleplayer games at the same time ''(PilzAdam)''
* Added texture pack selection to main menu ''(Novatux)''
* Don't write files directly but rather write to a temporary file that gets renamed after succesfully written; fixes many causes of corrupted files ''(PilzAdam)''
* Adjust the Lua API structure and improve header inclusion to decrease compile time ''(kahrl)''
* Database abstraction, LevelDB support ''(sfan5, wieszak, xyz)''
* Use the Settings Lua interface to read world.mt ''(PilzAdam)''
* Use engine.is_yes() in mainmenu ''(PilzAdam)''
* Always use builtin JThread library ''(kwolekr)''
* Optimized minetest.get_connected_players() ''(fairiestoy)''
* Removed mapgen_air alias (#935) ''(0gb.us)''
* Raise the maximum node limit to 0x7fff ''(ShadowNinja)''
* Shortened lines in falling node code ''(ShadowNinja)''
* Moved the sapling growing and grass adding/removing ABMs to Lua ''(Novatux)''
* Portability fixes for OpenBSD (and possibly NetBSD and others) ''(Warr1024)''
* Accept hexadecimal and string values for seeds ''(kwolekr)''
* Pass a errfunc to &lt;code&gt;lua_pcall&lt;/code&gt; to get a traceback ''(ShadowNinja)''
* Replaced print()s with minetest.log() in builtin ''(PilzAdam)''
* Updated parameter index of set_lighting() ''(kwolekr)''

'''Visual changes'''

* Added support for bumpmapping ''(RealBadAngel)''
* Added diagonal liquid animation ''(kahrl)''
* Damage updates and effects are now sent to other players ''(PilzAdam)''
* Made fog depend on humidity ''(proller)''
* Added git hash to version string in top left corner of window ''(kahrl)''
* Added --version option ''(kahrl)''
* Fixed liquid_range, fixing graphical glitches on old servers ''PilzAdam)''
* Added seed entry to world creation dialog ''(kwolekr)''

'''Other changes'''

* Play &lt;code&gt;player_damage.ogg&lt;/code&gt; when recieving damage and &lt;code&gt;player_falling_damage.ogg&lt;/code&gt; on falling damage ''(PilzAdam)''
* Added basic unicode support to the console in Linux ''(Exio)''
* Added a setting for max loop count per step in liquid update ''(PilzAdam)''
* Added math mapgen with fractal based worlds ''(proller)''
* Disallow the name 'singleplayer' in a multiplayer server ''(PilzAdam)''
* Added &lt;code&gt;max_objects_per_block&lt;/code&gt; to minetest.conf to control the maximum number of static objects per block ''(Novatux)''
* Removed broken farmesh ''(kahrl)''
* Added &lt;code&gt;language&lt;/code&gt; setting to &lt;code&gt;minetest.conf&lt;/code&gt; which forces Minetest to use specified translation ''(xyz)''
* Added configurable PRAGMA synchronous = ''(proller)''
* Added curl, freetype and luaJIT to CMAKE_BUILD_INFO ''(PilzAdam)''
* Lowered the default max_users from 100 to 15 ''(ShadowNinja)''
* Removed doc/gpl-2.0.txt, add doc/lgpl-2.1.txt ''(kahrl)''
* Masterserver update ''(proller)''
* Moved new core devs to the "Core Developpers" section of mainmenu ''(Novatux)''
* Added ShadowNinja's email address to the main menu credits ''(ShadowNinja)''
* Used a doT.js template for the serverlist ''(ShadowNinja)''
* Added default_privs to masterserver and JS autoload ''(proller)''
* Added BlockMen to core dev list ''(PilzAdam)''
* Added missing RequestQueue doc ''(sapier)''
* Prevent enabling Shaders if Direct3D is used ''(PilzAdam)''
* Fix my name (doesn't display correctly because of utf8 characters) ''(Novatux)''

=== Bug fixes ===

* Fixed &lt;code&gt;print(nil)&lt;/code&gt; crashing the server ''(kahrl)''
* Fixed output of profiler (F6) when using freetype ''(kahrl)''
* Fixed bug where wrong item is selected when dropping something in the inventory on another stack ''(kahrl)''
* Fixed lighting bug caused by disappearing lava ''(PilzAdam)''
* Fixed /unban command crashing the server ''(kahrl)''
* Fixed lighting bug with 6d facedir ''(RealBadAngel)''
* Fixed and improved view range tuner ''(celeron55)''
* Fixed and improved anticheat ''(celeron55)''
* Fixed server getting completely choked up on even a little of DoS ''(celeron55)''
* Fixed crack overlay for animated textures ''(kahrl)''
* Added fallback font for Chinese, Japanese and Korean languages, the translations in those languages can now be displayed ''(xyz)''
* Fixed most object duplication bugs ''(celeron55)''
* Fixed hotbar padding at bottom ''(BlockMen)''
* Fixed comments about length of server step ''(ShadowNinja)''
* Fixed some warnings and other minor details ''(kwolekr)''
* Re-fixed hud_change stat argument retrieval  ''(kwolekr &amp; ShadowNinja)''
* Fixed wrong error message on invalid use of the formspec element image_button ''(RealBadAngel)''
* Fixed object duplication bug ''(celeron55)''
* Made unknown nodes stop falling nodes properly ''(ShadowNinja)''
* Fixed ignoring of "diggable" property of nodes ''(0gb.us)''
* Fixed invalid use of pointer to temporary object in JSON to Lua conversion ''(sapier)''
* Fixed win32/msvc i18n ''(sapier)''
* Fixed weather ''(kwolekr)''
* Prevented shaders from being created when disabled ''(kwolekr)''
* Fixed formspec background padding when clipped ''(BlockMen)''
* Fixed array limit check when reading Lua specialtiles table ''(MetaDucky)''
* Fixed invalid listname and listsize not handled correctly in set_size ''(sapier)''
* Handle blank blocks in database ''(kwolekr)''
* Fixed multicaller support in RequestQueue ''(sapier)''
* Fixed result of processed request being written to invalid (non-existent) ResultQueue if requesting thread timed out ''(sapier)''
* Fixed gettext compile issues under win32 ''(MetaDucky)''
* Made mapgen V6 respect water_level setting ''(kwolekr)''
* Fixed usage of 'minetest' where 'engine' was intended ''(ShadowNinja)''
* Fixed crash when pressing Enter key in formspec menu ''(kahrl)''
* Fixed rename modpack button not working, fixes #1019 ''(PilzAdam)''
* Don't continue trying to deserialize blank block data ''(kwolekr)''

=== Modding-related changes ===

* Added ingame modstore to download mods from mmdb ''(sapier)''
* Added &lt;code&gt;minetest.register_decoration()&lt;/code&gt; ''(kwolekr)''
* Added schematic support; new functions &lt;code&gt;minetest.place_schematic()&lt;/code&gt; and &lt;code&gt;minetest.create_schematic()&lt;/code&gt; ''(kwolekr)''
* Seperated formspecs of furnace and chests to provide override by mods ''(BlockMen)''
* Added Lua VoxelManip ''(kwolekr)'' http://forum.minetest.net/viewtopic.php?id=6396
* Added vector helpers ''(ShadowNinja)''
* Added &lt;code&gt;range&lt;/code&gt; to item definition ''(PilzAdam)''
* Added &lt;code&gt;after_use&lt;/code&gt; to item definition ''(Novatux)''
* Added &lt;code&gt;liquid_range&lt;/code&gt; to node definition ''(PilzAdam)''
* Added &lt;code&gt;collide_with_objects&lt;/code&gt; to entitiy definition, to disable object &lt;-&gt; object collision ''(PilzAdam)''
* Added &lt;code&gt;minetest.facedir_to_dir()&lt;/code&gt; and 6d facedir support for &lt;code&gt;minetest.dir_to_facedir()&lt;/code&gt; ''(hdastwb)''
* Added gettext for &lt;code&gt;image_button&lt;/code&gt; ''(BlockMen)''
* Added &lt;code&gt;stepheight&lt;/code&gt; to entity definition ''(sapier)''
* Added support for multiple &lt;code&gt;wherein&lt;/code&gt; nodes in &lt;code&gt;minetest.register_ore()&lt;/code&gt; ''(PilzAdam)''
* Added &lt;code&gt;minetest.register_on_cheat()&lt;/code&gt; ''(celeron55)''
* Added &lt;code&gt;automatic_face_movement_dir&lt;/code&gt; to entity definition ''(sapier)''
* Added &lt;code&gt;player:hud_set_hotbar_image()&lt;/code&gt; and &lt;code&gt;player:hud_set_hotbar_selected_image()&lt;/code&gt; ''(PilzAdam, BlockMen)''
* Added percent scaling for HUD images ''(BlockMen, kahrl)''
* Added &lt;code&gt;minetest.get_gametime()&lt;/code&gt; ''(Novatux)''
* Allowed manually specifying param2 in minetest.item_place() and return success ''(PilzAdam)''
* Added set_name(), set_count(), set_wear() and set_metadata() to Lua ItemStack ''(PilzAdam)''
* Added support for parameter 'visual_scale' for drawtypes 'signlike' and 'torchlike' ''(Sokomine)''
* Fixed minetest.facedir_to_dir when param2 is 5 or 7. ''(Novatux)''
* Added 'after_use' tool callback ''(Novatux)''
* Added settings interface for Lua ''(PilzAdam)''
* Moved tree growing and grass growing ABMs to Lua ''(Novatux)''
* Added &lt;code&gt;minetest.register_on_craft()&lt;/code&gt; and &lt;code&gt;minetest.register_craft_predict()&lt;/code&gt; ''(Novatux)''
* Added basic protection support to builtin ''(ShadowNinja)''
* Added 6d facedir rotation prediction routine ''(VanessaE)''
* Added wrapper for minetest.rotate_and_place ''(Evergreen)''

'''Formspec changes'''

* &lt;code&gt;pwdfield&lt;/code&gt;, &lt;code&gt;vertlabel&lt;/code&gt;, &lt;code&gt;tabheader&lt;/code&gt;, &lt;code&gt;dropdown&lt;/code&gt; and &lt;code&gt;checkbox&lt;/code&gt; ''(sapier)''
* &lt;code&gt;&lt;noclip&gt;;&lt;drawborder&gt;;&lt;pressed texture name&gt;&lt;/code&gt; options for image_button ''(sapier, BlockMen)''
* &lt;code&gt;textlist&lt;/code&gt; and &lt;code&gt;box&lt;/code&gt; with color support ''(sapier, sfan5)''
* &lt;code&gt;listcolors&lt;/code&gt; and &lt;code&gt;bgcolor&lt;/code&gt; ''(BlockMen, kahrl)''
* &lt;code&gt;&lt;auto_clip&gt;&lt;/code&gt; option for background images ''(BlockMen)''
* Added option to scale image to percentage values ''(BlockMen)''
* Send a on_receive_fields event when formspec is closed, with fields.quit = "true" ''(Novatux)''
* Reworked formspecs ''(BlockMen)''

== 0.4.6 → 0.4.7 ==

0.4.7 was released on June 6, 2013.

=== New features ===

'''Big gameplay changes'''

* Added snow, snow block, ice and dirt with snow ''(PilzAdam)''
* Added sandstone bricks and desert stone bricks ''(PilzAdam &amp; VanessaE)''
* Added coal block, crafted out of 9 coal lumps ''(Zeg9)''
* Added flowers to craft dyes; flowers and grass grow now on dirt_with_grass ''(0gb.us, PilzAdam, VanessaE, ironzorg)''
* Added farming mod; wheat can be used to bake bread and cotton can be used to craft wool ''(PilzAdam)'' http://forum.minetest.net/viewtopic.php?id=6067

'''Smaller gameplay tweaks'''

* Added a little delay for falling nodes to update so that the objects don't spawn all at once ''(PilzAdam)''
* Added private messaging with &lt;code&gt;/msg&lt;/code&gt; ''(ShadowNinja)''
* Added copper block ''(RealBadAngel)''
* Swing the camera down when the player lands on the ground; disabled by default; &lt;code&gt;fall_bobbing_amount&lt;/code&gt; in minetest.conf ''(Taoki)''
* Node placement prediction now accounts for "wallmounted", "facedir" and "attached_node" nodes and only replaces "buildable_to" nodes ''(kahrl, ShadowNinja &amp; PilzAdam)''
* Added &lt;code&gt;disable_fire&lt;/code&gt; setting to disable fire burning ''(ShadowNinja)''
* Added damage to the hand in creative mode ''(PilzAdam)''
* Added a little animation when changing the wielded item  ''(PilzAdam &amp; blue42u)''
* Apples now fall when the tree decays ''(PilzAdam &amp; BlockMen)''

'''Logistic changes'''

* Added mapgen v7; not usable currently ''(kwolekr)''
* Added support for LuaJIT, makes mod execution much faster ''(RealBadAngel)''
* Move cave generation to cavegen.cpp and restructure it into a class ''(kwolekr)''
* Added icons to select games in menu; &lt;code&gt;menu/menu_&lt;background/overlay/header/footer&gt;.png&lt;/code&gt; of selected game is used in the main menu (TP can use &lt;code&gt;&lt;gameid&gt;_menu_&lt;background/overlay/header/footer&gt;.png&lt;/code&gt;) ''(celeron55)''
* Added &lt;code&gt;--videomodes&lt;/code&gt; option to show available video modes ''(kahrl)''
* Added ability to play &lt;code&gt;main_menu.ogg&lt;/code&gt; (&lt;code&gt;main_menu.&lt;1-9&gt;.ogg&lt;/code&gt; are supported too; they are choosen randomly if present) in main menu ''(RealBadAngel)''
* Drop common mods system, ''Survival'' and ''Build'' game; minetest_game includes all common mods and the bones mod from ''Survival'' now ''(PilzAdam)'' http://forum.minetest.net/viewtopic.php?id=6034
* Changed mod system a bit: All user mods are installed in &lt;code&gt;$path_user/mods/&lt;/code&gt; now; they can be enabled per world in the configure world window or in &lt;code&gt;world.mt&lt;/code&gt; with &lt;code&gt;load_mod_&lt;modname&gt;&lt;/code&gt; ''(PilzAdam)'' http://forum.minetest.net/viewtopic.php?id=6066
* Split &lt;code&gt;init.lua&lt;/code&gt; of the default mod into several files ''(PilzAdam)''
* Moved scriptapi to a subfolder ''(sapier, celeron55 &amp; kahrl)''

'''Visual changes'''

* Changed "unknown block" texture to "unknown node" ''(khonkhortisan)''
* Changed textures of sand, desert sand and desert stone ''(VanessaE)''
* &lt;code&gt;crosshair.png&lt;/code&gt; is used instead of the normal crosshair if present ''(dannydark &amp; Exio4)''
* Added progress bar and clouds to loading screen ''(Zeg9)''
* Added new textures for all metal and diamond blocks ''(Zeg9)''
* Added new Minetest header ''(BlockMen)''

'''Other changes'''

* Added &lt;code&gt;mouse_sensitivity&lt;/code&gt; option ''(Exio4)''

=== Bug fixes ===

* Check if the address field is empty when hitting enter on the multiplayer tab ''(ShadowNinja)''
* Limit speed in collisionMoveResult for avoiding hangs ''(Exio4)''
* Fixed camera "jumping" when attached and the parent goes too fast ''(Zeg9)''
* Fixed nick completion in chat console with the tab key ''(PilzAdam)''
* Do not always move fast in water and ladders when aux1_descend it true ''(Taoki)''
* Fixed '''a lot''' memory leaks ''(sapier, PilzAdam, kahrl, kwolekr)''
* Fixed import of older maps ''(kwolekr)''
* Fixed black trees ''(kwolekr)''
* Fixed small objects colliding with themselves ''(sapier)''
* Fixed &lt;code&gt;get_craft_recipe()&lt;/code&gt; and &lt;code&gt;get_all_craft_recipes()&lt;/code&gt; ''(RealBadAngel)''
* Fixed spawning too high above ground ''(kwolekr)''
* Fixed object -&gt; player collision ''(sapier)''
* Fixed favorite server list in globally installed versions of Minetest (RUN_IN_PLACE=0) ''(Zeg9)''
* Fixed favorite server list on windows ''(sfan5)''
* Fixed handling of mods in games in the configure world GUI ''(kahrl)''
* Fixed static data of objects not beeing stored correctly on deactivation ''(sapier)''
* Removed ''Meshbuffer ran out of indices'' limitation ''(kahrl)''
* Fixed &lt;code&gt;isBlockInSight()&lt;/code&gt; for higher FOV ''(Warr1024)''
* Don't teleport back when a player is detached or turns free move off and holds shift ''(PilzAdam)''
* Fixed bug where you need to move the mouse after closing a menu ''(kahrl)''
* Reduced &lt;code&gt;/clearobjects&lt;/code&gt; memory consumption; &lt;code&gt;max_clearobjects_extra_loaded_blocks&lt;/code&gt; in minetest.conf ''(kahrl)''
* Corrected segfault when registering new biomes ''(sweetbomber)''
* Reduced video memory consumption by not generating unnecessary &lt;code&gt;[forcesingle&lt;/code&gt; textures ''(kahrl)''
* Close console when it loses focus but it is still on screen ''(Exio4)''

=== Modding-related changes ===

* Added &lt;code&gt;player:set_physics_override()&lt;/code&gt; to set per-player physics ''(Taoki &amp; PilzAdam)''
* Use &lt;code&gt;node_box&lt;/code&gt; for &lt;code&gt;selection_box&lt;/code&gt; if &lt;code&gt;drawtype = "nodebox"&lt;/code&gt; and &lt;code&gt;selection_box = nil&lt;/code&gt; ''(kaeza)''
* Added &lt;code&gt;minetest.env:line_of_sight()&lt;/code&gt; and &lt;code&gt;minetest.env:find_path()&lt;/code&gt; ''(sapier)''
* Added API functions to add elements to the HUD of players ''(blue42u, kwolekr &amp; kaeza)''
* Added option to not prepend "Server -!- " to messages sent with &lt;code&gt;minetest.chat_send_player()&lt;/code&gt; ''(ShadowNinja)''
* Added &lt;code&gt;minetest.get_player_ip()&lt;/code&gt; ''(ShadowNinja)''
* Added &lt;code&gt;use_texture_alpha&lt;/code&gt; in node definition to use alpha channel of node texture ''(kwolekr)''
* Added &lt;code&gt;glasslike_framed&lt;/code&gt; node drawtype ''(RealBadAngel)''
* Added optional dependencies and different [[Mod_name_conflicts|mod name conflict handling]] ''(kahrl)''
* Use group &lt;code&gt;soil&lt;/code&gt; for nodes where saplings can grow on ''(ShadowNinja)''
* Nodes with drawtype &lt;code&gt;raillike&lt;/code&gt; connect to all other nodes with the same drawtype if they are in the &lt;code&gt;connect_to_raillike&lt;/code&gt; group ''(Jeija)''
* Env functions are now in the global minetest table; that means they are called via &lt;code&gt;minetest.&lt;function&gt;&lt;/code&gt; instead of &lt;code&gt;minetest.env:&lt;function&gt;&lt;/code&gt; ''(sapier, celeron55 &amp; kahrl)''
* Added &lt;code&gt;obj:set_hotbar_itemcount()&lt;/code&gt; ''(kahrl)''

== 0.4.5 → 0.4.6 ==

0.4.6 was released on April 3, 2013.

=== New features ===

'''Big gameplay changes'''

* Added lavacooling near water; lava source turns into obsidian, flowing lava turns into stone ''(PilzAdam)''
* Added junglewood (with stairs and slabs), jungleleaves and junglesaplings ''(PilzAdam)''
* Added obsidian, obsidian shards and obsidian glass ''(PilzAdam &amp; jojoa1997)''
* Added grass (5 different heights) ''(PilzAdam)''
* Added growing for papyrus (on dirt and grass near water) and cactus (on sand) ''(PilzAdam)''
* Added stonebricks crafted from 4 stones ''(PilzAdam)''
* Added gold ''(PilzAdam)''
* Added diamonds and diamond tools, wich are slightly faster and wear out slower than mese tools ''(PilzAdam)''
* Added mese axe, shovel and sword; mese pick is not the ultimate tool anymore ''(PilzAdam)''
* Added copper, bronze and bronze tools; bronze can be crafted with copper ingot and steel ingot; bronze tools have same digging times but more uses than steel tools ''(PilzAdam)''

'''Smaller gameplay tweaks'''

* 3 nodes now give 6 slabs instead of 3 ''(PilzAdam)''
* Wooden stairs and slabs are now flammable ''(PilzAdam)''
* Lava is not renewable anymore ''(PilzAdam)''
* It is not possible anymore to place non-fuel items in the fuel slot or any item in the output slots of the furnace ''(PilzAdam)''
* Falling nodes now destroy solid buildable_to nodes ''(Splizard)''
* Added ability for buckets to pick up flowing water when liquid_finite is enabled ''(ShadowNinja)''
* Use right click to place liquids with buckets; added description for buckets ''(PilzAdam &amp; ShadowNinja)''
* Fixed furnace infotext saying "Furnace out of fuel" when placing a fuel but no item to cook into it ''(PilzAdam)''
* Made Mese ores a bit more rare; made Mese blocks very rare ''(PilzAdam)''
* Added object &lt;-&gt; object collision ''(sapier)''

'''Map generation changes'''

* Readded dungeons (disabled by default, enable with "dungeons" flag in "mg_flags" setting) ''(kwolekr)''
* Speed up lighting a lot ''(kwolekr)''
* Readded jungles (disabled by default, enable with "jungles" flag in "mg_flags" setting) ''(kwolekr)''
* Generate apple trees ''(kwolekr)''
* Moved ore generation back to core; improved ore generation speed ''(kwolekr)''
* Added &lt;code&gt;singlenode&lt;/code&gt; mapgen ''(celeron55)''
* Added a new map generator called &lt;code&gt;indev&lt;/code&gt; (float islands at 500+, rare HUGE caves, near edges: higher mountains, larger biomes) ''(proller)''

'''Visual changes'''

* Changed textures of cobblestone and mossy cobblestone ''(PilzAdam)''

'''Logistic changes'''

* Split scriptapi.cpp into more files ''(sapier)''
* Migrate to STL containers/algorithms ''(xyz)''
* Added the pseudo game ''common'' with ''bucket'', ''default'', ''stairs'', ''doors'' and ''fire'' mods included; deleted those mods from minetest_game ''(celeron55 &amp; PilzAdam)''
* Added a checkbox for finite liquids to settings menu ''(proller)''

'''Other changes'''

* Use moving clouds as background for the main menu ''(Krisi &amp; ShadowNinja)''
* minetest.env:find_nodes_near() optimized to be 11.65x faster, ServerEnvironment step CPU consumption cut in half ''(kwolekr)''

=== Bug fixes ===

* Fixed build with ogles2 driver ''(proller)''
* Fixed new_style_water (shaders are not used for this anymore) ''(PilzAdam)''
* Fixed backface_culling in tiledef; both sides of flowing liquids are now visible ''(doserj)''
* Hopefully fix node replacement bug (where the node that is pointed at is replaced) ''(0gb.us)''

=== Modding-related changes ===

* Added &lt;code&gt;minetest.get_all_craft_recipes(output)&lt;/code&gt; ''(RealBadAngel)''
* Allow any character in formspec strings with escape characters ''(kwolekr)''
* Added ability to pass multiple parameters to &lt;code&gt;minetest.after()&lt;/code&gt; ''(Jeija)''
* Added &lt;code&gt;player:set_look_yaw()&lt;/code&gt; and &lt;code&gt;player:set_look_pitch()&lt;/code&gt; ''(RealBadAngel)''
* Added ability to load mods from the pseudo game ''common'' via &lt;code&gt;common_mods&lt;/code&gt; in game.conf ''(celeron55)''
* Added support for a minetest.conf file in games, wich override the default values ''(celeron55)''
* Added 6d facedir to rotate nodes with ''facedir'' drawtype ''(RealBadAngel)''
* Added function and wrapper to predict and assign 6d rotation via &lt;code&gt;minetest.rotate_and_place()&lt;/code&gt; ''(VanessaE and EvergreenTree)''
* Added &lt;code&gt;minetest.add_particle()&lt;/code&gt;, &lt;code&gt;minetest.add_particlespawner()&lt;/code&gt; and &lt;code&gt;minetest.delete_particlespawner()&lt;/code&gt; ''(Jeija)''
* Added &lt;code&gt;minetest.register_ore()&lt;/code&gt; to let the engine generate the ores; &lt;code&gt;default.generate_ore()&lt;/code&gt; is now deprecated  ''(kwolekr)''
* New damage system added as described here: [[Damage_system]] ''(PilzAdam &amp; celeron55)''
* Added &lt;code&gt;place&lt;/code&gt; field to sound table of tools ''(PilzAdam)''

== 0.4.4 → 0.4.5 ==

0.4.5 was released on March 4, 2013.

=== New features ===

'''Big gameplay changes'''

* Added Mese crystals and Mese crystal fragments (crafted from 1 Mese crystal); Mese blocks can be crafted with 9 Mese crystals; Mese pickaxes are now crafted using Mese crystals; old Mese equals the new Mese block and is still generated at altitudes -1024 and below ''(VanessaE &amp; PilzAdam)''
* Doors must now be right clicked to be opened ''(PilzAdam)''
* Flying through walls now requires the "noclip" privilege and noclip mode must be enabled by pressing H ''(PilzAdam)''
* Added a list of servers to the "Multiplayer" tab of the main menu ''(Jeija)''
* Added a mod selection menu ''(doserj)''
* Jungle grass now spawns naturally again ''(PilzAdam)''
* Added finite liquid support, experimental and disabled by default ''(proller)''

'''Smaller gameplay tweaks'''

* Locked chest contents are now only shown to their owner ''(PilzAdam)''
* Added ability to write several lines on a sign ''(PilzAdam)''
* When sneaking, the current node/item will always be used when right clicking even if pointing a chest or a furnace ''(Jeija)''
* In creative mode, hand now breaks everything nearly instantly and nodes/items are infinite ''(PilzAdam)''
* Player physics are now tweakable by server admin ''(Taoki)''
* Fast mode can now be used in liquids and in climbable nodes ''(kwolekr)''
* Fire is now "buildable to" ''(Casimir)''
* To fly at "fast" speed, the "use" key must now be held if using shift to descend ''(PilzAdam)''
* Added upside down stairs and slabs ''(PilzAdam)''
* Added ability to switch to fly_mode when double-tapping space bar, disabled by default; can be enabled in the key change menu ''(PilzAdam)''
* Tweaked damage and punch times of weapons, tools and hand ''(Calinou)''
* Added repeated right clicking when holding the right mouse button, see "repeat_rightclick_time" setting in minetest.conf ''(Jeija)''

'''Map generation changes'''

* Added L-system tree generation ''(RealBadAngel &amp; dannydark)''
* Map generation is now slightly faster and can be tweaked in minetest.conf ''(kwolekr)''
* Added optional flat map generation, with and without trees ''(kwolekr)''

'''Visual changes'''

* Mese pickaxe now has a new texture, which is more yellow ''(Jordach)''
* Tweaked dirt texture so that it tiles better; improved lump and ingot textures; added fake shading to the default player texture ''(Iqualfragile &amp; GloopMaster &amp; Jordach)''
* Added particles when digging blocks ''(Jeija &amp; PilzAdam)''
* The selection box of stairs now fits the stairs ''(PilzAdam)''
* If damage is disabled, damage screen is disabled and health is not shown on the HUD ''(PilzAdam)''
* Damage screen is now red fade instead of constant red; camera now tilts when receiving damage ''(Jeija &amp; PilzAdam)''
* Added "selectionbox_color", "crosshair_color" and "crosshair_alpha" minetest.conf settings for changing selection outline color, crosshair color and crosshair opacity respectively ''(Exio4)''

'''Logistic changes'''

* Minetest-c55 is now named Minetest
* Less stuff is now put in debug.txt by default, change with debug_log_level, default is 2
* Texture atlas is now disabled by default ''(kwolekr)''
* Added and updated language translations; French, German, Portuguese, Polish and Spanish translations are 100% complete ''(Calinou, kaeza, PilzAdam, sfan5, xyz, kotolegokot, pandaro, Mito551, Shen Zheyu, sub reptice, elagin, KikaRz and socramazibi)''
* Added support for downloading media from a server using cURL which is faster, disabled by default ''(Ilya Zhuravlev)''

=== Bug fixes ===

* Walking on stairs, slabs and glass now makes sounds ''(PilzAdam &amp; dannydark)''
* Fixed and cleaned EmergeThread around a bit ''(kwolekr)''
* Punching entities and players with shovels and pickaxes now deals damage ''(Calinou)''
* Fixed some caves having too many dead ends ''(unknown)''
* Fixed the looks of some plantlike nodes by using two long planes instead of four shorter planes ''(doserj)''
* Grass no longer turns into dirt below unloaded blocks ''(PilzAdam)''
* Fixed a crash when clicking "Configure" when no world is selected in Singleplayer menu ''(doserj)''
* Fixed dropped item collision with nodeboxes ''(jordan4ibanez)''
* Fixed a glitch where the player gets liquids in his inventory when a server lags ''(PilzAdam)''

=== Modding-related changes ===

* Added ability to change the itemstack in placenode callbacks ''(PilzAdam)''
* Added ability to create multi-line textfields in formspecs ''(Jeija)''
* Add on_rightclick(pos, node, clicker) callback for nodes ''(PilzAdam)''
* Added minetest.show_fromspec(playername, formspec) to show formspecs via Lua ''(sapier)''

== 0.4.3 → 0.4.4 ==

0.4.4 was released on December 6, 2012. 0.4.4-d1 (an interim release made due to a protocol change) was released on January 2, 2013.

=== New features ===

* Added animated 3D player and a new default skin, the default model also supports Minecraft skins ''(Taoki, skin by Jordach)''
* Added shaders support (can be disabled in Settings menu), makes water a bit smaller than a full block, makes lighting look prettier ''(kahrl and celeron55)''
* New default doors mod: doors have a 3D look, ability to create "double doors" added, added locked steel doors (only the owner of the door can open/close it) ''(PilzAdam)''
* Improve map generation speed a lot ''(hmmmm)''
* Day-night transitions are now smoother ''(celeron55)''
* Water textures are now animated ''(RealBadAngel (textures) and PilzAdam)''
* Added on-demand item previews (reduces load time/RAM usage), disabled by default ''(celeron55)''
* Added 3D anaglyph support (red-cyan glasses) ''(xyz)''
* Fire is now animated and causes damage to players ''(PilzAdam, Muadtralk (textures))''
* Tweaked some textures: apple, nyan cat, bricks, papyrus, steel sword ''(Calinou, VanessaE)''
* Tweaked digging animation (no more mining with the tip of your pickaxe!) ''(jordan4ibanez)''
* Changed apple, sapling and papyrus selection box size to be smaller ''(VanessaE)''
* Players who do not move no longer send their positions to save bandwidth ''(Taoki)''
* Make steel block and brick drop themselves when dug and make them craftable back into their materials ''(PilzAdam)''
* Glass now makes a sound when broken ''(PilzAdam)''
* Dead players are now visible ''(Taoki)''
* Changed default server tick to 0.1 second, decreasing server CPU usage ''(celeron55)''
* Clients now send their position every 0.1 second too, making other player movement look smoother ''(celeron55)''
* Use of /grant and /revoke commands is now logged ''(dannydark)''
* Added ability for server to tweak amount of bandwidth used to upload mods to clients ''(celeron55)''

=== Bug fixes ===

* Fixed falling sand and gravel sometimes incorrectly landing ''(PilzAdam)''
* Fixed empty bucket being named "emtpy bucket" (khonkhortisan and PilzAdam)
* Fixed slab to full block transformation ''(PilzAdam)''
* Fixed smooth lighting between MapBlocks ''(celeron55)''
* Prevent some blocks (leaves, falling sand and gravel) from giving air when dug when they disappear as you mine them ''(PilzAdam)''
* Fixed papyruses and cacti growing inside trees ''(PilzAdam)''
* Fixed flowing liquid animation direction calculation ''(celeron55)''
* Fixed wielditem entity drawtype brightness control ''(celeron55)''
* Fixed ObjectRef:punch() ''(celeron55)''
* Fixed a rare bug in leaf decay ''(PilzAdam)''
* Fixed trees growing into any type of node ''(xyz)''
* Fixed server crashing when "/clearpassword" is typed without an argument ''(Uberi)''
* Head no longer shifts downwards when you are inside transparent blocks such as glass or nodeboxes ''(Calinou)''
* Directories beginning with a "." are now ignored when searching for mods on Windows ''(matttpt)''
* Fixed the automagic render distance tuner ''(celeron55)''

=== Modding-related changes ===

* Added 3D model support for entities ''(Taoki)''
* Added attachment support (so that entities can "ride" other entities) ''(Taoki)''
* Backgrounds and images can now be used in formspecs ''(RealBadAngel)''
* Liquids can now be made non-renewable ''(xyz)''
* Added nodedef.on_blast() to lua_api.txt in order to support chained explosions of any explosives ''(celeron55)''
* Allow transparent image buttons ''(khonkhortisan)''
* Added shutdown hook interface to Lua API ''(matttpt)''
* Added "attached_node" group to make nodes which are not attached to any other walkable node drop ''(PilzAdam)''
[[Category:Root-Category]]
[[Category:Compiling Minetest]]</text>
      <sha1>i2821w8zz7x7243q32rutsi2i4yltur</sha1>
    </revision>
  </page>
  <page>
    <title>Organisation</title>
    <ns>0</ns>
    <id>486</id>
    <revision>
      <id>5650</id>
      <parentid>5649</parentid>
      <timestamp>2022-01-10T20:48:34Z</timestamp>
      <contributor>
        <username>Celeron55</username>
        <id>8</id>
      </contributor>
      <comment>against vote meeting</comment>
      <origin>5650</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1852" sha1="h6n8txq527dia1cod82144bn5273rur" xml:space="preserve">== Contributors ==
A contributor is anyone who has made a pull request that has been merged, or successfully sent a patch to be applied otherwise.

== Core developers ==
Core developers have special privileges and responsibilities compared to other contributors:
* Can vote for and against merging pull requests (Two for-votes are required for code to be mergeable upstream. Any against vote has to be resolved in a meeting before merge.)
* Has write access to the Minetest team's repositories on GitHub

The core team should all be people who are trusted and capable of reviewing C++ code if you ask them to. They don't necessarily need to have the time. However, if a core developer doesn't write or review any code for a long time, the trust disappears.

==== Assignment ====
Core developers are assigned and unassigned by celeron55, based on these rules:
* Only people who have already contributed to the project can be assigned to be core developers.
* The person themselves or anyone else can propose someone to become or stop being a core developer. Do this by "/msg celeron55 blah blah", or by email.
* Celeron55 accepts complaints about core developers and ultimately decides on unassignments.
* Core developers, like other contributors, should document and publish their work in a way that allows another contributor to pick up on it if the core developer stops working on the project due to any reason.
* If a person doesn't use their core developer privileges for 6 months, the privileges will be revoked for security reasons.

== Past major changes ==
2015-11-02: The subsystem maintainer method was officially taken out of use. It had already been unofficially out of use for a long time. See the history of this page for details about how it worked.

[[Category:Rules and Guidelines]]
[[Category:Root-Category]]
[[Category:Organisation]]</text>
      <sha1>h6n8txq527dia1cod82144bn5273rur</sha1>
    </revision>
  </page>
  <page>
    <title>PerlinNoise</title>
    <ns>0</ns>
    <id>145</id>
    <revision>
      <id>6044</id>
      <parentid>4893</parentid>
      <timestamp>2022-05-24T11:39:39Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <minor/>
      <comment>Remove incomplete template (this page is meant for deletion)</comment>
      <origin>6044</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1280" sha1="azublx25zynskarsgoz8p2g10719r4a" xml:space="preserve">{{UnofficialLua}}
A [http://en.wikipedia.org/wiki/Perlin_noise perlin noise] generator. Can be created either via &lt;source enclose="none"&gt;PerlinNoise(seed, octaves, persistence, scale)&lt;/source&gt; or &lt;source enclose="none"&gt;minetest.get_perlin(seeddiff, octaves, persistence, scale)&lt;/source&gt;.
Note that [[PerlinNoiseMap]] works faster.
&lt;br/&gt;

== Methods ==
* &lt;source enclose="none"&gt;get2d(pos)&lt;/source&gt; — 2d noise value at &lt;source enclose="none"&gt;pos={x=,y=}&lt;/source&gt;
* &lt;source enclose="none"&gt;get3d(pos)&lt;/source&gt; — 3d noise value at &lt;source enclose="none"&gt;pos={x=,y=,z=}&lt;/source&gt;
&lt;br/&gt;

== Examples ==TODO
&lt;br/&gt;

== See also ==
* [[PerlinNoiseMap]]
* [[:Category:Mapgen]]
&lt;br/&gt;

== External Links ==
* [https://forum.minetest.net/viewtopic.php?f=6&amp;t=8157 Minetest forum thread: "minetest.get_perlin() and minetest.get_perlin_map() Return nil"]
* [http://web.archive.org/web/20160305194643/http://freespace.virgin.net/hugo.elias/models/m_perlin.htm Explanation of perlin noise]
* [http://webstaff.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf Explanation of perlin noise and simplex noise]
* [https://forum.minetest.net/viewtopic.php?id=4032 Perlin noise values exceed [-1; 1]]
* [https://forum.minetest.net/viewtopic.php?f=7&amp;t=5146 Faster mapgen noises]
&lt;br/&gt;

[[Category:Objects]]</text>
      <sha1>azublx25zynskarsgoz8p2g10719r4a</sha1>
    </revision>
  </page>
  <page>
    <title>PerlinNoiseMap</title>
    <ns>0</ns>
    <id>553</id>
    <revision>
      <id>5825</id>
      <parentid>4894</parentid>
      <timestamp>2022-05-24T09:39:27Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <comment>Remove "incomplete" template (this page must be deleted anyway)</comment>
      <origin>5825</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3141" sha1="mgdks4u8zbu3hhawd3sbr07vx5r6v5q" xml:space="preserve">{{UnofficialLua}}
{{DISPLAYTITLE:PerlinNoiseMap minetest.get_perlin_map}}
A fast, bulk perlin noise generator
Can be created via
* &lt;source enclose="none"&gt;PerlinNoiseMap(noiseparams, size)&lt;/source&gt;
* &lt;source enclose="none"&gt;minetest.get_perlin_map(noiseparams, size)&lt;/source&gt;
The latter function must not be called until after the world is finished initializing, so it must be called during some kind of callback rather than at the top level mod initialization code. The first constructor, on the other hand, may be called at any time since it does not depend on the world's seed.
== Methods ==
{| class="wikitable collapsible sortable"
| &lt;source enclose="none"&gt;get2dMap(pos)&lt;/source&gt;
| &lt;source enclose="none"&gt;size.x&lt;/source&gt; '''x''' &lt;source enclose="none"&gt;size.y&lt;/source&gt; 2d array of 2d noise values starting at &lt;source enclose="none"&gt;pos={x=,y=}&lt;/source&gt;
|-
| &lt;source enclose="none"&gt;get3dMap(pos)&lt;/source&gt;
| &lt;source enclose="none"&gt;size.x&lt;/source&gt; '''x''' &lt;source enclose="none"&gt;size.y&lt;/source&gt; '''x''' &lt;source enclose="none"&gt;size.z&lt;/source&gt; 3d array of 3d noise values starting at &lt;source enclose="none"&gt;pos={x=,y=,z=}&lt;/source&gt;
|-
| &lt;source enclose="none"&gt;get2dMap_flat(pos)&lt;/source&gt;
| Flat &lt;source enclose="none"&gt;size.x&lt;/source&gt; * &lt;source enclose="none"&gt;size.y&lt;/source&gt; element array of 2d noise values starting at &lt;source enclose="none"&gt;pos={x=,y=}&lt;/source&gt;
|-
| &lt;source enclose="none"&gt;get3dMap_flat(pos)&lt;/source&gt;
| Same as get2dMap_flat, but 3d noise
|}
== Noise Params ==
Here's an example of the noiseparams:
&lt;source&gt;local testparam = {
   offset = 0,
   scale = 1,
   spread = {x=2048, y=2048, z=2048},
   seed = 1337,
   octaves = 6,
   persist = 0.6
}&lt;/source&gt;
* spread: defines how fast the (ex.) terrain high changes (frequency)
* seed: every seed generates a different perlin map
* octaves: higher value, higher details

== Examples ==
&lt;source&gt;minetest.register_on_generated(function(minp, maxp, seed)
   local vm, emin, emax = minetest.get_mapgen_object("voxelmanip")
   local area = VoxelArea:new{MinEdge=emin, MaxEdge=emax}
   local data = vm:get_data()
   
   --get side length of the current mapgen block
   local side_length = maxp.x - minp.x + 1
   local map_lengths_xyz = {x=side_length, y=side_length, z=side_length}
   local perlin_map = minetest.get_perlin_map(testparam, map_lengths_xyz):get2dMap_flat(minp)

   --loop
   local perlin_index = 1
   for z = minp.z, maxp.z do
      for y = minp.y, maxp.y do
         local vi = area:index(minp.x, y, z)
         for x = minp.x, maxp.x do
             print("Some spam value: "..tostring(perlin_map[vi])
             --more efficient coding - x++
             perlin_index = perlin_index + 1
             vi = vi + 1
         end
         --go back, one side_length
         perlin_index = perlin_index - side_length
      end
      --go forward, one side_length
      perlin_index = perlin_index + side_length
   end
end)&lt;/source&gt;

== See also ==
* [[PerlinNoise]]

== External Links ==
[https://forum.minetest.net/viewtopic.php?f=6&amp;t=8157 Minetest forum thread: "minetest.get_perlin() and minetest.get_perlin_map() Return nil"]

[[Category:Objects]]
[[Category:Mapgen]]</text>
      <sha1>mgdks4u8zbu3hhawd3sbr07vx5r6v5q</sha1>
    </revision>
  </page>
  <page>
    <title>Player-World Interaction</title>
    <ns>0</ns>
    <id>855</id>
    <revision>
      <id>6284</id>
      <parentid>6045</parentid>
      <timestamp>2023-01-25T19:08:21Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <comment>remove randomly interspersed broken wikilinks</comment>
      <origin>6284</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2524" sha1="e28cbjm7sjtogbzleizqzpnctngiga2" xml:space="preserve">{{Incomplete}}

== Digging a node ==

Preconditions are a node somewhere in the map.&lt;br/&gt;
This node is pointable, has a selection box and can be dug by the hand or the tool the player is wielding.&lt;br/&gt;
The player has interact priv and the tool has a tool range that the node can be pointed.&lt;br/&gt;
The node is not stuck somewhere the player can't point it.

* First look at the node, it becomes pointed_thing.
: Note that on android the node is pointed without looking (referring to the cross position) at it.
* Then LMB is pressed down while holding an item which does not have on_use.
: If LMB wasn't released before, a click happens, which causes a punch event.
:: The client send a punch event (client-&gt;interact(4, pointed), see game.cpp:3657 (28.02.2017)).
:: On server side the punch event is passed to mods, see on_punch and the deprecated register_on_punchnode.
: Then the client sends the digging start event to the server (interact(0, pointed), game.cpp:3948).
:: The server uses this information for anticheat measurements.
* Now continue looking at the node, i.e. keep pointing it, and hold down LMB.
: Periodically client-side: Crack animation is updated, digging particles are spawned (if not disabled in the settings) and the node dig sound is played.
:: The dig sound is either the "dig" field in the "sounds" table in the nodedef
:: or, if it's not present, the client uses the sound "default_dig_${groupname}" (file name extension omitted here), where $groupname is one of the groups the node has, see (game.cpp:4001), and gain is set to 0.5.
:: The default_dig_ thing should be banned from source code in my opinion.
* Some time later, when the digging time elapsed,
: the client sends a digging completion event to the server (interact(2, pointed), game.cpp:4018),
: the node disappears client-side,
: more particles are spawned (if enabled) and
: the dug sound is played.
* Now the server recieves the digging completion event.
: Anticheat probably, e.g due to lag, thinks the player dug the node too fast.
:: dug_too_fast cheat is passed to mods, see register_on_cheat, and digging aborts.
: If the nodedef has a can_dig function, it's executed and probably stops the digging.
: The on_dig function in the nodedef is called now.
:: The default on_dig function problably removes the node:
::: The on_destruct is executed, air is set and after_destruct is executed.
:: And probably (the same probably as before) it then calls the after_dig_node function in the nodedef if present.

[[Category:Core Engine]]</text>
      <sha1>e28cbjm7sjtogbzleizqzpnctngiga2</sha1>
    </revision>
  </page>
  <page>
    <title>Player physics</title>
    <ns>0</ns>
    <id>987</id>
    <revision>
      <id>6375</id>
      <parentid>5230</parentid>
      <timestamp>2023-05-01T11:18:00Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <comment>lua_api.txt -&gt; lua_api.md</comment>
      <origin>6375</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4035" sha1="mw6d20naw218i4iqppsi9vs0ckahfyd" xml:space="preserve">{{LuaTips}}
'''Player physics''' refers to special physical attributes of the player that can be changed in Lua with &lt;code&gt;player:set_physics_override&lt;/code&gt;. With this function, you can set e.g. jump strength, walking speed and gravity for each player.

== Basic usage ==
See &lt;code&gt;lua_api.md&lt;/code&gt;. Seriously, read it. :P

== When things break ==
However, this method only can set the raw physical values, which will overwrite any previous value the player had.

As long you have only exactly one mod in your entire game that sets player physics using this method, this is not a problem. But as soon more than 1 mod messes with the same player physics attribute (e.g. speed), all hell breaks loose and hilarity ensues, because each mod now competes for the “correct” physics attribute. In the worst case, speed, jump strength or gravity will go all over the place.

This type of error occurs more often than you think. Modders that are new to Minetest had to constantly learn this the hard way, because this problem is not obvious to see.

=== Example ===
Let’s say there is a simple platformer game which has nodes that can slow down the player or increase jump height while the player stands on them. These mechanics are implemented via &lt;code&gt;player:set_physics_override&lt;/code&gt;.

Let’s say now you come along and want to add potions that make the player run faster or increase jump height even more. This mod also uses &lt;code&gt;player:set_physics_override&lt;/code&gt; to set the physics values directly.

Congratulations! You have now succuessfully created a race condition! When the player drinks a potion and walks on a “high jump” node, both the mod and the game are now competing to set the correct jump/speed values, so the player physics will be completely broken because the values are overwritten chaotically.

=== Solutions ===
==== Improve the Lua API by allowing player physics to be combined ====
The idea is to add functionality to the Lua API by allowing to set modifiers (like multiplication or addition), so mods can change physics without worrying at all about other mods.

This solution has strong community support, but sadly, it did not succeed yet.

https://github.com/minetest/minetest/pull/7269

So we’re currently stuck with mod-based solutions, sadly.

==== Player Physics API ====
Player Physics API is a mod by Wuzzy that basically implements what has been suggested for Minetest. It resolves this conflict by providing a “common ground” for mods to work together in this regard. You can find this mod here: https://forum.minetest.net/viewtopic.php?f=11&amp;t=22172

It works by letting mods add and remove “modifiers” to a certain physical attribute, and the final result is created by multiplying all modifiers together.

The existence of this mod also expects that all mods (for a given game, that is) use Player Physics API instead of &lt;code&gt;player:set_physics_override&lt;/code&gt;, otherwise, it won’t work.

This approach has been tried and tested in MineClone 2 and Repixture.

==== Create custom helper functions ====
If, for any reason, Player Physics API is not suitable for your game, you might want to create your own helper functions.

What you want to achieve is to have some “middleware” mod like Player Physics API that allows mods to somehow modify player physics without overwriting the final result. You then combine all values to calculate a final result and use it in &lt;code&gt;player:set_physics_override&lt;/code&gt;. Which formula you use is up to you. Or maybe you can think of an entirely different solution.

It is not known if any alternative approaches (besides Player Phyics API) has been done.

==== Only allow the game to set physics ====
In the game’s developer documentation, explicitly say that only the game is allowed to set physics, and that external mods aren’t. Resolve and in-game conflicts by hand. This is obviously the least flexible solution, but it's also the simplest. But for larger games with more complex physics, you will quickly run into problems.</text>
      <sha1>mw6d20naw218i4iqppsi9vs0ckahfyd</sha1>
    </revision>
  </page>
  <page>
    <title>Profiler graph</title>
    <ns>0</ns>
    <id>841</id>
    <revision>
      <id>5403</id>
      <parentid>5400</parentid>
      <timestamp>2020-06-26T21:06:05Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <comment>fix category name</comment>
      <origin>5403</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1314" sha1="o3fl13e8nvi6jaap6vtzyg3yqtf0dp5" xml:space="preserve">{{Incomplete}}
The profiler graphs show the performance of Minetest in a more detailed fashion. This information is useful for engine developers. The profiler graphs are shown when you hit the debug key (&lt;kbd&gt;F5&lt;/kbd&gt; by default) twice.

[[File:Profiler graph.png]]

The following graphs are available:

* '''rudp_rtt''': ???
* '''rudp_jitter''': ???
* '''packets_lost''': ???
* '''num_processed_meshes''': The engine generates geometric meshes from MapBlock data for drawing. This is the number of those meshes that finished generating in each frame.
* '''mainloop_sleep''': If the game runs at a faster rate than &lt;code&gt;wanted_fps&lt;/code&gt;, a sleep is inserted into each frame after drawing in order to not consume excess resources; this is that sleep time in seconds.
* '''mainloop_other''': Time (in seconds) spent in each frame for everything else than drawing.
* '''mainloop_dtime''': Total time (in seconds) spent per frame (&lt;code&gt;mainloop_other + mainloop_draw + mainloop_sleep&lt;/code&gt;); FPS = 1 divided by this, averaged.
* '''mainloop_draw''': Time (in seconds) spent in each frame for drawing (rendering).
* '''client_received_packets''': Number of received high-level protocol packets in each frame.

== See also ==
* [https://wiki.minetest.net/Debug Debug]

[[Category:Debugging]]
[[Category:Core Engine]]</text>
      <sha1>o3fl13e8nvi6jaap6vtzyg3yqtf0dp5</sha1>
    </revision>
  </page>
  <page>
    <title>Proposals/Client scripting plans</title>
    <ns>0</ns>
    <id>772</id>
    <revision>
      <id>6140</id>
      <parentid>5409</parentid>
      <timestamp>2022-08-15T21:16:45Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Rubenwardy moved page [[Client scripting plans]] to [[Proposals/Client scripting plans]]</comment>
      <origin>5409</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5766" sha1="n03fixt7wqdhh4unqfrpqcddjnw87ws" xml:space="preserve">Minetest is planned to get client side scripting. This page summarizes the plans for development, and tries to document the consensus inside the core development team. If your changes don't want to serve this '''documenting''' purpose, please '''don't edit''' this page (except trivial edits like grammar corrections), but rather edit the talk page, or suggest changes on IRC. This is no Feature request page.

== General design ==

The language will be plaintext lua (no bytecode, as it's insecure and against the open source nature of minetest). There won't be any restrictions on mod licenses though.

The general design should be much like the Web browser-JavaScript relationship. During the connection, the server sends all code that should be executed to the client, which runs it inside a locked down sandbox. Unlike with server mods, there will be no way (without changing C++ source code) to execute code outside of that sandbox.

Unlike with Web browsers, Lua code should run in a separate thread. Also, to be completely separate, it shouldn't share the Lua environment with the mainmenu Lua (to forestall intra-environment exploits).

=== Base execution setup ===

Every server mod can have a directory "client" whose content will be sent to the client upon connection. After all files have been recieved, the client executes an "init.lua" file for every of those mods.

To emphase the short-lived-ness of the code, the client shouldn't give any access to the filesystem. This implies that all lua files should be held in memory. There can be caches (even permanent ones, like with the texture cache), but lua code shouldn't be abled to "just access the filesystem", not even subdirectories.

=== Event Driven Architecture ===

Client-side mods operate on asynchronous events.  This is necessary to prevent mods from preventing or otherwise delaying scene rendering.
Events are posted to a separate thread which then dispatches them via Lua (that is, the client-side equivalent to Script API):
* On keypress input
* On mouse input (move, mousebutton)
* Digging/punching/dig complete
* Item events
* Inventory changes
* Local player events (move, jump, crouch, etc.)
* Player events (Server HP change/breath change, eventually to be a network event)
* Network events
*    This is deserialized from within Lua
*    Lua side abstracts as an RPC call
* GUI events

Longer term stretch goals:
* Client-side biome change events

To prevent excessive event generation, a mask of wanted events will be maintained.
Nothing will be queued unless a mod subscribes to the event type.

Functions available to client side mods (aka the Lua API):
* HUD manipulation
* GUI manipulation
* Register ParticleSpawners
* Register sounds and play them
* Register shaders and trigger them on events ??? uh oh how are we going to do this
* Send network events - abstracted to RPC call to the server
*    this will serve as the basis to many of the currently built-in mechanisms
* Emulate local player events or keypresses?
* Set sky/bg/general video effects
* Set player pos/crouch/jump state
* Set player camera pitch/yaw

=== Communication between server and client ===

'''Note''': this section is waiting for approval by hmmmm, doesn't display consensus (yet).

Client lua and server lua should be abled to communicate with each other.
There should be no minetest.client_exec_code(playername, codestring) like call, because it favours a bad setup where code is parsed and re-parsed again, generating lag. Instead, code should be sent.

Server and client communicate in '''events''' which they can both raise, and handle. Every event type has a name and an associated mod. The data which get sent over the network will include (int,int) event types, to be faster. Therefore, client and server have to register events they want to raise, and call both registering functions '''while loading'''. In later code, calling registering functions for unkown events should yield a warning, but without register.

==== Server functions ====

* minetest.register_on_event(modname, eventname, function(clientid, evtdata))
* -&gt; changes the event handler for the (modname, eventname) typed event
* minetest.register_event(modname, eventname)
* -&gt; registers an event type. Doesn't have to be the same order that on_event methods get registered on the other side, but has to be the same events.
* minetest.raise_event(clientid/-s, modname, eventname, evtdata)
* -&gt; raises an event for client with clientid, or if a table is passed, all clientids in that table.
* minetest.raise_event_all(modname, eventname, evtdata)
* -&gt; raises an event for client all clients

==== Client functions ====

* minetest.register_on_event(modname, eventname, function(evtdata))
* -&gt; changes the event handler for the (modname, eventname) typed event
* minetest.register_event(modname)
* -&gt; registers an event type. Doesn't have to be the same order that on_event methods get registered on the other side, but has to be the same events.
* minetest.raise_event(modname, eventname, evtdata)
* -&gt; raises an event

== API compartments ==

=== SAO/CAO control ===

There should be ways to modify CAOs from client lua.

=== HUD and Formspec replacement ===

There is still a debate with what to replace huds and formspecs.

== Specific features to be implemented using Client-side scripting interfaces ==
https://github.com/minetest/minetest/issues/816 -- Add wield light by Zeg9   ---- generally, to be defined per-game through shaders registered via the client-side mod&lt;br/&gt;
https://github.com/minetest/minetest/issues/958 -- Add player list, viewable by holding Tab by sfan5 ---- Trivially doable using client scripting to bind the key and the Hud interface&lt;br/&gt;

[[Category:Modding API‏‎]]
[[Category:Proposal]]</text>
      <sha1>n03fixt7wqdhh4unqfrpqcddjnw87ws</sha1>
    </revision>
  </page>
  <page>
    <title>Proposals/Damage system</title>
    <ns>0</ns>
    <id>395</id>
    <revision>
      <id>6138</id>
      <parentid>6128</parentid>
      <timestamp>2022-08-15T21:15:22Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Rubenwardy moved page [[Proposals / Damage system]] to [[Proposals/Damage system]] without leaving a redirect</comment>
      <origin>2828</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1636" sha1="559h093wfebej00hukt78eac1px2ep5" xml:space="preserve">== Old ==
&lt;pre&gt;
minetest.register_tool("default:sword_steel", {
    description = "Steel Sword",
    inventory_image = "default_tool_steelsword.png",
    tool_capabilities = {
        full_punch_interval = 0.8,
        max_drop_level=1,
        groupcaps={
            fleshy={times={[1]=2.00, [2]=0.80, [3]=0.40}, uses=10, maxlevel=2},
            snappy={times={[2]=0.70, [3]=0.30}, uses=40, maxlevel=1},
            choppy={times={[3]=0.65}, uses=40, maxlevel=0}
        }
    }
})
&lt;/pre&gt;
&lt;pre&gt;
    self.object:set_armor_groups({fleshy=3})
&lt;/pre&gt;

=== Damage calculation ===

Ehm, you don't want to know.

== New ==
&lt;pre&gt;
minetest.register_tool("default:sword_steel", {
    description = "Steel Sword",
    inventory_image = "default_tool_steelsword.png",
    tool_capabilities = {
        -- Digging capabilities
        max_drop_level = 1,
        groupcaps = {
            fleshy={times={[1]=2.00, [2]=0.80, [3]=0.40}, uses=10, maxlevel=2},
            snappy={times={[2]=0.70, [3]=0.30}, uses=40, maxlevel=1},
            choppy={times={[3]=0.65}, uses=40, maxlevel=0}
        },
        -- Damage capabilities
        full_punch_interval = 0.8,
        damage_groups = {fleshy=8, snappy=4, choppy=2},
    }
})
&lt;/pre&gt;
&lt;pre&gt;
    self.object:set_armor_groups({fleshy=100})
&lt;/pre&gt;

=== Damage calculation ===

&lt;pre&gt;
damage = 0
foreach group in cap.damage_groups:
    damage += cap.damage_groups[group] * limit(actual_interval / cap.full_punch_interval, 0.0, 1.0)
        * (object.armor_groups[group] / 100.0)
        -- Where object.armor_groups[group] is 0 for inexisting values
return damage
&lt;/pre&gt;
[[Category:Modding API‏‎]]</text>
      <sha1>559h093wfebej00hukt78eac1px2ep5</sha1>
    </revision>
  </page>
  <page>
    <title>Proposals/Pathfinder wishlist</title>
    <ns>0</ns>
    <id>985</id>
    <revision>
      <id>6142</id>
      <parentid>5988</parentid>
      <timestamp>2022-08-15T21:53:39Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Rubenwardy moved page [[Pathfinder wishlist]] to [[Proposals/Pathfinder wishlist]]</comment>
      <origin>5988</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1655" sha1="9eqdk329qc6pga3a7r8fqf1y05ejxvd" xml:space="preserve">This is a list of wishes for pathfinder.

== Basics ==
* '''Height clearance''': Require optional height clearance for tall objects (e.g. can only proceed if 2 nodes height are clear)
** Important because: Mobs and players rarely are only 1 node high
* '''Custom nodes''': Select which nodes to consider free (can move through), blocking (can not move through) or walkable (can walk upon)
** Important because: You want to teach mobs to avoid lava or other nasty blocks
* '''Width clearance''': Require the path to have at least a certain width e.g. between columns
** Important because: Mobs need to avoid narrow paths they can't fit through, especially if they are more than 1 node thick

== Movement options ==
These change how the pathfinder can move through the world. They are supposed to be toggable on/off.

* Fly
* Swim in liquids
* Climb in climbable nodes
* Move diagonally
* Use something (mainly for NPC using things such as boats, minecarts, ladders, teleporters) 

== Movement contraints ==
Add a couple of options to add rules to constrain movement. These should be toggable on/off.

* Avoid nodes with &lt;code&gt;damage_per_second &gt; 0&lt;/code&gt;
* Avoid nodes with &lt;code&gt;drowning &gt; 0&lt;/code&gt;
* Avoid liquids
* Avoid non-liquids
* Don't jump on or in &lt;code&gt;disable_jump&lt;/code&gt; nodes
* Prefer nodes to travel on (for example gravel rather than dirt/grass)

== Other ==
* Support nodeboxes (but how?)
* Time out when search takes too long (with parameter?)
* default action after move impulse is gone such as "back to base" after intruding player is out of view.

== Issues ==
https://github.com/minetest/minetest/issues/5479

[[Category:Core Engine]]</text>
      <sha1>9eqdk329qc6pga3a7r8fqf1y05ejxvd</sha1>
    </revision>
  </page>
  <page>
    <title>Releasing Minetest</title>
    <ns>0</ns>
    <id>309</id>
    <revision>
      <id>6365</id>
      <parentid>6364</parentid>
      <timestamp>2023-04-16T18:42:01Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <minor/>
      <comment>/* Update wiki */ clarify section name</comment>
      <origin>6365</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="12964" sha1="fj0o1i81tst0ijbtcnnprf654t3gask" xml:space="preserve">== Checklist ==

&lt;pre&gt;
- Feature freeze
  - [ ] Announced
  - [ ] Release candidate advertised
  - [ ] Weblate sources regenerated and strings frozen
- Pre-release (day of release)
  - [ ] Autogenerate files
  - [ ] Correct special strings on Weblate (`LANG_CODE`)
  - [ ] Update translations from Weblate
  - [ ] Update changelog
  - [ ] Update credits
  - [ ] (Minor/Major) Write blog post
  - [ ] Ensure protocol version codes have been bumped
- Release
  - [ ] Run bump_version and verify
  - [ ] Push new tag
  - [ ] Build and upload Windows version
  - [ ] Build and upload Android version
  - [ ] (Minor/Major) Publish blog post
  - [ ] Create forum topic
  - [ ] Notify rubenwardy to announce on Twitter, etc.
  - [ ] Notify downstream maintainers
&lt;/pre&gt;

== Feature Freeze ==

=== Announce a feature freeze ===

(''Skip for patch releases'')
Usually, a '''feature freeze for one week is announced in #minetest-dev'''. New features aren't accepted in this time and people focus on finding and fixing bugs.
To find high priority issues faster, consider linking a release candidate binary to get more test results (for master: GitLab pipeline). This release candidate is usually also posted on the forums (News section).

The feature freeze and release date is set by core developers.

=== Autogenerate files ===

Ensure that the &lt;code&gt;language&lt;/code&gt; setting enum values contain &lt;code&gt;en&lt;/code&gt;: there is no "en" directory, but Minetest supports it.
Autogenerate config file examples such as &lt;code&gt;minetest.conf.example&lt;/code&gt; (see bottom of &lt;code&gt;builtin/mainmenu/dlg_settings_advanced.lua&lt;/code&gt;), etc.

Also update [[Translation|translation]] templates (engine, builtin and any default games). Note that before you regenerate translations, you most likely want to [[#Update_translations_from_Weblate|import existing changes]] first.

Look into the &lt;code&gt;util&lt;/code&gt; sub-directory for tools like &lt;code&gt;updatepo.sh&lt;/code&gt;.

=== Update source strings on Weblate ===

Make sure that the source strings on hosted.weblate.org are up-to-date. Please also notify translators so they can start working.

Do '''not''' just blindly run the scripts without checking. Check if the source strings on Weblate were ''actually'' updated. A simple way to check is to look at any translation that was at 100% (on Weblate) ''before'' the update. After the update, the percentage should drop because of new strings. If it didn't drop but you know there are new strings in Minetest, this means the update failed.

== Before releasing ==

=== Verify special translation strings ===

The translation files contain a special string: [https://hosted.weblate.org/translate/minetest/minetest/en/?q=LANG_CODE&amp;checksum=&amp;offset=1#translations LANG_CODE] (see [[Translating]]).

Verify that all *.po files have a valid value for these strings because translators frequently misunderstand them and enter an invalid value. Fix any invalid values on Weblate by either entering the correct one or by removing the bad translation.

=== Update translations from Weblate ===

'''How to do this''' -&gt; [[Translating#How_to_merge_translations_from_Hosted_Weblate]]

If doing a backported release, you can use the following command to cherry-pick all translation commits from weblate:

&lt;source&gt;
git log --reverse --pretty=format:"%h" $BASE..weblate/master -- po | xargs -L1 git cherry-pick
&lt;/source&gt;

BASE is the commit on master to start from when looking for translation commits. This commit should be newer than the last translation commit on the backport-X branch.

=== Update changelog ===

Changelog can be found [[Changelog|here]].

=== Ensure protocol version codes have been bumped ===

If not a patch release: ensure that PROTOCOL_VERSION has been increased since the last release. ([https://github.com/minetest/minetest/issues/11603 deciding discussion])

If formspec features have been added: ensure LATEST_FORMSPEC_VERSION has been increased since the last release.

== The process ==

This is mostly done by several core developers.

=== Update version in source ===

The process with patch releases is slightly different but the script will take care of it correctly in any case.

* '''Define''' a new version number by running &lt;code&gt;util/bump_version.sh&lt;/code&gt;. Verify that this script correctly:
** changes TRUE to FALSE for the line ''set(DEVELOPMENT_BUILD TRUE)'' in CMakeLists.txt
** updates the version number and release date in misc/net.minetest.minetest.appdata.xml
** increments ''versionCode'' in build/android/build.gradle by 2
** and commits.
* '''Tag''' the version in local git (the script does this) to allow the cmake versioning script to remove the git hash from the version. Do not push the tag to GitHub yet.
* '''Build''', get newest minetest_game, run and check if the thing seems to be working.

=== Build Windows version ===

* These are built for 32-bit and 64-bit using either Visual Studio or MinGW. (sfan5 typically provides MinGW builds)
* If at all possible, debug builds (for both MSVC and MinGW) should be produced along with the regular release builds.
* As of April 2018, this GitLab pipeline can provide win32/64 packages as a '''fallback''': https://gitlab.com/minetest/minetest/pipelines
** Since 5.0, the 64-bit builds are compiled with GC64-enabled LuaJIT (to avoid [https://github.com/minetest/minetest/issues/2988 #2988])

→ → → '''''Make sure that the Windows builds work before continuing to do anything''''' ← ← ←

==== Mini checklist of things to test ====

''Note'': Don't cheat on this by testing in Wine, it has happened that things crash/break in wine while they are fine on real Windows.

* click some menu buttons
* create world with MTG, enter it, exit back to menu
* open multiplayer tab, attempt to join a server
* install a package from CDB, uninstall it again
* enable dynamic shadows, join ingame and look

=== Upload packages to somewhere ===

* All official builds are hosted at Github: https://github.com/minetest/minetest/releases
* Windows builds are uploaded by whoever builds them
* The macOS build is created by [https://github.com/minetest/minetest/actions/workflows/macos.yml Github Actions]
** you will only be able to grab the build '''after''' the release has been pushed
** download the artifact, unpack it once, you should have a &lt;code&gt;minetest-5.x.x-osx.zip&lt;/code&gt;. This is then uploaded.
* Android APKs are also uploaded here when they're done

=== Update branches and tags of minetest and minetest_game on GitHub ===

Tagging is handled by the script for the engine. For MTG you can just create an annotated tag pointing to the latest commit and push it.

The new release should be merged to the stable-5 branch on both minetest and minetest_game.
'''Its important to merge, and not just rebase''', so that git describe works.

==== The problem on the stable-5 branch ====
Usually, merging releases onto the stable branch just consists of adding the commits to the branch, as it contains direct ancestors of master commits, and git can do a fast forward. During release/freeze of 5.0.1 (both minetest and minetest_game), the ancestor rule has been broken.

Therefore, you'll generate merge commits, but this shouldn't be a problem. In the case of merge conflicts, ensure that the changes on stable-5 are all discarded in favor of the tagged commit at master, by doing a merge commit like:

    git checkout version-tag
    git merge -s ours origin/stable-5
    git push origin HEAD:stable-5

=== Update Launchpad stable build to get Ubuntu builds for the new version ===

celeron55, rubenwardy, and ShadowNinja have access.

Process:

* Go to [https://code.launchpad.net/~minetestdevs/minetest-c55/+git/upstream minetest-c55/upstream] and [https://code.launchpad.net/~minetestdevs/minetest-c55/+git/upstream_game minetest-c55/upstream_game] and click "start import".
* First, find out the commit hashes of the minetest and minetest_game git repos corresponding to the release.
* Now visit the [https://code.launchpad.net/~minetestdevs/+recipe/minetest-stable recipe].
* At the bottom of the page there is a section called "Recipe contents". In this section you need to edit the recipe. Make sure you update:
** The version number at the end of the first line. Doing this is a must otherwise there would be duplicate packages which would lead to a fail. The version number has a format like &lt;code&gt;5.1.1-ppa0&lt;/code&gt;. You should keep the ppa postfix so that it's easy to differentiate the package by origin, ppa or upstream Debian.
** The commit hash of the main minetest repo in the second line.
** The commit hash of the minetest_game repo in the last line.
* Check whether everything has been updated correctly.
* Click the green "Request builds" link, enable the newer distro versions, and click confirm.

The build has two steps: first it assembles the source code and uploads it, then it builds the code.
If the first step completed successfully but the second one failed, you need to update the version number in the recipe (e.g. 1.2.3-ppa1) before rebuilding.

=== Build and publish Android APK ===

'''nerzhul''' or '''rubenwardy''' have access to Google Play. Both also hold the signature keys for the app.

==== Signing APKs for the Play Store ====

* Run the Android build process as usual
* '''Sign the package:''' &lt;code&gt;"~/Android/Sdk/build-tools/29.0.3/apksigner" sign --ks keystore-minetest.jks .../app-armeabi-v7a-release.apk&lt;/code&gt;
* EDIT: You can use Android Studio to generate bundles/apks if you upgrade the jks

==== Creating Native Debug Symbols ====

* Copy native/build/intermediates/ndkBuild/release/obj/local/ to new folder
* Remove all but .so files from new folder
* Check the .so contain debug info using the file command
* &lt;code&gt;zip -r symbols.zip .&lt;/code&gt;

== After releasing ==

=== Reenable -dev version suffix ===

(''Skip for patch releases'')
Check that the util/bump_version.sh script did the following steps:

* '''Update''' the version number in CMakeLists.txt and the titles of doc/client_lua_api.txt and doc/menu_lua_api.txt
* '''Change''' FALSE to TRUE for the line ''set(DEVELOPMENT_BUILD FALSE)'' in CMakeLists.txt. This will add the -dev suffix to the version name again.
* '''Commit.'''

=== Write a release notice ===

* Don't forget to edit the minetest.net page ([https://github.com/minetest/minetest.github.io Repo]).
** currently you will need to update machine readable metadata in _data/release.yml and downloads.html itself.
* Post a new topic in the [https://forum.minetest.net/viewforum.php?f=18 News section] of the forum. '''See [[Changelog]].'''
** It is customary to sticky the newest release topic and lock older ones.
* Add a new post to the [https://github.com/minetest/blog/ blog]
* Announce the release on the [https://twitter.com/MinetestProject Twitter account]. rubenwardy has access.

=== Update wiki version template ===

There is a special wiki template containing the version number at [https://wiki.minetest.net/Template:Version], used to make updating various wiki pages by hand less tedious. Update it so it includes the latest version.

=== Notify known package maintainers ===

* '''Arch Linux'''/Manjaro: can be flagged outdated on the [https://archlinux.org/packages/community/x86_64/minetest/ package page]
* '''Alpine Linux''': can be flagged outdated on the [https://pkgs.alpinelinux.org/package/edge/community/x86_64/minetest package page]
* '''Debian'''/Ubuntu: has [https://tracker.debian.org/pkg/minetest own version tracking], no need to contact
* '''F-Droid''': has volunteer maintainers, if nobody notices consider opening an issue [https://gitlab.com/fdroid/fdroiddata/-/issues here]
* '''Snap''': open an issue (or contribute) [https://github.com/snapcrafters/minetest here]
* '''Flatpak''':  open an issue (or contribute) [https://github.com/flathub/net.minetest.Minetest here]
* '''Gentoo''': has [https://packages.gentoo.org/packages/games-action/minetest own version tracking], no need to contact

You can find out how quick various distro are to adopt new versions [https://repology.org/project/minetest/history here on repology].

=== ContentDB ===

==== Add a new version ====

Add the new version to the drop-down list of compatible Minetest versions that authors can select for their things.

Note that CDB tells Minetest versions apart by their protocol version so this is obviously not applicable to patch releases.

People who have access: rubenwardy + ???

==== Package devtest ====

The Minetest Game package on ContentDB makes a new release automatically when a new tag is made.

The [https://content.minetest.net/packages/Minetest/devtest/ Development Test] package however needs to be released '''manually'''. Make a new release, upload a ZIP file with Development Test like it looks like the Minetest source tree in the stable branch, and set the minimum and maximum Minetest versions to the Minetest version it is intended for.

[[Category:Core Engine]]
[[Category:Rules and Guidelines]]</text>
      <sha1>fj0o1i81tst0ijbtcnnprf654t3gask</sha1>
    </revision>
  </page>
  <page>
    <title>Spawn Algorithm</title>
    <ns>0</ns>
    <id>1011</id>
    <revision>
      <id>6366</id>
      <parentid>6259</parentid>
      <timestamp>2023-04-19T13:48:51Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <minor/>
      <comment>version update</comment>
      <origin>6366</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3362" sha1="t3u5hhfw08x8rno5f41mv8pu2dgxcnp" xml:space="preserve">The '''spawn algorithm''' tries to find a suitable spawn or respawn position for players. It is run whenever a player spawns or respawns.

This page describes how Minetest’s builtin spawn algorithm works, as of '''version 5.7.0'''. Note that individual mods and games can choose to override the spawning behavior. The setting &lt;code&gt;static_spawn_point&lt;/code&gt; can also override it.

== Overview ==

If the setting &lt;code&gt;static_spawn_point&lt;/code&gt; is set, Minetest will spawn new players at this position.

If this setting is not set, and no mod introduces its own spawning behavior, Minetest will apply an algorithm to find a spawn point automatically. It works like this:

Basically, Minetest checks random position in a square centered on (0,0). Then it tries to find a suitable Y height to spawn the player in. If it did, that position is the spawn position. Otherwise, it increases the square size and tries again (with a new random position in that square).

The first square has a size of 3×3. If the first attempt failed, the search radius increases by 1, now it picks a random position in a 5×5 square (still centered on (0,0)). This is repeated until a valid spawn position is found. If the search square becomes too big or out of mapgen limits, the spawn search aborts and (0,0,0) will be used as the spawn position as a desperate fallback.

The algorithm makes up to 4001 attempts before giving up.

== The Spawn Algorithm ==

Assuming that &lt;code&gt;static_spawn_point&lt;/code&gt; is ''not'' set and no mod provides its own spawning behavior, Minetest will follow this algorithm to find a spawn position automatically:

# Create a variable named &lt;code&gt;range&lt;/code&gt; and set it to 1
# If &lt;code&gt;range&lt;/code&gt; is greater than or equal to 4000, or &lt;code&gt;range&lt;/code&gt; is greater than the mapgen limit, terminate the algorithm and return (0,0,0) as the spawn position. Otherwise, continue.
# Pick a random 2D position in the range from the XZ coordinates (&lt;code&gt;-range, -range&lt;/code&gt;) to (&lt;code&gt;+range, +range&lt;/code&gt;) (save it into &lt;code&gt;pos&lt;/code&gt;)
# Get spawn level of this 2D position to get the Y coordinate (save into &lt;code&gt;pos2&lt;/code&gt;)
# If spawn level not found: Increase &lt;code&gt;range&lt;/code&gt; by 1 and go to step 2. Otherwise, continue.
# If the node at &lt;code&gt;pos2&lt;/code&gt; and the node directly above it are either airlike (&lt;code&gt;drawtype="airlike"&lt;/code&gt;) or Ignore: Terminate algorithm and return &lt;code&gt;pos2&lt;/code&gt; as the spawn position
# Increase &lt;code&gt;range&lt;/code&gt; by 1 and go to step 2

Note: This is a slight simplification of the actual code. The actual code for this is the function &lt;code&gt;Server::findSpawnPos&lt;/code&gt; in &lt;code&gt;server.cpp&lt;/code&gt;.

== Spawn Level ==
The spawn level	is the Y coordinate of a XZ position at which players will spawn. The particular algorithm/formula for this depends on the mapgen. The general goal here is to spawn the player 

A rough overview of spawn levels:
{|class="wikitable"
!Mapgen
!Spawn level
!Failure condition
|-
|v6
|Base terrain height
|If below or at water level, or 16 nodes above water level
|-
|fractal
|Lowest 3 consecutive air nodes, starting from Y=0, or water level if the 'terrain' mapgen flag is set
|If no suitable air nodes were found for 4096 consecutive nodes
|-
|singlenode
|Always 0
|None.
|-
|v5, v7, valleys, carpathian
|It's complicated ...
|It's complicated ...
|}

[[Category:Core Engine]]</text>
      <sha1>t3u5hhfw08x8rno5f41mv8pu2dgxcnp</sha1>
    </revision>
  </page>
  <page>
    <title>SteamDeck</title>
    <ns>0</ns>
    <id>1012</id>
    <revision>
      <id>6340</id>
      <parentid>6326</parentid>
      <timestamp>2023-03-24T16:22:48Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <comment>/* Usage as an end user */</comment>
      <origin>6340</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1539" sha1="6teizodqn050m0g6ym0q53nqp6ex73o" xml:space="preserve">This page contains information useful for developing Minetest for the Steam Deck. Contact rubenwardy with any questions.

== Usage as an end user ==

See [https://blog.rubenwardy.com/2022/12/02/minetest-steam-deck/ rubenwardy's blog post]

== Installing a dev version ==

=== Uploading an AppImage using Deck DevKit ===

Source: https://partner.steamgames.com/doc/steamdeck/loadgames

* Name: MinetestAppImage
* Local folder: &lt;code&gt;/home/user/dev/tmp/minetestdeck/&lt;/code&gt;
* Upload filtering [Include only] &lt;code&gt;Minetest-dev.AppImage&lt;/code&gt;
* Start command: &lt;code&gt;Minetest-dev.AppImage&lt;/code&gt;
* Save config
* Click Upload
* On deck: &lt;code&gt;cp /usr/lib/libcrypto.so ~/devkit-game/MinetestAppImage/libcrypto.so.1&lt;/code&gt;
* Minetest should now be in Non-steam games as "Devkit games: MinetestAppImage"

Note, I had issues reusing the layout from the stable version of the game. Pressing "apply layout" did nothing. I needed to follow this bizarre workaround https://www.reddit.com/r/SteamDeck/comments/10tsp1a/i_cant_change_the_default_controller_layout/

=== Uploading a build using Deck DevKit ===

'''Note: Untested'''

Source: https://partner.steamgames.com/doc/steamdeck/loadgames

* Name: Minetest
* Local folder: &lt;code&gt;/home/user/dev/minetest/&lt;/code&gt;
* Upload filtering [Include only] &lt;code&gt;/bin/*** /builtin/*** /games/devtest/*** /games/minetest_game/*** /textures/base/pack/*** /client/shaders/***&lt;/code&gt;
* Check "Delete remote files not present in local folder"
* Start command: &lt;code&gt;bin/minetest&lt;/code&gt;
* Save config
* Click Upload</text>
      <sha1>6teizodqn050m0g6ym0q53nqp6ex73o</sha1>
    </revision>
  </page>
  <page>
    <title>Storing Data</title>
    <ns>0</ns>
    <id>1018</id>
    <revision>
      <id>6149</id>
      <timestamp>2022-08-16T02:00:06Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <comment>Created page with "See https://rubenwardy.com/minetest_modding_book/en/map/storage.html"</comment>
      <origin>6149</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="68" sha1="0yj22pjlpwcji6q1bo73k2db4i0mit2" xml:space="preserve">See https://rubenwardy.com/minetest_modding_book/en/map/storage.html</text>
      <sha1>0yj22pjlpwcji6q1bo73k2db4i0mit2</sha1>
    </revision>
  </page>
  <page>
    <title>TODO</title>
    <ns>0</ns>
    <id>365</id>
    <revision>
      <id>6234</id>
      <parentid>6125</parentid>
      <timestamp>2022-10-25T13:45:18Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <comment>/* See also */</comment>
      <origin>6234</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8665" sha1="rak29xfb0j64w5mus7rntr1bv2h78m0" xml:space="preserve">{{Mbox|type=issue|text='''Checkout the [https://github.com/minetest/minetest/blob/master/doc/direction.md roadmap] instead'''&lt;br/&gt;The roadmap outlines a consensus on medium-term Minetest development. This page contains other wishlist items from core developers, but hasn't necessarily reached a consensus and may be long term.}}

== TODO in Minetest ==
=== Things to do soon ===

==== Mapgen ====

* Add configuration for DungeonGen
* Add configuration for CaveGen

==== DecorationDef ====

* Add L-system decoration support
* Add cutoff handling

==== BiomeDefManager ====

* Add biomemap cache
* Scale temperature and humidity noise to more sensible value ranges
* Add biome weight attribute
* Find out how to account for elevation better!
* Add Voronoi diagram maker? https://forum.minetest.net/viewtopic.php?f=9&amp;t=13163

==== MapVoxelManipulator ====

* Figure out a permanent, elegant solution to the walled-in cave problem - can use is_ground_content now - does this belong in VoxelManipulator?

==== EmergeThread ====

* Figure out the thread priority mess
* Assign thread affinities for a bit of a performance boost (reduce L2 cache misses)

==== GUIs / Formspecs ====

* New main menu, which promotes Minetest better [https://github.com/minetest/minetest/issues/6733 6733]
* Refactor formspec / GUI code to be independent from serialisation [https://github.com/minetest/minetest/issues/9358 9358]
* Add new GUI API, probably based on a Lua DSL [https://github.com/minetest/minetest/issues/6527 6527]
* New GUI default theme [https://github.com/minetest/minetest/issues/9802 9802]

==== Other ====

* Make a library for reading a Minetest map without worrying about the database used. (libmtmap?)
* Add block tinting (grass, water, sky, etc.) (for biomes)
* Add Fullbright option

=== Big, long term goals (Client) ===

==== Client-Side Scripting (CSM) ====
See original plans: [[Client_scripting_plans]]

* Server-Sent Client-Side Modding (SSCSM)
* Client-side prediction APIs
* GUI APIs

==== Client-Side Biomes ====
The server should transfer biome definitions to the client which calculates biomes locally.
Crossing over into a new biome should trigger a client-side script callback
Biomes have effects:
 * Full scene post-effects (tint everything a different color)
 * Temporarily override settings (cloud_height, enable_clouds, water_wave_height, water_wave_length, water_wave_speed)

==== Hardware Lighting for Light Sources ====

''' Description '''&lt;br /&gt;
Benefits:

* would allow variable light range and cutoff
* would free up param1 of MapNodes to be used for storing more immediate node metadata (always a good thing!).
* would allow colored light sources

Of course, can use dynamic lights, except they're very intensive and generally a scarce resource
Dynamically generated lightmaps seem like a good way forward. &lt;br /&gt;
http://joshbeam.com/articles/dynamic_lightmaps_in_opengl/
&lt;br /&gt;
RealBadAngel is currently working on shader-based lighting. ''What strategy is he using?''
&lt;br /&gt;

==== Occlusion Culling/Occlusion Query ====

Irrlicht does support occlusion culling.  If enabled, it culls scene nodes which are entirely out of the camera's view fulcrum. &lt;br /&gt;
Problem:  The entire map is an Irrlicht scene node. ''Why? What was the rationale for this decision?''&lt;br /&gt;
Solution:  Make scene nodes per MapBlock. &lt;br /&gt;
While we're at it, playing around with scene nodes, it'd probably be a good idea to maintain two (or three) separate nodes for each MapBlock, one for each type of material.  Opaque, transparent, and liquid drawtypes.  This fixes the still unsolved material transparency problem.

=== Big, long term goals (Server) ===

==== Voxel Area Entities ====

''' Description '''&lt;br /&gt;
How cool would it be to build a full-sized boat in Minetest, and then drive it around the ocean? That's one example of something that would be possible with this feature.&lt;br /&gt;
Voxel Area Entities are moveable ActiveObjects whose mesh and texture is user-modifiable via setting MapNodes in it. This is an extremely powerful feature, and while perhaps not of extreme difficulty to implement, there is very much to be done.&lt;br /&gt;
''' What needs to be done '''
* A new derived SAO and CAO (they would need to be treated fundamentally differently), along with setNode() and removeNode() calls.
* A derived VoxelManipulator class, perhaps called ObjectVoxelManipulator, which will be used to manipulate them.
* These types of objects have meshes, and will need to be updated in MeshUpdateThread along with MapBlocks.
* Some way to store these in the map. Perhaps these objects will get special non-block-ID keys in the map DB.
* A decent way to serialize these objects. This detail in particular will require special attention.
* For the previous two points, see http://irc.minetest.net/minetest-dev/2013-10-21#i_3383926 for a discussion of a possible way to handle the objects.
&lt;br /&gt;

==== Envlock Scope Reduction ====

''' Description '''&lt;br /&gt;
Envlock needs to be put on a diet. Seriously. This is believed to be the primary reason for perceived unresponsiveness in Minetest - solving this would help matters immensely.&lt;br /&gt;
''' What needs to be done '''
* Add a thin abstraction layer for atomic operation intrinsics.
* Replace Environment operations that require concurrency but are simple enough with the said atomic operations and clever ordering.
* Add a thread-safe hashtable structure to be used instead of std::map (or core::map) where locks would be needed, make use of this.
* RCU for Map things - big structures such as MapBlocks could benefit from Read-Copy-Update for synchronization. This is the biggest change, but the reward would be immense.
&lt;br /&gt;

==== Pre-generate world ====

''' Description '''&lt;br /&gt;
''' What needs to be done '''
&lt;br /&gt;

==== Add colorlike to node param types ====

''' Description '''&lt;br /&gt;
Add a field like facedir, wallmounted, and liquidlike called colorlike that will allow the user to register a set of colors so that the color of some base node is modified on draw.  This would save many node definitions.&lt;br /&gt;
This field would be (part of, at least) param2 in a MapNode.  If colorlike is specified on its own, then it can define and use up to 256 colors.  If used with facedir or wallmounted, then, it can only define and use 8 colors.
&lt;br /&gt;
''' What needs to be done '''&lt;br /&gt;
* Store a color LUT with the ContentFeatures for the defined node that is to be passed along from Lua when registering the node.
* Figure out how to draw these colors in inventory screens and what not without having to prerender more textures
* Bump ContentFeatures version
&lt;br /&gt;

==== Rewrite falling code to C++ ====

''' Description '''&lt;br /&gt;
nodeupdate() now very slow and can't handle large amount of falling nodes.
100-1000 falling nodes now makes server very slow, 10000+ cause segfault.
To test - make sand floating island via mapgen, touch it
&lt;br /&gt;
''' What needs to be done '''&lt;br /&gt;
Rewrite in core with queue (like Map::transformLiquids)
&lt;br /&gt;

==== Pathfinder ====
See [[Pathfinder wishlist]].

=== Big protocol changes ===

There are several features that would probably bring benefits in the long term, but can't currently be merged because of network protocol incompatibility.
That is, they either can't be implemented in a way that lets old clients connect to new servers and new clients to old servers, or it would be a major pain to do so.
The point of this section is to list such features so that they can be merged at once: a one-time incompatibility, perhaps coinciding with the release of 0.5.0,
is better than breaking compatibility all the time.
'''Note: ''' Not all of the things listed below need to be done, these are just ideas.
* A binary key-value storage which easily supports missing fields with default values (e.g. [https://github.com/celeron55/minetest/blob/meta_set_nodedef_2/src/util/template_serialize.h header], [https://github.com/celeron55/minetest/blob/meta_set_nodedef_2/src/util/template_serialize.cpp source], [https://github.com/celeron55/minetest/blob/meta_set_nodedef_2/src/nodedef.cpp#L327 usage])
* Using TCP for reliable data transfer (e.g. [https://github.com/celeron55/minetest/tree/tcp_connection tcp_connection])
* Make the client request mapblocks (e.g. [https://github.com/celeron55/minetest/tree/tcp_blocks_2 tcp_blocks_2])
* Improved authentication and encryption
* Remove old compatibility kludges.
* Many command IDs have become obsolete in the protocol: they could be consolidated
* Change builtin CONTENT_* to 0, 1, 2
&lt;br /&gt;

== See also ==
* [https://wiki.minetest.net/Terminology Terminology]

[[Category:Core Engine]]
[[Category:Proposal‏‎]]</text>
      <sha1>rak29xfb0j64w5mus7rntr1bv2h78m0</sha1>
    </revision>
  </page>
  <page>
    <title>Terminology</title>
    <ns>0</ns>
    <id>302</id>
    <revision>
      <id>6231</id>
      <parentid>6123</parentid>
      <timestamp>2022-10-25T13:43:10Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <comment>Replaced content with "See https://wiki.minetest.net/Terminology"</comment>
      <origin>6231</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="41" sha1="toixxcyxk3oo7rmuf3ebaoptjkc14xv" xml:space="preserve">See https://wiki.minetest.net/Terminology</text>
      <sha1>toixxcyxk3oo7rmuf3ebaoptjkc14xv</sha1>
    </revision>
  </page>
  <page>
    <title>Translating/de</title>
    <ns>0</ns>
    <id>804</id>
    <revision>
      <id>5990</id>
      <parentid>5529</parentid>
      <timestamp>2022-05-24T10:34:44Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <comment>Add to Core Engine category</comment>
      <origin>5990</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4326" sha1="jhkrg1p3sih8k1z8yp2fq8o7mwr3khl" xml:space="preserve">This page contains information for German translators.

== Wiederkehrende Übersetzungen ==
Hier gibt es eine Sammlung von Minetest-spezifischen Vokabeln, die der Konsistenz zuliebe immer gleich übersetzt werden sollten. Wenn ein besonderer Ausdruck auftauchen sollte, der hier noch nicht aufgeführt wurde, bitte an den bestehenden Übersetzungen orientieren und hier einfügen.

=== Substantive ===

{| class="wikitable"
|-
! Original !! Übersetzung !! Geschlecht !! Kommentar
|-
| ''anisotropic filtering'' || ''Anisotroper Filter'' || m ||
|-
| ''automatic forwards'' || ''Vorwärtsautomatik'' oder ''Autovorwärts'' || f ||
|-
| ''block'' / ''mapblock'' || ''Kartenblock'' || m || Hier ist besonders darauf zu achten, nicht „Block“ zu nehmen, da es sonst mit „node“ verwechselt wird.
|-
| ''cave'' || ''Höhle'' || f ||
|-
| ''cavern'' || ''Hohlraum'' || m ||
|-
| ''Cinematic Mode'' || ''Filmmodus'' || m || Nicht ''Kinomodus'', da es zum Filmen geeignet ist.
|-
| ''client'' || ''Client'' || m || Siehe auch: [http://canoo.net/inflection/client:N:M]
|-
| ''Creative Mode'' / ''creative mode'' || ''Kreativmodus'' || m
|-
| ''content store'' || ''Inhaltespeicher'' || m ||
|-
| ''dungeon'' || ''Verlies'' || n ||
|-
| ''entity'', ''entities'' || Entity, Entitys || n ||
|-
| ''flags'' || ''Flags'' || f || Klassische Eindeutschung eines Fremdworts; das Konzept ist schwer mit einem anderen Wort wiederzuspiegeln
|-
| ''floatland'' / ''floatlands'' || ''Schwebeland'' / ''Schwebeländer'' || n || Schwebende Landmassen, spezieller Modus im v7-Kartengenerator (siehe [http://wiki.minetest.net/Map_generator_features#v7])
|-
| ''hotbar'' || ''Schnellleiste'' || f ||
|-
| ''game'' || ''Spiel'' || n || Siehe [http://wiki.minetest.net/Games]
|-
| ''instrumentation'' || ''Instrumentierung'' || f || Siehe: [https://de.wikipedia.org/wiki/Instrumentierung_(Softwareentwicklung)]
|-
| ''item'' || ''Gegenstand'' || m || Als „item“ wird alles bezeichnet, was man mit sich im Inventar tragen kann. Das umfasst alle Blöcke (z.B. Sand), Werkzeuge (z.B. Spitzhacke) und sonstige Dinge (z.B. Kohleklumpen oder Buch).
|-
| ''lacunarity'' || ''Lückenhaftigkeit'' || f || Fachbegriff aus der Mathematik. Siehe: [https://www.dict.cc/?s=lacunarity]
|-
| ''map'' || ''Karte'' || f ||
|-
| ''mapchunk'' || ''Mapchunk'' || m || Noch eine „faule“ Eindeutschung eines Fremdworts. Siehe [[Terminology]]
|-
| ''mapgen'' / ''map generator'' || ''Kartengenerator'' || m ||
|-
| ''mod'' || ''Mod'' || f || die ''Modifikation''
|-
| ''modpack'' || ''Modpack'' || n || das „Mod-Paket“
|-
| ''node'' || ''Block'' || m || Die wörtliche Übersetzung wäre „Knoten“, was aber sehr irreführend wäre.
|-
| ''noclip'' || ''Geistmodus'' || m ||
|-
| ''mesh'' || ''Mesh'' || f || Gemeint ist „polygon mesh“, siehe [https://en.wikipedia.org/wiki/Polygon_mesh]
|-
| ''minimap'' || ''Übersichtskarte'' || f || Kann bei Platzmangel auch zu „Karte“ abgekürzt werden
|-
| ''noise'' || ''Rauschen'' || n ||
|-
| ''noise param'' / ''noise parameter'' || ''Rauschparameter'' || m ||
|-
| ''ridge'' || ''Flusskanal'' || m || Kontext: Die breiten Flüsse in v7, erzeugt vom „ridges“-Flag. Siehe [http://wiki.minetest.net/Map_generator_features#v7]
|-
| ''shader'' || ''Shader'' || m ||
|-
| ''screenshot'' || ''Bildschirmfoto'' || n ||
|-
| ''special'' || ''Spezial'' || || Name einer Taste
|-
| ''threshold'' || ''Schwellwert'' || m || Kontext: Kartengenerator
|-
| ''tone mapping'' || ''Dynamikkompression || m ||
|-
| ''spawn point'' || ''Einstiegsposition'' || f || Position, in der neue oder wiederbelebte Spieler auftauchen
|-
| ''world'' || ''Welt'' || f ||
|-
|}

=== Verben ===
{| class="wikitable"
|-
! Original !! Übersetzung !! Kommentar
|-
| to ''instrument'' || ''instrumentieren'' || Siehe: [https://de.wikipedia.org/wiki/Instrumentierung_(Softwareentwicklung)]
|-
| to ''render'' || ''rendern''
|-
| to ''sneak'' || ''schleichen ''
|-
|}

=== Adjektive ===
{| class="wikitable"
|-
! Original !! Übersetzung !! Kommentar
|-
| ''deprecated'' || ''veraltet'' || Siehe [https://en.wikipedia.org/wiki/Deprecated#Software_deprecation]
|}

== Sonstiges ==

* Benutzer werden in der Höflichkeitsform („Sie“) angeredet
* Anführungszeichen: „ “
* Innere Anführungszeichen: ‚ ‘

[[Category:Core Engine]]</text>
      <sha1>jhkrg1p3sih8k1z8yp2fq8o7mwr3khl</sha1>
    </revision>
  </page>
  <page>
    <title>Translation</title>
    <ns>0</ns>
    <id>337</id>
    <revision>
      <id>6378</id>
      <parentid>6334</parentid>
      <timestamp>2023-05-01T11:18:45Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <comment>lua_api.txt -&gt; lua_api.md</comment>
      <origin>6378</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="13654" sha1="79m1hnfy1728pn7nw9atw33bjw96jw2" xml:space="preserve">This page explains how to translate the Minetest engine, along with mods.

== Translating the engine ==
Translations of the Minetest engine are [https://hosted.weblate.org/projects/minetest/minetest/ automated using Weblate]. Register an account, select the Minetest project and start translating. Translation is a continuous effort and the texts will change almost at every version.

The developers usually will update the translation templates shortly before a new release. If you translate a long time before a release, your translation updates will still be included, but your translation will likely be incomplete because almost every new version comes with new things to translate. Check out the [https://forum.minetest.net/viewforum.php?f=18 News forum] to see if a new release is imminent.

In case you wish to translate a new language, send a message in #minetest-dev and a coredev can add it.

=== Language-specific notes ===
Here is a list of wiki pages for translating specific languages:
* [[Translating/de|German]]

=== Special strings ===
In the translations you will find one string with a special meaning. It must '''not''' be translated literally. They are used internally by Minetest to trigger certain settings. You must enter a special value into the translation field.

* &lt;code&gt;LANG_CODE&lt;/code&gt;: The language code of the language you're translating (e.g. "de" for German).

=== Builtin ===
Builtin is another core part of Minetest which includes texts for server commands, privilege descriptions, and many other server-related messages. Builtin is translated with a different method, you can't use Weblate here. Builtin is translated like mods (read the section below to learn how) and the translation files work the same like for the mod translation files. You can find the builtin translation files in the Minetest source directory under &lt;code&gt;builtin/locale&lt;/code&gt;.

For example, if you want to translate Builtin into German, you need to edit &lt;code&gt;builtin/locale/__builtin.de.tr&lt;/code&gt;.

== Translating mods and games ==
Mods and games are translated with special ".tr" files. This includes Minetest Game. This is a different system than the engine translation system.

=== For translators ===

To translate a mod, you first need to know if it can even be translated. Check if the following is true:

* The directory &lt;code&gt;locale&lt;/code&gt; exists '''and'''
* The file &lt;code&gt;template.txt&lt;/code&gt; exists in the &lt;code&gt;locale&lt;/code&gt; directory.

If both conditions are true, the mod is ready for translation. Otherwise, it is not. In that case, ask the project maintainers to add translation support '''and''' the &lt;code&gt;template.txt&lt;/code&gt; file.

To translate a mod (or update an existing translation), follow these steps:

# Check if a file named &lt;code&gt;[MODNAME].[LANG_CODE].tr&lt;/code&gt; exists in &lt;code&gt;locale/&lt;/code&gt;. If yes, skip to step 3. Otherwise, go to step 2.
# Copy the provided &lt;code&gt;template.txt&lt;/code&gt; to a file named &lt;code&gt;[MODNAME].[LANG_CODE].tr&lt;/code&gt;
# Open the &lt;code&gt;.tr&lt;/code&gt; file in a text editor
# You will encounter a list of texts that end in equals signs. Put the translation of each text after the equals sign (note the special rules below)
# Save the file

(Note: &lt;code&gt;[MODNAME]&lt;/code&gt; is the name of the mod and &lt;code&gt;[LANG_CODE]&lt;/code&gt; is the language code)

Done. Now you probably want to test this translation in-game and submit your changes to the mod/game maintainers.

To translate an entire game, you translate all the mods within that game.

==== Special text rules ====

Here are the detailed rules of how the ".tr" file is structured.

* The lines that matter for you are all non-empty lines that do not start with "#". These are the translation lines. On the left side of the equals sign, the original text is written. On the right side of the equals sign, the translation has to be written. If the translation is empty, Minetest will display the original text instead.
* Do not change lines that start with "# textdomain:". These are need for technical reasons.
* You can add as many empty lines you want. They will be ignored
* Other lines that start with "#" are comments. Minetest will ignore them but they might contain some information for you. It is up to you whether you keep or remove these lines.

In the texts (both original and translated texts), some characters will be replaced in the actual game:

* "@1", "@2", ... to "@9" are placeholders. The game will replace it with another text. You '''MUST''' include all placeholders in the translation, but the order can be different.
* To produce the "@" character, you '''MUST''' write "@@"
* To produce the "=" character, you '''MUST''' write "@="
* To produce a newline, you '''MUST''' write "@n". Alternatively, you can also write "@" followed by an actual newline

==== Example ====

Consider the example mod &lt;code&gt;example&lt;/code&gt;. You will find the file &lt;code&gt;template.txt&lt;/code&gt; with this content:

&lt;pre&gt;# textdomain:example
Apple=
Pickaxe=
#This is a comment, not a translation. You can ignore this line.
Welcome, @1!=
@1 has killed @2 and gained @3 EXP.=
E-mail: &lt;somebody@@example.org&gt;=
“@=” is the equals sign=
This text@nhas 2 lines.=Dieser Text@nhat 2 Zeilen.&lt;/pre&gt;

A possible translation in German would be stored under &lt;code&gt;example.de.tr&lt;/code&gt; with this content:

&lt;pre&gt;# textdomain:example
Apple=Apfel
Pickaxe=Spitzhacke
#This is a comment, not a translation. You can ignore this line.
Welcome, @1!=Willkommen, @1!
@1 has killed @2 and gained @3 EXP.=@1 hat @2 getötet und @3 EXP erhalten.
E-mail: &lt;somebody@@example.org&gt;=E-Mail: &lt;somebody@@example.org&gt;
“@=” is the equals sign.=»@=« ist das Gleichheitszeichen.
This text@nhas 2 lines.=Dieser Text@nhat 2 Zeilen.&lt;/pre&gt;

For reference, this is how the English texts could ''actually'' show up in Minetest (with the placeholders resolved):

* Apple
* Pickaxe
* Welcome, Merlin!
* Gnerf has killed Hormel and gained 500 EXP.
* E-mail: &lt;somebody@example.org&gt;
* “=” is the equals sign
* This text&lt;br&gt;
has 2 lines

=== For developers ===

As a mod or game developer, if you want to implement translation support, please refer to the official Lua API documentation (&lt;code&gt;lua_api.md&lt;/code&gt;) and [https://rubenwardy.com/minetest_modding_book/en/quality/translations.html the modding book chapter on Translation].

[https://github.com/minetest-tools/update_translations update_translations.py] is an extremely useful tool that can automatically generate and update translation files for mods. Using the &lt;code&gt;-t -O&lt;/code&gt; flags are recommended as it will truncate old translated strings that aren't being used anymore.

== The Minetest engine translation system ==
This section is dedicated to developers.

=== Overview ===
For most strings, Minetest uses the '''gettext''' library to translate the texts in Minetest. To enable internationalization support, the game must be built with the &lt;code&gt;-DENABLE_GETTEXT=1&lt;/code&gt; option to &lt;code&gt;cmake&lt;/code&gt;, which is enabled by default.

Games, mods and builtin are translated using a different method (see below).

=== Language detection ===
Minetest detects the current language by inspecting the &lt;code&gt;LANG&lt;/code&gt; environment variable. This is not a problem on Unix-based systems (such as GNU/Linux) since the system already defines this variable at login. On Windows platforms, the system language is used.

=== Available translations ===
The available translations are found in source form in the &lt;code&gt;po/&lt;/code&gt; directory. The &lt;code&gt;cmake&lt;/code&gt; detects them, and they are built as part of the build process.

The main translation file must be updated now and then using the [https://github.com/minetest/minetest/blob/master/builtin/mainmenu/dlg_settings_advanced.lua this script] (configuration, bottom of the file) and [https://github.com/minetest/minetest/blob/master/util/updatepo.sh this one] (C++ and Lua translations). Submit a PR after running the generator or poke a core dev to update the translations when it's needed. Note that builtin translations are handled separately, see the maintenance notes below.

== Maintaining engine translations ==
There are two types of translations that need maintenance: Client-side (using Gettext) and server-side translations for builtin (using &lt;code&gt;minetest.get_translator&lt;/code&gt;).

=== Client-side translations (Gettext) ===
==== Contributing a new translation ====
To create a new translation, one must create a directory named after the [http://www.mathguide.de/info/tools/languagecode.html language code], creating a copy of the &lt;code&gt;po/minetest.pot&lt;/code&gt; file as &lt;code&gt;po/''LANG''/minetest.po&lt;/code&gt;, and translating the original english text into your language; then &lt;code&gt;cmake&lt;/code&gt; will detect it and &lt;code&gt;make&lt;/code&gt; builds the language.

However, it is recomended to contact a core dev to create the .po file for you language and then use [https://hosted.weblate.org/projects/minetest/minetest/ weblate] to translate.

''Note to coredevs'': Creating a new language directly from weblate is sufficient, no need to mess with the files directly in the repository.

==== How to merge translations from Hosted Weblate ====

Translations should be merged in bulk, and not too often, to not create too large "noise" in the commit log. A good schedule is once every few months and at the start of the '''feature freeze'''. This section explains the necessary steps for coredevs. You will need owner access to the hosted repo in order to be able to push the "Rebase" button.

As of Oct 2019, ShadowNinja, nerzhul, sfan5, rubenwardy, Krock and possibly some other coredevs have such access.

===== Setting up =====

Add weblate as remote: &lt;code&gt;git remote add weblate https://hosted.weblate.org/git/minetest/minetest/&lt;/code&gt;.

===== Once every translation =====

# Visit [https://hosted.weblate.org/projects/minetest/minetest/#repository Repo maintenance], and lock the repository to prevent changes from users while you are editing.
# Generate a clean history, without merge commits. Push the "Rebase" button on the repository.
# Do &lt;code&gt;git remote update weblate&lt;/code&gt;. Confirm e.g. with &lt;code&gt;git log --graph weblate/master&lt;/code&gt; that it bases on upstream's master, and only has "Translated using Weblate" as additional commits, no merge commits.
# As every weblate user can freely edit translations, there can be vandalism. Therefore, check the translation commits, e.g. with help from online translator services like Google Translate, other core devs, or trusted members from the community. It might be helpful to push the commits to your GitHub clone's branch, then you have commit http links to share. In the case of required changes, let them do it over the weblate interface (after you've unlocked), and start with 2. again. Of course, its up to you to how much you want to follow this rule, as checking changes can be quite time consuming. Feel free to refine your scope e.g. to new and not yet trusted contributors. 
# Check out the branch from Weblate's repo: &lt;code&gt;git checkout weblate/master&lt;/code&gt;
# Reorder the commits from the same author, and squash them. &lt;code&gt;git rebase -i&lt;/code&gt; is your friend (especially after you set it up to show the author, see [http://stackoverflow.com/a/35851846 this Stack Overflow answer] on how to do it). As a good tip, rather do multiple runs of such an interactive rebase where you do small changes each, than one big run which then fails in the middle of the business. '''&lt;code&gt;./util/reorder_translation_commits.py&lt;/code&gt; can do the commit reordering for you.'''
# Confirm that &lt;code&gt;git diff weblate/master&lt;/code&gt; is empty, to make sure that you didn't mess up at step 6. Otherwise use &lt;code&gt;git reflog&lt;/code&gt; to find the latest rebase pass that worked, and retry the commits 
# If ''required/desired'', do these: (&lt;code&gt;--author="updatepo.sh &lt;script@mt&gt;"&lt;/code&gt; should be used when committing changes made by the scripts)
## Update &lt;code&gt;minetest.conf.example&lt;/code&gt; and the dummy &lt;code&gt;*.cpp&lt;/code&gt; translation file and commit. Do this by uncommenting the lines at the end of builtin/mainmenu/dlg_settings_advanced.lua
## Run &lt;code&gt;util/updatepo.sh&lt;/code&gt;, and commit. Note that it creates lots of unneccessary changes, and enlarges repository size disproportionately, therefore run it even less often.
# Push to the [https://github.com/minetest/minetest GitHub repo] with e.g. &lt;code&gt;git push origin HEAD:master&lt;/code&gt;
# Reset the Weblate remote ("Reset" button), rebase it to match now current master, and unlock it. If pushed commits do not yet show up in Weblate you may have to press the "Pull" button.

=== Server-side builtin translations (&lt;code&gt;minetest.get_translator&lt;/code&gt;) ===
The server-side translations of builtin are located in &lt;code&gt;builtin/locale&lt;/code&gt; with &lt;code&gt;template.txt&lt;/code&gt; being used as the template file.

The template file as well as all locale files need to be updated before release to allow translators to translate.
We do not have an official tool for automatically updating these translations yet, but you can use this unofficial Python script here (it might still need some manual modifications, however): https://github.com/minetest-tools/update_translations

To start a new translation, copy &lt;code&gt;template.txt&lt;/code&gt; to create &lt;code&gt;__builtin.&lt;LANGUAGE_CODE&gt;.tr&lt;/code&gt;.

== Untranslatable texts ==
Please note: A couple of things in Minetest can '''not''' be translated yet:

* Setting help texts for settings of games and mods (&lt;code&gt;settingtypes.txt&lt;/code&gt;)  ([https://github.com/minetest/minetest/issues/9070 #9070])
* Description of mods, modpacks, games and texture packs ([https://github.com/minetest/minetest/issues/9071 #9071])

[[Category:Core Engine]]</text>
      <sha1>79m1hnfy1728pn7nw9atw33bjw96jw2</sha1>
    </revision>
  </page>
  <page>
    <title>VoxelManip</title>
    <ns>0</ns>
    <id>1017</id>
    <revision>
      <id>6371</id>
      <parentid>6147</parentid>
      <timestamp>2023-05-01T11:16:10Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <comment>lua_api.txt -&gt; lua_api.md</comment>
      <origin>6371</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="116" sha1="2a99pgot9akp64hvncycb0o9o4ccj7f" xml:space="preserve">Please read lua_api.md or this modding book chapter: https://rubenwardy.com/minetest_modding_book/en/advmap/lvm.html</text>
      <sha1>2a99pgot9akp64hvncycb0o9o4ccj7f</sha1>
    </revision>
  </page>
  <page>
    <title>mg flags</title>
    <ns>0</ns>
    <id>410</id>
    <revision>
      <id>6227</id>
      <parentid>4459</parentid>
      <timestamp>2022-10-25T08:27:12Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <comment>remove outdated info and point to minetest.conf.example instead</comment>
      <origin>6227</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="535" sha1="mxeq4rzyovdpogp7fvb8io2rug3rquz" xml:space="preserve">{{DISPLAYTITLE:mg_flags}}
The map generator will generate a world according to the mapgen flags that are set for it.&lt;br&gt;
The general flags are shown below, and each generator may have its own special flags.

Flags that are not enabled are not modified from the default. 
Flags starting with 'no' are used to explicitly disable them.

For more information and possible values please see [https://github.com/minetest/minetest/blob/master/minetest.conf.example minetest.conf.example]
[[Category:Mapgen]]
[[Category:Settings and Commands]]</text>
      <sha1>mxeq4rzyovdpogp7fvb8io2rug3rquz</sha1>
    </revision>
  </page>
  <page>
    <title>minetest.get content id</title>
    <ns>0</ns>
    <id>514</id>
    <revision>
      <id>6243</id>
      <parentid>5796</parentid>
      <timestamp>2022-10-25T14:09:15Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6243</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="212" sha1="qnbrf2b77gw95q512io4s30r0nt08ro" xml:space="preserve">{{UnofficialLua}}
{{DISPLAYTITLE:minetest.get_content_id}}

Gets the internal content ID of a node for [https://rubenwardy.com/minetest_modding_book/en/advmap/lvm.html Voxel manipulators].

[[Category:Methods|g]]</text>
      <sha1>qnbrf2b77gw95q512io4s30r0nt08ro</sha1>
    </revision>
  </page>
  <page>
    <title>minetest.get craft result</title>
    <ns>0</ns>
    <id>360</id>
    <revision>
      <id>6241</id>
      <parentid>5798</parentid>
      <timestamp>2022-10-25T14:03:41Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6241</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="913" sha1="hvocnla2aokmc4nyvh6z05x809uflhr" xml:space="preserve">{{UnofficialLua}}
{{DISPLAYTITLE:minetest.get_craft_result}}
See [https://minetest.gitlab.io/minetest/minetest-namespace-reference/ minetest.get_craft_result] in the Lua API documentation.

== Example ==
(will only work if the mod is loaded after "default" registers crafting recipes)

&lt;source&gt;
output, decremented_input = minetest.get_craft_result({ method = "normal", width = 1, items = { ItemStack("default:coal_lump 2"), ItemStack("default:stick 2") }})
-- output.item:to_table() = {wear = 0, name = "default:torch", count = 4, metadata = ""}
-- output.time = 0
-- decremented_input.method = "normal"
-- decremented_input.width = 1
-- #decremented_input.items = 2
-- decremented_input.items[1]:to_table() = {wear = 0, name = "default:coal_lump", count = 1, metadata = ""}
-- decremented_input.items[2]:to_table() = {wear = 0, name = "default:stick", count = 1, metadata = ""}
&lt;/source&gt;

[[Category:Methods|g]]</text>
      <sha1>hvocnla2aokmc4nyvh6z05x809uflhr</sha1>
    </revision>
  </page>
  <page>
    <title>minetest.get us time</title>
    <ns>0</ns>
    <id>745</id>
    <revision>
      <id>6240</id>
      <parentid>5839</parentid>
      <timestamp>2022-10-25T14:00:25Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6240</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2702" sha1="95xt65apf3mxozhyu3e0ruw5tw191px" xml:space="preserve">{{UnofficialLua}}
{{DISPLAYTITLE:minetest.get_us_time}}

Returns system time with microsecond precision. For example, it can be useful for profiling mod performance.&lt;br/&gt;
According to the benchmark test (see below) it works about twice as fast as os.clock.

&lt;br/&gt;

== Examples ==
&lt;source&gt;
local t0_us = minetest.get_us_time();
-- ...
local t1_us = minetest.get_us_time();
local elapsed_time_in_seconds = (t1_us - t0_us)/1000000.0;
&lt;/source&gt;
&lt;br/&gt;
to get time differences, minetest.get_us_time seems to works faster than os.clock:
&lt;source&gt;[…]

local oclock = os.clock
local ustime = minetest.get_us_time

local function test_os_clock()
	local t1 = oclock()
	local delay = tonumber(oclock() - t1)
end

local function test_get_us_time()
	local t1 = ustime()
	local delay = (ustime() - t1) / 1000000
end

local function apply_timer_tests()
	local oclock_count = benchmark_function(test_os_clock)
	local ustime_count = benchmark_function(test_get_us_time)
	print("test_os_clock: " .. oclock_count .. " s⁻¹")
	print("test_get_us_time: " .. ustime_count .. " s⁻¹")
	print("minetest.get_us_time is " .. ustime_count / oclock_count .. " times as fast as os.clock")
end

apply_timer_tests()

minetest.register_node(":mo:timtest", {
	on_place = apply_timer_tests
})

--[[ results:

Using minetest.get_us_time for measuring (see the benchmark function):

executing when loading:

test_os_clock: 1019720 s⁻¹
test_get_us_time: 1843077.3333333 s⁻¹
minetest.get_us_time is 1.8074347206423 times as fast as os.clock


placing the node:

test_os_clock: 742641.66666667 s⁻¹
test_get_us_time: 1772569.6666667 s⁻¹
minetest.get_us_time is 2.3868438120673 times as fast as os.clock

test_os_clock: 824095 s⁻¹
test_get_us_time: 1790176.6666667 s⁻¹
minetest.get_us_time is 2.1722940518589 times as fast as os.clock

test_os_clock: 736386.33333333 s⁻¹
test_get_us_time: 1769226.6666667 s⁻¹
minetest.get_us_time is 2.4025794431275 times as fast as os.clock


Using os.clock for measuring:

executing when loading:

test_os_clock: 801913.66666667 s⁻¹
test_get_us_time: 1229572.3333333 s⁻¹
minetest.get_us_time is 1.5332976409347 times as fast as os.clock


placing the node:

test_os_clock: 326955 s⁻¹
test_get_us_time: 642647.66666667 s⁻¹
minetest.get_us_time is 1.9655538733669 times as fast as os.clock

test_os_clock: 475252 s⁻¹
test_get_us_time: 844550.33333333 s⁻¹
minetest.get_us_time is 1.7770579257601 times as fast as os.clock

test_os_clock: 296636 s⁻¹
test_get_us_time: 574708.33333333 s⁻¹
minetest.get_us_time is 1.9374193736881 times as fast as os.clock
]]
&lt;/source&gt;
benchmark_function from [[Lua_Optimization_Tips#Benchmarking]]

&lt;br/&gt;

[[Category:Methods|g]]</text>
      <sha1>95xt65apf3mxozhyu3e0ruw5tw191px</sha1>
    </revision>
  </page>
  <page>
    <title>minetest.place schematic on vmanip</title>
    <ns>0</ns>
    <id>875</id>
    <revision>
      <id>6291</id>
      <parentid>6287</parentid>
      <timestamp>2023-01-25T19:12:04Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6291</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2836" sha1="ashqc107syvmzzct0tkpctxh5vea2df" xml:space="preserve">{{UnofficialLua}}
{{DISPLAYTITLE:minetest.place_schematic_on_vmanip}}
== Syntax ==
&lt;source&gt;minetest.place_schematic_on_vmanip(vm, pos, schematic, rotation, replacements, force_placement)&lt;/source&gt;

== Description ==
This method works in a similar fashion to minetest.place_schematic, but can be used with a [[VoxelManip]] for better performance when manipulating large amounts of nodes.

* Uses VoxelManip object vm, which is the voxel manipulator you are using to e.g. generate terrain
* Places the schematic specified by schematic (see: Schematic specifier) at pos.
* Rotation can be "0", "90", "180", "270", or "random".
* If the rotation parameter is omitted, the schematic is not rotated.
* replacements = {["old_name"] = "convert_to", ...}
* force_placement is a boolean indicating whether nodes other than air and ignore are replaced by the schematic
&lt;br/&gt;
{{Template:Note|Schematics are volumes and the position where you place the schematic is the corner of the schematic. If for example you have a 5 by 5 by 5 schematic of a tree whose trunk is in the middle, you will need to offset the x and z position by -2. If you don't, you risk misplacing the tree causing them to float in the air or be generated inside blocks on e.g. steep slopes.}}

== Example ==
The below snippet places the acacia tree from default at some terrain position with a random rotation when the data written at the voxelmanip index is dirt with dry grass. It does not do specific or general node replacements. Note that the schematic is offset by -4 in the x and z directions because the acacia tree is 9 by 9 in x and z:
&lt;source&gt;
local data = {}
local vm, emin, emax = minetest.get_mapgen_object("voxelmanip")
local area = VoxelArea:new({MinEdge = emin, MaxEdge = emax})
for z = minp.z, maxp.z do
	for x = minp.x, maxp.x do
		for y = minp.y-1, maxp.y+1 do
-- E.g. terrain generation code here
		end
	end
end
-- Decoration
for z = minp.z, maxp.z do
	for x = minp.x, maxp.x do
		local ivm = area:index(x, minp.y-1, z)
		for y = minp.y-1, maxp.y+1 do
			if data[ivm] == minetest.get_content_id("default:dirt_with_dry_grass") and math.random(0, 500) then
				-- We place the tree if there is grass with dirt, but we could also have retrieved the y from the
				-- terrain heightmap in which case we would not necessarily have to loop from minp.y to maxp.y again 
				minetest.place_schematic_on_vmanip(vm, { x = x - 4, y = y, z = z - 4},
								   minetest.get_modpath("default").."/schematics/acacia_tree.mts",
								   "random", nil, false)
			end
		end
	end
end
&lt;/source&gt;
&lt;br/&gt;
{{Template:Note|If you place schematics while performing the vmanip of e.g. the terrain from negative y to positive y, you may need to separate your terrain generation loop from the schematic placement loop or risk the schematics to be overwritten}}

[[Category:Methods|p]]</text>
      <sha1>ashqc107syvmzzct0tkpctxh5vea2df</sha1>
    </revision>
  </page>
  <page>
    <title>minetest.raillike group</title>
    <ns>0</ns>
    <id>799</id>
    <revision>
      <id>6239</id>
      <parentid>5919</parentid>
      <timestamp>2022-10-25T13:57:50Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6239</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1199" sha1="cr9rthvpcj6kp3sg1n29orq26bthlla" xml:space="preserve">{{UnofficialLua}}
{{DISPLAYTITLE:minetest.raillike_group}}
Creates or retrieves a rating value based on a name, for use with the &lt;code&gt;connect_to_raillike&lt;/code&gt; group in minetest.register_node.

== Description ==
When defining a node, the &lt;code&gt;connect_to_raillike&lt;/code&gt; group requires a numeric rating value, so that nodes with the same rating can connect together (like rails do when placing them next to each other). This function registers (if it does not exist) or retrieves (if it already exists) a rating value based on a name, and returns it. That name can be shared by multiple mods, so that all mods that use the same name will be assigned the same rating value.

== Example ==
This code will create a node "my_mod:my_gunpowder" that will be able to connect to any nodes that used the name "gunpowder" to invoke this function, like the TNT mod in the Minetest game, but won't be able to connect to any nodes that used a different name, even if adjacent:

&lt;source&gt;
minetest.register_node("my_mod:my_gunpowder", {
    ...
    drawtype = "raillike",
    ...
    groups = { connect_to_raillike = minetest.raillike_group("gunpowder"),
               ... }
})
&lt;/source&gt;

[[Category:Methods|r]]</text>
      <sha1>cr9rthvpcj6kp3sg1n29orq26bthlla</sha1>
    </revision>
  </page>
  <page>
    <title>minetest.register authentication handler</title>
    <ns>0</ns>
    <id>79</id>
    <revision>
      <id>6238</id>
      <parentid>5876</parentid>
      <timestamp>2022-10-25T13:56:09Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6238</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4106" sha1="t59ipj7ocgl4h4eoup0ukq1eerk5f9i" xml:space="preserve">{{UnofficialLua}}
{{DISPLAYTITLE:minetest.register_authentication_handler}}

Registers a custom authentication handler. See this for an example authentication handler:

&lt;source&gt;
local function read_auth_file()
	local newtable = {}
	local file, errmsg = io.open(minetest.auth_file_path, 'rb')
	if not file then
		minetest.log("info", minetest.auth_file_path.." could not be opened for reading ("..errmsg.."); assuming new world")
		return
	end
	for line in file:lines() do
		if line ~= "" then
			local name, password, privilegestring = string.match(line, "([^:]*):([^:]*):([^:]*)")
			if not name or not password or not privilegestring then
				error("Invalid line in auth.txt: "..dump(line))
			end
			local privileges = minetest.string_to_privs(privilegestring)
			newtable[name] = {password=password, privileges=privileges}
		end
	end
	io.close(file)
	minetest.auth_table = newtable
	minetest.notify_authentication_modified()
end

local function save_auth_file()
	local newtable = {}
	-- Check table for validness before attempting to save
	for name, stuff in pairs(minetest.auth_table) do
		assert(type(name) == "string")
		assert(name ~= "")
		assert(type(stuff) == "table")
		assert(type(stuff.password) == "string")
		assert(type(stuff.privileges) == "table")
	end
	local file, errmsg = io.open(minetest.auth_file_path, 'w+b')
	if not file then
		error(minetest.auth_file_path.." could not be opened for writing: "..errmsg)
	end
	for name, stuff in pairs(minetest.auth_table) do
		local privstring = minetest.privs_to_string(stuff.privileges)
		file:write(name..":"..stuff.password..":"..privstring..'\n')
	end
	io.close(file)
end

minetest.builtin_auth_handler = {
	get_auth = function(name)
		assert(type(name) == "string")
		-- Figure out what password to use for a new player (singleplayer
		-- always has an empty password, otherwise use default, which is
		-- usually empty too)
		local new_password_hash = ""
		-- If not in authentication table, return nil
		if not minetest.auth_table[name] then
			return nil
		end
		-- Figure out what privileges the player should have.
		-- Take a copy of the privilege table
		local privileges = {}
		for priv, _ in pairs(minetest.auth_table[name].privileges) do
			privileges[priv] = true
		end
		-- If singleplayer, give all privileges except those marked as give_to_singleplayer = false
		if minetest.is_singleplayer() then
			for priv, def in pairs(minetest.registered_privileges) do
				if def.give_to_singleplayer then
					privileges[priv] = true
				end
			end
		-- For the admin, give everything
		elseif name == minetest.setting_get("name") then
			for priv, def in pairs(minetest.registered_privileges) do
				privileges[priv] = true
			end
		end
		-- All done
		return {
			password = minetest.auth_table[name].password,
			privileges = privileges,
		}
	end,
	create_auth = function(name, password)
		assert(type(name) == "string")
		assert(type(password) == "string")
		minetest.log('info', "Built-in authentication handler adding player '"..name.."'")
		minetest.auth_table[name] = {
			password = password,
			privileges = minetest.string_to_privs(minetest.setting_get("default_privs")),
		}
		save_auth_file()
	end,
	set_password = function(name, password)
		assert(type(name) == "string")
		assert(type(password) == "string")
		if not minetest.auth_table[name] then
			minetest.builtin_auth_handler.create_auth(name, password)
		else
			minetest.log('info', "Built-in authentication handler setting password of player '"..name.."'")
			minetest.auth_table[name].password = password
			save_auth_file()
		end
		return true
	end,
	set_privileges = function(name, privileges)
		assert(type(name) == "string")
		assert(type(privileges) == "table")
		if not minetest.auth_table[name] then
			minetest.builtin_auth_handler.create_auth(name, minetest.get_password_hash(name, minetest.setting_get("default_password")))
		end
		minetest.auth_table[name].privileges = privileges
		minetest.notify_authentication_modified(name)
		save_auth_file()
	end,
	reload = function()
		read_auth_file()
		return true
	end,
}
&lt;/source&gt;

[[Category:Methods|r]]</text>
      <sha1>t59ipj7ocgl4h4eoup0ukq1eerk5f9i</sha1>
    </revision>
  </page>
  <page>
    <title>minetest.register lbm</title>
    <ns>0</ns>
    <id>828</id>
    <revision>
      <id>6237</id>
      <parentid>5884</parentid>
      <timestamp>2022-10-25T13:54:32Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6237</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2122" sha1="2qxyj9onfepx61lh43h0bzhx2ep8loe" xml:space="preserve">{{UnofficialLua}}
{{DISPLAYTITLE:minetest.register_lbm}}

Registers a LBM. See [https://minetest.gitlab.io/minetest/definition-tables/#lbm-loadingblockmodifier-definition the Lua API documentation] for information about the LBM definition.

== Introducement time ==
Originally, LBMs were written for legacy replacement jobs like when a mod defines a newer node to replace an older one, or to remove nodes from a removed mod from the world. Such replacement jobs usually only need to be carried out on mapblocks that were stored before the node was removed or replaced, as the changes that remove the node usually make it impossible to place such nodes into the world.

LBMs use this property, for optimisation: The time you first load a world with a certain LBM gets stored by the engine as "introducement time" for the LBM to that world. As all mapblocks get stored with a timestamp, its easy to check whether the mapblock was stored before the introcuement time or after. In the default configuration, LBMs only get executed in mapblocks that were stored before the introducement.

This spares checking each node in the mapblock whether it matches one of the node and group names.

This behaviour was added as optimisation, and of course can be relied on as well, but note that if people first load a world with your LBM being registered, then load it without the LBM and then load it with the LBM again, it will execute the LBM twice due to the introducement time being discarded.

The "introducement time" stays the same between engine restarts and only gets removed when you load the world without the LBM being registered. 

Setting run_at_every_load to true disables both tracking of the introducement time and the according optimisation.

== Example ==
A cleanup LBM useful to execute after removal of the fire mod in order to clean up the world from the now unknown nodes:
&lt;source&gt;
minetest.register_lbm({
	name = "modname:remove_fire",
	nodenames = {"fire:basic_flame", "fire:permanent_flame"},
	action = function(pos, node)
		minetest.set_node(pos, {name = "air:air"})
	end,
})
&lt;/source&gt;

[[Category:Methods|r]]</text>
      <sha1>2qxyj9onfepx61lh43h0bzhx2ep8loe</sha1>
    </revision>
  </page>
  <page>
    <title>minetest.register on protection violation</title>
    <ns>0</ns>
    <id>480</id>
    <revision>
      <id>6236</id>
      <parentid>5903</parentid>
      <timestamp>2022-10-25T13:51:57Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6236</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="857" sha1="khzhtbyd4rgujqr5pc9807ytvzvqyw6" xml:space="preserve">{{UnofficialLua}}
{{DISPLAYTITLE:minetest.register_on_protection_violation}}

See [https://minetest.gitlab.io/minetest/minetest-namespace-reference/ minetest.register_on_protection_violation] in the Lua API documentation.

== Example ==
&lt;source&gt;
-- Show a message to protection violators
minetest.register_on_protection_violation(function(pos, name)
  if not mymod:can_interact(pos, name) then
    local pos_string = minetest.pos_to_string(pos)
    local owner_string = mymod:get_owner_string(pos)
    minetest.chat_send_player(name, pos_string.." is protected by "..owner_string)
  end
end)

-- Damage protection violators
minetest.register_on_protection_violation(function(pos, name)
  local player = minetest.get_player_by_name(name)
  if not player then return end
  player:set_hp(math.max(player:get_hp() - 1, 0))
end)
&lt;/source&gt;

[[Category:Methods|r]]</text>
      <sha1>khzhtbyd4rgujqr5pc9807ytvzvqyw6</sha1>
    </revision>
  </page>
  <page>
    <title>minetest.sound play</title>
    <ns>0</ns>
    <id>108</id>
    <revision>
      <id>6235</id>
      <parentid>5939</parentid>
      <timestamp>2022-10-25T13:50:58Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6235</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="312" sha1="kjiolcvmo7e1fbx64069pdzrlrt4hhx" xml:space="preserve">{{UnofficialLua}}
{{DISPLAYTITLE:minetest.sound_play}}
See [https://minetest.gitlab.io/minetest/minetest-namespace-reference/#sounds minetest.sound_play] in the Lua API documentation, and [https://minetest.gitlab.io/minetest/sounds/ Sounds] for general information about sound parameters.

[[Category:Methods|s]]</text>
      <sha1>kjiolcvmo7e1fbx64069pdzrlrt4hhx</sha1>
    </revision>
  </page>
  <page>
    <title>minetest.spawn tree</title>
    <ns>0</ns>
    <id>451</id>
    <revision>
      <id>6290</id>
      <parentid>5945</parentid>
      <timestamp>2023-01-25T19:11:38Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6290</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1957" sha1="ifskmng39j82x03d6grv040grn6dvn4" xml:space="preserve">{{UnofficialLua}}
{{DISPLAYTITLE:minetest.spawn_tree}}
== Syntax ==
&lt;source&gt;minetest.spawn_tree(pos, tree)&lt;/source&gt;

== Description ==
* &lt;code&gt;pos&lt;/code&gt; — position
* &lt;code&gt;tree&lt;/code&gt; — treedef

Spawns an L-system tree at position &lt;code&gt;pos&lt;/code&gt;, using the tree definition &lt;code&gt;tree&lt;/code&gt;.

See [[Introduction to L-system trees]] for a description of L-system trees.

== Example ==
This code adds the chat command "/spawn_tree" to spawn an apple tree with its origin at the current position of the player, assuming that [http://wiki.minetest.net/Subgames/Minetest%20Game Minetest Game] is used:
&lt;source&gt;
local treedef = {
	axiom="FFFFFAFFBF",
	rules_a="[&amp;&amp;&amp;FFFFF&amp;&amp;FFFF][&amp;&amp;&amp;++++FFFFF&amp;&amp;FFFF][&amp;&amp;&amp;----FFFFF&amp;&amp;FFFF]",
	rules_b="[&amp;&amp;&amp;++FFFFF&amp;&amp;FFFF][&amp;&amp;&amp;--FFFFF&amp;&amp;FFFF][&amp;&amp;&amp;------FFFFF&amp;&amp;FFFF]",
	trunk="default:tree",
	leaves="default:leaves",
	angle=30,
	iterations=2,
	random_level=0,
	trunk_type="single",
	thin_branches=true,
	fruit_chance=10,
	fruit="default:apple"
}

core.register_chatcommand("spawn_tree", {
	params = "", description = "Spawns tree at player position",
	func = function(name, param)
		local pos = minetest.get_player_by_name(name):getpos()
		minetest.chat_send_player(name, "Spawning tree at " .. minetest.pos_to_string(pos)
			.. ", please wait")
		minetest.spawn_tree(pos, treedef)
		return true, "successfully spawned"
	end,
})
&lt;/source&gt;

The resulting tree may look like this:

[[File:Apple Tree.png|420px]]

== Notes ==

* For examples, go to [[L-system tree examples]]
* VanessaE's [https://forum.minetest.net/viewtopic.php?id=3898 plants_lib] mod ([https://github.com/VanessaE/plantlife/blob/master/plants_lib/ github]) provides functions to register L-system trees to be spawned during map generation, and finds places for them to spawn based on the map seed and biome.
* [https://forum.minetest.net/viewtopic.php?f=11&amp;t=9458 L-System Tree Utility] is a mod which helps to create L-system trees in-game


[[Category:Methods|s]]</text>
      <sha1>ifskmng39j82x03d6grv040grn6dvn4</sha1>
    </revision>
  </page>
  <page>
    <title>pointed thing</title>
    <ns>0</ns>
    <id>48</id>
    <revision>
      <id>6298</id>
      <parentid>5015</parentid>
      <timestamp>2023-01-25T19:44:01Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6298</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="616" sha1="1ol5uzgi7jzzdphengoo6affpmnmyuj" xml:space="preserve">{{UnofficialLua}}
{{DISPLAYTITLE:pointed_thing}}

== Examples ==

{| class="wikitable"
!image
!Node coordinates
!pointed_thing.above
!pointed_thing.under
|-
| [[File:pointed_thing_1.png|200px]]
| &lt;code&gt;(49,6,-13)&lt;/code&gt;
| &lt;code&gt;{x = 49, y = 7, z = -13}&lt;/code&gt;
| &lt;code&gt;{x = 49, y = 6, z = -13}&lt;/code&gt;
|-
| [[File:pointed_thing_2.png|200px]]

| &lt;code&gt;(50,7,-13)&lt;/code&gt;
| &lt;code&gt;{x = 49, y = 7, z = -13}&lt;/code&gt;
| &lt;code&gt;{x = 50, y = 7, z = -13}&lt;/code&gt;
|-
| [[File:pointed_thing_3.png|200px]]

| &lt;code&gt;(49,7,-14)&lt;/code&gt;
| &lt;code&gt;{x = 49, y = 7, z = -13}&lt;/code&gt;
| &lt;code&gt;{x = 49, y = 7,  z = -14}&lt;/code&gt;
|}
[[Category:Types]]</text>
      <sha1>1ol5uzgi7jzzdphengoo6affpmnmyuj</sha1>
    </revision>
  </page>
  <page>
    <title>schematic</title>
    <ns>0</ns>
    <id>922</id>
    <revision>
      <id>6373</id>
      <parentid>6372</parentid>
      <timestamp>2023-05-01T11:17:07Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <origin>6373</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4524" sha1="kw1z6iu57x78mrdf14l2h41xhfz0tpm" xml:space="preserve">'''Schematics''' are pre-defined node patterns to be placed somewhere in the world. They allow to create some complex figures or structures and repeat them with little random alterations.

A schematic tells in an area what nodes should be created, with a given probability for each node to appear.

== Features ==
Schematics save the contents of an area of the world. It saves node names and the param2 value for each node. Node metadata is '''not''' saved.

Additional, schematics have the following features:

* Specify a probability for every node to be placed (or not be placed)
* Specify a probability for each Y layer to be placed (or be removed entirely)
* Set certain nodes to be force-placed (thus overwriting any node when the schematic is placed

== Schematic specifier ==

Functions that use schematics are passed a schematic specifier. A specifier can have 3 forms:

* A .mts file name as a string (see [[Minetest_Schematic_File_Format]])
* A raw data table
* A registered schematic identifier as a number, returned by ''minetest.register_schematic''

=== Schematic file ===
You can write mts files in-game with the [https://content.minetest.net/packages/Wuzzy/schemedit/ Schematic Editor] mod or with [https://minetest.gitlab.io/minetest/minetest-namespace-reference/#schematics ''minetest.create_schematic''].

=== Schematic table ===

The schematic table has 2 mandatories attributes and 1 optional

* ''size'': the bounding box in nodes, a 3D vector
* ''data'': the flat list of ''MapNode'' to write

[[File:leftHandedCoordinates.png|thumb|Left-Handed Coordinate System (x=red,y=green,z=blue)]]

The data list is ordered in z, y, x. Than means for a 3x3x3 box it will be a list of 27 MapNodes.

* The first 3 are positioned at the stone block, at the node between and at the blue block,
* The next 3 are just above the 3 previous,
* The next is at the green block and the 2 next going toward the blue box, on top,
* The next 9 are the same pattern one node toward the red block,
* And finally the next 9 are the same pattern starting at the red block

Each ''MapNode'' holds the node name and the probability to appear. ''See [https://github.com/minetest/minetest/blob/master/doc/lua_api.md#schematic-specifier Schematic specifier in lua_api.md]'' for more details.

A minimal table for a 3x3 bush sample:

&lt;source&gt;local my_schematic = {
	size = {x = 3, y = 3, z = 3},
	data = {
		-- The side of the bush, with the air on top
		{name = "default:bush_leaves"}, {name = "default:bush_leaves"}, {name = "default:bush_leaves"}, -- lower layer
		{name = "default:bush_leaves"}, {name = "default:bush_leaves"}, {name = "default:bush_leaves"}, -- middle layer
		{name = "air"}, {name = "air"}, {name = "air"}, -- top layer
		-- The center of the bush, with stem at the base and a pointy leave 2 nodes above
		{name = "default:bush_leaves"}, {name = "default:bush_stem"}, {name = "default:bush_leaves"}, -- lower layer
		{name = "default:bush_leaves"}, {name = "default:bush_leaves"}, {name = "default:bush_leaves"}, -- middle layer
		{name = "air"}, {name = "default:bush_leaves"}, {name = "air"}, -- top layer
		-- The other side of the bush, same as first side
		{name = "default:bush_leaves"}, {name = "default:bush_leaves"}, {name = "default:bush_leaves"}, -- lower layer
		{name = "default:bush_leaves"}, {name = "default:bush_leaves"}, {name = "default:bush_leaves"}, -- middle layer
		{name = "air"}, {name = "air"}, {name = "air"}, -- top layer
	}
}&lt;/source&gt;

You can then provide ''my_schematic'' everytime a Schematic specifier is requested, for example in ''minetest.register_decoration''.

== Placing schematics ==

Schematics are placed either with ''minetest.place_schematic'' or at world generation with ''minetest.register_decoration''.

When using ''minetest.register_decoration'', be aware that the decoration is placed inside a ground node and not on top, unlike simple decorations. You may want to add one layer for the roots of the schematic. See also in ''lua_doc.txt'' about the documentation of ''minetest.register_decoration'' for the flags to center the schematic on certain axes instead of placing it from a corner. Notice that you can only place the schematic from the center or the start of every axis and not an arbitrary offset.

When using ''minetest.place_schematic'', you can provide the offset manually by changing the reference ''pos''.

== Incomplete ==

{{Incomplete}}
Missing some explainations about yslice_prob against individual node probability


[[Category:Core Engine]]</text>
      <sha1>kw1z6iu57x78mrdf14l2h41xhfz0tpm</sha1>
    </revision>
  </page>
  <page>
    <title>settingtypes.txt</title>
    <ns>0</ns>
    <id>905</id>
    <revision>
      <id>6226</id>
      <parentid>5559</parentid>
      <timestamp>2022-10-24T20:51:58Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6226</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="466" sha1="oh7cvzy5u8c1zx6fe2dov2xjv7b92p7" xml:space="preserve">{{UnofficialLua}}
The settingtypes.txt file contains mod settings displayed in the settings menu. They are not used for the settings API in Lua or in C++; in particular, the Lua API will return '''nil''' if the setting is not defined in the configuration, regardless of the default value set in this file.

For information about the settingtypes.txt format, see [https://github.com/minetest/minetest/blob/master/builtin/settingtypes.txt#L1 builtin settingtypes.txt].</text>
      <sha1>oh7cvzy5u8c1zx6fe2dov2xjv7b92p7</sha1>
    </revision>
  </page>
  <page>
    <title>wiki/MediaWiki:Sitenotice</title>
    <ns>0</ns>
    <id>907</id>
    <revision>
      <id>4187</id>
      <timestamp>2018-03-07T02:15:51Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <comment>Created page with "Test"</comment>
      <origin>4187</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4" sha1="bop1vj5i98maix36pjrpgep1w6hnxfe" xml:space="preserve">Test</text>
      <sha1>bop1vj5i98maix36pjrpgep1w6hnxfe</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Mbox</title>
    <ns>10</ns>
    <id>962</id>
    <revision>
      <id>4857</id>
      <parentid>4856</parentid>
      <timestamp>2019-05-13T15:05:24Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <comment>change serious color</comment>
      <origin>4857</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2296" sha1="jkklklk71q13ep36qh9uusce4pxr849" xml:space="preserve">&lt;table style="margin: 0 auto 1em; text-align: justify; border-collapse: collapse; border-width: 1px; border-style: dashed; width: {{{width|100%}}}; clear: both; 
{{#switch:{{{type|}}}
| speedy
| warning = border-color:#b22222; background:#ffdbdb;
| serious = background:#FFF4E8;
| delete = border-color:#b22222;
| content
| issue = border-color:#f28500; background:#ffe; &lt;!-- warn --&gt;
| style = border-color:#f4c430; background:#ffe; &lt;!-- cleanup --&gt;
| move = border-color:#93c;
| protection = border-width:1px; &lt;!-- none--&gt;
| notice
| #default = border-color:#48d; background:#fbfcff; &lt;!-- info --&gt;
}} {{{style|}}}"&gt;
&lt;tr&gt;
{{#ifeq:{{{image|}}}|none
| &lt;!-- No image. Cell with some width or padding necessary for text cell to have 100% width. --&gt;&lt;td style="border: none; padding: 0; width: 1px;"&gt;&lt;/td&gt;
| &lt;td style="border: none; padding: 2px 0 2px 0.9em; text-align: center;"&gt;
 {{#if:{{{image|}}}
 | {{{image}}}
 | {{#switch:{{{type|}}}
 | speedy
 | warning
 | serious
 | delete = [[File:Mbox warning.png|25px|link=]]
 | content
 | issue = [[File:Mbox important.png|25px|link=]]
 | style = [[File:Mbox style.png|25px|link=]]
 | move = [[File:Mbox move.png|25px|link=]]
 | protection = [[File:Mbox protection.png|25px|link=]]
 | notice
 | #default = [[File:Mbox information.png|25px|link=]]
 }}
 }}&lt;/td&gt;
}}
&lt;td style="border: none; padding: 0.25em 0.9em; width: 100%; {{{textstyle|}}}"&gt;{{{text}}}&lt;/td&gt;
{{#if:{{{imageright|}}}
| &lt;td style="border: none; padding: 2px 0.9em 2px 0; text-align: center;"&gt;{{{imageright}}}&lt;/td&gt;
}}
&lt;/tr&gt;&lt;/table&gt;&lt;noinclude&gt;
== Usage ==
&lt;pre&gt;
{{Mbox
 |text =
 |type =
}}
&lt;/pre&gt;

== Examples ==

{{Mbox
|text=warning – for speedy deletion and other serious notices
|type=warning
}}
{{Mbox
|text=serious – for deletion notices
|type=serious
}}
{{Mbox
|text=issue – for larger issues
|type=issue
}}
{{Mbox
|text=style – for cleanup
|type=style
}}

{{Mbox
|text=protection – for protection notices
|type=protection
}}
{{Mbox
|text=move – for move requests
|type=move
}}
{{Mbox
|text=notice (default)
|type=
}}

== Disclaimer ==
Template:Mbox is based on [[commons:Template:Mbox]] and [[mw:Template:Mbox]], which are available under the [//creativecommons.org/licenses/by-sa/3.0/ Creative Commons Attribution-ShareAlike License].

[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>jkklklk71q13ep36qh9uusce4pxr849</sha1>
    </revision>
  </page>
  <page>
    <title>Template:LangSwitch</title>
    <ns>10</ns>
    <id>813</id>
    <revision>
      <id>3371</id>
      <timestamp>2015-11-03T16:06:11Z</timestamp>
      <contributor>
        <username>Celeron55</username>
        <id>8</id>
      </contributor>
      <comment>Created page with "{{{    {{#switch: {{{ {{Uselang|lang={{{lang|}}}}} |}}}    | ~ = empty   |   = {{#switch: {{{ {{GetFallback| {{Uselang|lang={{{lang|}}}}} |default=default}} |}}}     | ~ = emp..."</comment>
      <origin>3371</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="631" sha1="bi28hlblruszfgtas4hawtpzka8wemp" xml:space="preserve">{{{ 
  {{#switch: {{{ {{Uselang|lang={{{lang|}}}}} |}}} 
  | ~ = empty
  |   = {{#switch: {{{ {{GetFallback| {{Uselang|lang={{{lang|}}}}} |default=default}} |}}}
    | ~ = empty
    |   = {{#switch: {{{ {{GetFallback2| {{Uselang|lang={{{lang|}}}}} |default=default}} |}}}
      | ~        = empty
      |          = {{#if: {{{default|}}} | default | en }}
      | #default = {{GetFallback2| {{Uselang|lang={{{lang|}}}}} |default=default}}
      }}
    | #default = {{GetFallback| {{Uselang|lang={{{lang|}}}}} |default=default}}
    }}
  | #default = {{Uselang|lang={{{lang|}}}}}
  }} 
|}}}&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>bi28hlblruszfgtas4hawtpzka8wemp</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Languages</title>
    <ns>10</ns>
    <id>808</id>
    <revision>
      <id>6210</id>
      <parentid>6209</parentid>
      <timestamp>2022-10-19T15:56:57Z</timestamp>
      <contributor>
        <username>Olive</username>
        <id>214</id>
      </contributor>
      <comment>Undo. The two wikis use a different translation system (or this one lacks the cogs). Great. Why.</comment>
      <origin>6210</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2873" sha1="7jj1njcsa7xn02g91mg3plcxljgo95a" xml:space="preserve">{{nmbox
 | header = '''{{Languages/Title | {{SUBPAGENAME}}}}'''
 | text = 
'''[[{{{1|:{{NAMESPACE}}:{{BASEPAGENAME}}}}}|English]]''' {{Languages/Lang|af|{{{1|}}}|
}}{{Languages/Lang|ar|{{{1|}}}|
}}{{Languages/Lang|ast|{{{1|}}}|
}}{{Languages/Lang|az|{{{1|}}}|
}}{{Languages/Lang|bcc|{{{1|}}}|
}}{{Languages/Lang|bg|{{{1|}}}|
}}{{Languages/Lang|br|{{{1|}}}|
}}{{Languages/Lang|bn|{{{1|}}}|
}}{{Languages/Lang|bs|{{{1|}}}|
}}{{Languages/Lang|ca|{{{1|}}}|
}}{{Languages/Lang|cs|{{{1|}}}|
}}{{Languages/Lang|da|{{{1|}}}|
}}{{Languages/Lang|de|{{{1|}}}|
}}{{Languages/Lang|diq|{{{1|}}}|
}}{{Languages/Lang|el|{{{1|}}}|
}}{{Languages/Lang|eo|{{{1|}}}|
}}{{Languages/Lang|es|{{{1|}}}|
}}{{Languages/Lang|fa|{{{1|}}}|
}}{{Languages/Lang|fi|{{{1|}}}|
}}{{Languages/Lang|fr|{{{1|}}}|
}}{{Languages/Lang|gl|{{{1|}}}|
}}{{Languages/Lang|gu|{{{1|}}}|
}}{{Languages/Lang|he|{{{1|}}}|
}}{{Languages/Lang|hi|{{{1|}}}|
}}{{Languages/Lang|hu|{{{1|}}}|
}}{{Languages/Lang|hy|{{{1|}}}|
}}{{Languages/Lang|id|{{{1|}}}|
}}{{Languages/Lang|io|{{{1|}}}|
}}{{Languages/Lang|it|{{{1|}}}|
}}{{Languages/Lang|ja|{{{1|}}}|
}}{{Languages/Lang|ka|{{{1|}}}|
}}{{Languages/Lang|kk|{{{1|}}}|
}}&lt;span class="autonym"&gt;{{Languages/Lang|km|{{{1|}}}|
}}&lt;/span&gt;{{Languages/Lang|ko|{{{1|}}}|
}}{{Languages/Lang|ksh|{{{1|}}}|
}}{{Languages/Lang|kw|{{{1|}}}|
}}{{Languages/Lang|la|{{{1|}}}|
}}{{Languages/Lang|min|{{{1|}}}|
}}{{Languages/Lang|mk|{{{1|}}}|
}}{{Languages/Lang|ml|{{{1|}}}|
}}&lt;span class="autonym"&gt;{{Languages/Lang|mr|{{{1|}}}|
}}&lt;/span&gt;{{Languages/Lang|ms|{{{1|}}}|
}}{{Languages/Lang|nl|{{{1|}}}|
}}{{Languages/Lang|no|{{{1|}}}|
}}{{Languages/Lang|oc|{{{1|}}}|
}}{{Languages/Lang|or|{{{1|}}}|
}}{{Languages/Lang|pl|{{{1|}}}|
}}{{Languages/Lang|pt|{{{1|}}}|
}}{{Languages/Lang|pt-br|{{{1|}}}|
}}{{Languages/Lang|ro|{{{1|}}}|
}}{{Languages/Lang|ru|{{{1|}}}|
}}{{Languages/Lang|si|{{{1|}}}|
}}{{Languages/Lang|sk|{{{1|}}}|
}}{{Languages/Lang|sl|{{{1|}}}|
}}{{Languages/Lang|so|{{{1|}}}|
}}{{Languages/Lang|sq|{{{1|}}}|
}}{{Languages/Lang|sr|{{{1|}}}|
}}{{Languages/Lang|sv|{{{1|}}}|
}}{{Languages/Lang|ta|{{{1|}}}|
}}{{Languages/Lang|th|{{{1|}}}|
}}{{Languages/Lang|tr|{{{1|}}}|
}}{{Languages/Lang|uk|{{{1|}}}|
}}{{Languages/Lang|vi|{{{1|}}}|
}}{{Languages/Lang|yi|{{{1|}}}|
}}{{Languages/Lang|yue|{{{1|}}}|
}}{{Languages/Lang|zh|{{{1|}}}|
}}{{Languages/Lang|zh-hans|{{{1|}}}|
}}{{Languages/Lang|zh-hant|{{{1|}}}|
}}{{Languages/Lang|zh-tw|{{{1|}}}}}|
}}&lt;includeonly&gt;{{#if:{{Languages/Lang|af|{{{1|}}}|
}}{{Languages/Lang|de|{{{1|}}}|
}}{{Languages/Lang|es|{{{1|}}}|
}}{{Languages/Lang|fr|{{{1|}}}|
}}{{Languages/Lang|id|{{{1|}}}|
}}{{Languages/Lang|ja|{{{1|}}}}}
||[[Category:Languages pages without translations]]}}[[Category:Languages pages]]{{#ifeq:{{translation}}|/ja|[[Category:Languages pages{{translation}}]]}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
[[Category:Exclude in print]]
&lt;/noinclude&gt;</text>
      <sha1>7jj1njcsa7xn02g91mg3plcxljgo95a</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Languages/Lang</title>
    <ns>10</ns>
    <id>810</id>
    <revision>
      <id>3367</id>
      <timestamp>2015-11-03T16:01:52Z</timestamp>
      <contributor>
        <username>Celeron55</username>
        <id>8</id>
      </contributor>
      <comment>Created page with "{{#ifexist: {{#if:{{{2|}}}|{{{2}}}|{{NAMESPACE}}:{{BASEPAGENAME}}}}/{{{1|}}} |&amp;nbsp;• &lt;bdi lang="{{{1|}}}"&gt;{{#if:{{{2|}}}   |[[:{{{2|}}}/{{{1|}}}|{{#language:{{{1|}}}}}]]   ..."</comment>
      <origin>3367</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="299" sha1="mobu7t8forziajg9gsguy7c5pvlzu2c" xml:space="preserve">{{#ifexist: {{#if:{{{2|}}}|{{{2}}}|{{NAMESPACE}}:{{BASEPAGENAME}}}}/{{{1|}}}
|&amp;nbsp;• &lt;bdi lang="{{{1|}}}"&gt;{{#if:{{{2|}}}
  |[[:{{{2|}}}/{{{1|}}}|{{#language:{{{1|}}}}}]]
  |[[:{{NAMESPACE}}:{{BASEPAGENAME}}/{{{1|}}}|{{#language:{{{1|}}}}}]]
  }}&lt;/bdi&gt;
}}&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>mobu7t8forziajg9gsguy7c5pvlzu2c</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Languages/Title</title>
    <ns>10</ns>
    <id>812</id>
    <revision>
      <id>3370</id>
      <timestamp>2015-11-03T16:05:38Z</timestamp>
      <contributor>
        <username>Celeron55</username>
        <id>8</id>
      </contributor>
      <comment>Created page with "{{LangSwitch|lang={{{1|}}} |default=Language: |Languages=Languages: |MediaWiki=Languages: |af=Taal: |aln=Gjuha: |am=ቋምቋ፦ |an=Idioma: |ang=Sprǣc: |ar=:اللغة |arc=..."</comment>
      <origin>3370</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3082" sha1="9eghaiyhwacjvow0hd3a8egral34x1w" xml:space="preserve">{{LangSwitch|lang={{{1|}}}
|default=Language:
|Languages=Languages:
|MediaWiki=Languages:
|af=Taal:
|aln=Gjuha:
|am=ቋምቋ፦
|an=Idioma:
|ang=Sprǣc:
|ar=:اللغة
|arc=ܠܫܢܐ:
|arn=Dungun:
|arz=:اللغة
|as=ভাষা:
|ast=Llingua:
|avk=Ava:
|ay=Aru:
|az=Dil:
|bat-smg=Kalba:
|bcc=زبان:
|bcl=Tataramon:
|be=Мова:
|be-tarask=Мова:
|bg=Език:
|bn=ভাষা:
|br=Yezh :
|bs=Jezik:
|ca=Llengua :
|cdo=Ngṳ̄-ngiòng:
|ce=Мотт:
|ceb=Pinulongan:
|ch=Lengguahe:
|ckb-arab=زمان:
|co=Lingua :
|crh-cyrl=Тиль:
|crh-latn=Til:
|cs=Jazyk:
|cu=ѩꙁꙑ́къ :
|cv=Чĕлхе:
|cy=Iaith:
|da=Sprog:
|de=Sprache:
|diq=Zıwan:
|dsb=Rěc:
|ee=Gbe:
|el=Γλώσσα:
|en=Language:
|eo=Lingvo:
|es=Idioma:
|et=Keel:
|eu=Hizkuntza:
|ext=Palra:
|fa=زبان:
|fi=Kieli:
|fo=Mál:
|fr=Langue :
|frc=Langue :
|frp=Lengoua :
|fur=Lenghe :
|fy=Taal:
|ga=Teanga:
|gag=Dil:
|gan-hans=语言:
|gan-hant=語言:
|gl=Lingua:
|gn=Ñe'ẽ:
|got=Razda:
|grc=Γλῶσσα:
|gsw=Sproch:
|gu=ભાષા:
|gv=Çhengey:
|hak=Ngî-ngièn:
|haw=Kou 'ōlelo:
|he=שפה:
|hi=भाषा:
|hif-latn=Bhasa:
|hr=Jezik:
|hsb=Rěč:
|ht=Lang:
|hu=Nyelv:
|hy=Լեզու.
|ia=Lingua:
|id=Bahasa:
|ie=Lingue:
|ilo=Lengguahe:
|io=Linguo:
|is=Tungumál:
|it=Lingua:
|ja=言語:
|jv=Basa:
|ka=ენა:
|kaa=Til:
|kab=Tutlayt:
|kg=Ndinga:
|kiu=Zon:
|kk-arab=:ٴتىل
|kk-cyrl=Тіл:
|kk-latn=Til:
|km=ភាសា៖
|kn=ಭಾಷೆ:
|ko=언어:
|ksh=Sproch:
|ku-latn=Ziman:
|kv=Кыв:
|kw=Yeth:
|ky=Тил:
|la=Lingua:
|lb=Sprooch:
|lfn=Lingua:
|li=Taol:
|lij=Lengoa:
|loz=Zwa Siselect:
|lt=Kalba:
|lv=Valoda:
|lzh=語：
|mdf=Кяль:
|mg=fiteny:
|mhr=Йылме:
|min=Bahaso:
|mk=Јазик:
|ml=ഭാഷ:
|mn=Хэл:
|mr=भाषा:
|ms=Bahasa:
|mt=Lingwa:
|mwl=Lhéngua:
|my=ဘာသာ:
|myv=Кель:
|nah=Tlahtōlli:
|nap=Lengua:
|nds=Spraak:
|nds-nl=Taal:
|ne=भाषा:
|new=भाषा:
|nl=Taal:
|nn=Språk:
|no=Språk:
|nso=Polelo:
|oc=Lenga :
|os=Æвзаг:
|pa=ਭਾਸ਼ਾ:
|pam=Amanu:
|pdc=Schprooch:
|pdt=Sproak:
|pl=Język:
|pms=Lenga:
|pnb=بولی:
|pnt=Γλώσσαν:
|prg=Bilā:
|ps=ژبه:
|pt|pt-br=Língua:
|qu=Rimay:
|rm=Lingua:
|ro=Limba:
|roa-tara=Lénga:
|ru=Язык:
|sa=भाषा:
|sah=Омугун тыла:
|sc=Limba:
|scn=Lingua:
|sco=Leid:
|sdc=Linga:
|se=Giella:
|sei=Itom:
|sh=Jezik:
|shi=tutlayt:
|si=භාෂාව:
|sk=Jazyk:
|sl=Jezik:
|sli=Sproache:
|so=Luqada:
|sq=Gjuha:
|sr-ec=Језик:
|sr-el=Jezik:
|srn=Tongo:
|ss=Lúlwîmi:
|stq=Sproake:
|su=Basa:
|sv=Språk:
|sw=Lugha:
|szl=Godka:
|ta=மொழி:
|te=భాష:
|tet=Lian:
|tg-cyrl=Забон:
|th=ภาษา:
|ti=ቋንቋ:
|tk=Dil:
|tl=Wika:
|to=Lea:
|tr=Dil:
|tt-cyrl=Тел:
|tyv=Дыл:
|ug-arab=:تىل
|ug-latn=Til:
|uk=Мова:
|vec=Lengua:
|vep=Kel’:
|vi=Ngôn ngữ:
|vo=Pük:
|vro=Kiil:
|wa=Lingaedje:
|war=Yinaknan:
|wo=Làkk:
|wuu=语言:
|xal=Келн:
|xh=Ulwimi:
|xmf=ნინა:
|yi=שפראך:
|yo=Èdè:
|yue=語言:
|zea=Taele:
|zh=語言:
|zh-hans=语言:
|zh-hant=語言:
|zu=Ulimi:
}}&lt;noinclude&gt;{{Documentation}}&lt;/noinclude&gt;</text>
      <sha1>9eghaiyhwacjvow0hd3a8egral34x1w</sha1>
    </revision>
  </page>
  <page>
    <title>Template:nmbox</title>
    <ns>10</ns>
    <id>809</id>
    <revision>
      <id>3366</id>
      <timestamp>2015-11-03T15:59:52Z</timestamp>
      <contributor>
        <username>Celeron55</username>
        <id>8</id>
      </contributor>
      <comment>Created page with "&lt;table class="nmbox" style="border:1px solid #AAAAAA; border-collapse:collapse; clear:both; font-size:100%; margin: 0.5em 0;"&gt; &lt;tr style="background: #EEF3E2"&gt; {{#if:{{{image|..."</comment>
      <origin>3366</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="588" sha1="jdelkrzdw6sb5yu7xdg9h35qf0i2dlu" xml:space="preserve">&lt;table class="nmbox" style="border:1px solid #AAAAAA; border-collapse:collapse; clear:both; font-size:100%; margin: 0.5em 0;"&gt;
&lt;tr style="background: #EEF3E2"&gt;
{{#if:{{{image|}}}{{{header|}}}
| &lt;th class="mbox-image" style="white-space: nowrap; padding: 4px 1em; border-right: 1px solid #aaaaaa;"&gt;{{{image|}}} {{{header|}}}&lt;/th&gt;
| &lt;td class="mbox-empty-cell"&gt;&lt;/td&gt;   &lt;!-- No image. Cell with some width or padding necessary for text cell to have 100% width. --&gt;
}}
&lt;td class="mbox-text" style="background: #F6F9ED;"&gt;{{{text|}}}&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>jdelkrzdw6sb5yu7xdg9h35qf0i2dlu</sha1>
    </revision>
  </page>
  <page>
    <title>Template:UnofficialLua</title>
    <ns>10</ns>
    <id>969</id>
    <revision>
      <id>6025</id>
      <parentid>6018</parentid>
      <timestamp>2022-05-24T11:23:39Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <comment>Add link to [[Lua API Documentation]]</comment>
      <origin>6025</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1060" sha1="erk94gt2miu0abiu3z7kdaz9gl56gij" xml:space="preserve">&lt;includeonly&gt;{{Mbox|type=warning|text='''This page contains ''unofficial, low-quality'' [[Modding Intro|Lua API]] documentation and is likely to be outdated or wrong. Do not rely on it!'''&lt;br/&gt;For the official and up-to-date documentation, see [[Lua API Documentation]].}}
{{delete|Contains unofficial and potentially outdated, redundant and inconsistent Lua API information}}
[[Category:UnofficialLua]]&lt;/includeonly&gt;&lt;noinclude&gt;== Preview ==
{{UnofficialLua}}
== Description ==
This template is meant to be added to all pages that were just ripped off lua_api.txt poorly, creating pointless redundancy (and eventually inconsistency). So the reader is warned with a prominent warning.

Currently, it will automatically add the "delete" template as well, which automatically proposes the page for deletion as well, because we don't want to replicate lua_api.txt. See also: [[MinetestWiki:Lua API Wiki Documentation Cleanup]]. NOTE: This template itself is NOT proposed for deletion.

== Usage ==
&lt;pre&gt;
{{UnofficialLua}}
&lt;/pre&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>erk94gt2miu0abiu3z7kdaz9gl56gij</sha1>
    </revision>
  </page>
  <page>
    <title>Template:delete</title>
    <ns>10</ns>
    <id>920</id>
    <revision>
      <id>4848</id>
      <parentid>4324</parentid>
      <timestamp>2019-05-13T14:51:37Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <origin>4848</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="335" sha1="asunhw4b3y5ivxvavqqd8g32zftzcg0" xml:space="preserve">{{Mbox|type=warning|text=
'''This page has been proposed for deletion for the following reason: ''"{{{reason|{{{1}}}}}}"'''''&lt;br/&gt;
''If you don't think that this page should be deleted, please explain why on the talk page.''
}}&lt;includeonly&gt;[[Category:Proposed for deletion]]&lt;/includeonly&gt;&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>asunhw4b3y5ivxvavqqd8g32zftzcg0</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Note</title>
    <ns>10</ns>
    <id>564</id>
    <revision>
      <id>3158</id>
      <parentid>2041</parentid>
      <timestamp>2015-07-02T14:48:47Z</timestamp>
      <contributor>
        <username>Twoelk</username>
        <id>143</id>
      </contributor>
      <minor/>
      <comment>cat</comment>
      <origin>3158</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="379" sha1="2q2avwvwala8nuqnw18ntlfbt2hqyai" xml:space="preserve">&lt;div style="display: inline-block; border:1px solid #eaeaea;background-color:#fcfcfc;padding:5px;font-size:13px;vertical-align: middle;"&gt;&lt;div style="display: inline-block;padding-bottom:3px;padding-right: 4px;"&gt;[[File:note.png|16px]]&lt;/div&gt;&lt;div style="display: inline-block;vertical-align: middle;"&gt;'''Note''': {{{1}}}&lt;/div&gt;
&lt;/div&gt;

&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>2q2avwvwala8nuqnw18ntlfbt2hqyai</sha1>
    </revision>
  </page>
  <page>
    <title>Template:LuaTips</title>
    <ns>10</ns>
    <id>970</id>
    <revision>
      <id>4876</id>
      <parentid>4865</parentid>
      <timestamp>2019-05-13T15:32:00Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <minor/>
      <comment>about the community</comment>
      <origin>4876</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="315" sha1="ahqywq65e3vtuv2tyrescktozv1d3kk" xml:space="preserve">&lt;includeonly&gt;{{Mbox|type=notice|text=This page contains community-written advice, tips, tricks or recommendations about [[Modding Intro|modding]]. Your mileage may vary.}}
[[Category:LuaTips]]&lt;/includeonly&gt;&lt;noinclude&gt;== Preview ==
{{LuaTips}}
== Usage ==
&lt;pre&gt;
{{LuaTips}}
&lt;/pre&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>ahqywq65e3vtuv2tyrescktozv1d3kk</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Stub</title>
    <ns>10</ns>
    <id>68</id>
    <revision>
      <id>4829</id>
      <parentid>4821</parentid>
      <timestamp>2019-05-13T14:28:16Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <comment>use nice formatting</comment>
      <origin>4829</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="197" sha1="agpozrqz6i4u5g1q6h4e78uloy30vyq" xml:space="preserve">&lt;includeonly&gt;{{Mbox|type=notice|text=This article is a stub.}}
[[Category:Stub]]&lt;/includeonly&gt;&lt;noinclude&gt;== Preview ==
{{Stub}}
== Usage ==
&lt;pre&gt;
{{Stub}}
&lt;/pre&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>agpozrqz6i4u5g1q6h4e78uloy30vyq</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Contributor Call to Action</title>
    <ns>10</ns>
    <id>329</id>
    <revision>
      <id>5341</id>
      <parentid>3146</parentid>
      <timestamp>2020-06-26T19:03:41Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <comment>change caption</comment>
      <origin>5341</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="389" sha1="ieu2xkr01ljgt8vxq9xna436yzbb30b" xml:space="preserve">== Contribute to Minetest! ==

{|class="wikitable" style="width: 100%;"
|-
|valign="top"|{{Contributor Call to Action/Core development}}
|valign="top"|{{Contributor Call to Action/Mod development}}
|valign="top"|{{Contributor Call to Action/Documentation, translation, and artwork}}
|valign="top"|{{Contributor Call to Action/Community}}
|}

&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>ieu2xkr01ljgt8vxq9xna436yzbb30b</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Contributor Call to Action/Community</title>
    <ns>10</ns>
    <id>335</id>
    <revision>
      <id>6170</id>
      <parentid>6131</parentid>
      <timestamp>2022-08-21T16:47:07Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <origin>6170</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="171" sha1="qnidx4bnxt4nrdx6fjl6cib3n89pjdk" xml:space="preserve">'''Be an excellent community member'''

* Find out [[How to start contributing|how you can start contributing like a pro]]

&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>qnidx4bnxt4nrdx6fjl6cib3n89pjdk</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Contributor Call to Action/Core development</title>
    <ns>10</ns>
    <id>330</id>
    <revision>
      <id>6136</id>
      <parentid>5295</parentid>
      <timestamp>2022-08-15T21:11:15Z</timestamp>
      <contributor>
        <username>Zughy</username>
        <id>202</id>
      </contributor>
      <origin>6136</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="217" sha1="77uzkdl9embdgty66adgou5le0v6exu" xml:space="preserve">'''Develop the core engine'''

* Browse the [https://github.com/minetest/minetest source code]
* [[Engine|Engine overview]]
* Help [[Releasing Minetest|make a release]]

&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>77uzkdl9embdgty66adgou5le0v6exu</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Contributor Call to Action/Documentation, translation, and artwork</title>
    <ns>10</ns>
    <id>332</id>
    <revision>
      <id>5296</id>
      <parentid>3149</parentid>
      <timestamp>2020-06-18T21:59:50Z</timestamp>
      <contributor>
        <username>Rubenwardy</username>
        <id>6</id>
      </contributor>
      <origin>5296</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="299" sha1="sbqegdry0o649t59f3j7bssl1nsa332" xml:space="preserve">'''Document, translate, and create'''

* Help with the [[Engine documentation|engine documentation]]
* Help complete this wiki by checking out the [[Project:Contribute|contributors]] page
* Help [[Translation|translate Minetest]] into other languages

&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>sbqegdry0o649t59f3j7bssl1nsa332</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Contributor Call to Action/Mod development</title>
    <ns>10</ns>
    <id>331</id>
    <revision>
      <id>5423</id>
      <parentid>5350</parentid>
      <timestamp>2020-07-04T23:30:52Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <comment>Change order</comment>
      <origin>5423</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="153" sha1="ez0e0022gxxls76fsvjiqebwpphwp5n" xml:space="preserve">'''Develop a mod'''

* Get [[Intro|introduced to the mod API]]
* Check out the [[Lua API Documentation]]

&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>ez0e0022gxxls76fsvjiqebwpphwp5n</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Main Content Links</title>
    <ns>10</ns>
    <id>338</id>
    <revision>
      <id>6232</id>
      <parentid>6158</parentid>
      <timestamp>2022-10-25T13:44:34Z</timestamp>
      <contributor>
        <username>ROllerozxa</username>
        <id>215</id>
      </contributor>
      <origin>6232</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1240" sha1="4ipvh43uaz5bpin9y6pmzhtnzek8ypw" xml:space="preserve">== Content Index ==
Before you start, you should look at the [https://wiki.minetest.net/Terminology terminology].

{|class="wikitable" style="width: 100%;"
|valign="top"|
'''Modding API'''
&lt;hr&gt;
* [[Modding Intro|Intro]]
* [[Lua API Documentation]]

Tips and tricks:
* [[Modding Tips]]
* [[Lua Optimization Tips]]
* [[Mapgen memory optimisations]]
&lt;hr&gt;
[[:Category:Misc|''Misc articles…'']]
|valign="top"|
'''Core'''
&lt;hr&gt;
&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;
* [[:Category:Core|Index]]
&lt;hr&gt;
* [[Basic data structures]]
* [[Core Architecture]]
* [[Engine structure|Classes/functions]]
* [[Network Protocol]]
'''Instructions'''
&lt;hr&gt;
* [[Code style guidelines]]
* [[Compiling Minetest]]
* [[Development troubleshooting]]
|valign="top"|
'''Development'''
&lt;hr&gt;
* [[All rules regarding to development]]
* [[Git Guidelines]]
* [[Meetings]]
* [[Organisation]]
* [[List of hardcoded features]]
* [[Minetest Game development]]
'''Design and planning'''
&lt;hr&gt;
* [[TODO]]
'''For users'''
&lt;hr&gt;
* [[Changelog|Public Changelog]]
|valign="top"|
'''Contribute to this wiki'''
&lt;hr&gt;
* [[MinetestWiki:Style_Guide|Style guide]]
* [[MinetestWiki:TODO|TODO]]
* [[:Category:Incomplete|Incomplete articles]]
* [[:Category:Stub|Articles to be written]]
|}</text>
      <sha1>4ipvh43uaz5bpin9y6pmzhtnzek8ypw</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Contributor Call to Action/Community/de</title>
    <ns>10</ns>
    <id>934</id>
    <revision>
      <id>4476</id>
      <timestamp>2019-02-21T18:02:42Z</timestamp>
      <contributor>
        <username>Niwla</username>
        <id>191</id>
      </contributor>
      <comment>Created page with "'''Sei ein exzellentes Community-Mitglied'''  * Lerne wie wir kommunizieren [[How to communicate|how we communicate]] * Guck dir an, wie wir Github nutzen [[GitHub]] * Finde h..."</comment>
      <origin>4476</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="323" sha1="6g4jeedvnkj40d1v0hpfrlayyziqy3p" xml:space="preserve">'''Sei ein exzellentes Community-Mitglied'''

* Lerne wie wir kommunizieren [[How to communicate|how we communicate]]
* Guck dir an, wie wir Github nutzen [[GitHub]]
* Finde heraus wo du anfangen kannst [[How to start contributing|how you can start contributing like a pro]]

&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>6g4jeedvnkj40d1v0hpfrlayyziqy3p</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Contributor Call to Action/Core development/de</title>
    <ns>10</ns>
    <id>930</id>
    <revision>
      <id>4512</id>
      <parentid>4511</parentid>
      <timestamp>2019-02-22T14:53:30Z</timestamp>
      <contributor>
        <username>Niwla</username>
        <id>191</id>
      </contributor>
      <origin>4512</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="384" sha1="1qxci3i5chfa7szwad3gt45564uwetu" xml:space="preserve">'''Entwickle an der Engine'''

* Schau in den [https://github.com/minetest/minetest source code]
* Lerne über [[Engine structure|ihre Strukturen]]
* Lese [[Core Architecture|ein Überblick über die Architektur]]
* Lerne über die [[Basic data structures|einfachen Datenstrukturen]]
* Helfe [[Releasing Minetest|erstelle ein release]]

&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>1qxci3i5chfa7szwad3gt45564uwetu</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Contributor Call to Action/Documentation, translation, and artwork/de</title>
    <ns>10</ns>
    <id>933</id>
    <revision>
      <id>4978</id>
      <parentid>4475</parentid>
      <timestamp>2019-08-01T21:29:39Z</timestamp>
      <contributor>
        <username>DS-minetest</username>
        <id>195</id>
      </contributor>
      <minor/>
      <comment>Ü→ü</comment>
      <origin>4978</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="475" sha1="0d57bzg1kk4yn1hgwoui8f3sbn4im5e" xml:space="preserve">'''Dokumentiere, übersetze, und erstelle'''

* Hilf mit der Engine Dokumentation [[Engine documentation|engine documentation]]
* Hilf dieses Wiki fertigzustellen [[Project:Contribute|contributors]] Seite
* Hilf dieses Wiki in andere Sprachen zu übersetzen [[Translation|translate Minetest]]
* Du bist künstlerisch begabt? Erstelle Medien für Minetest, lies dir dazu das hier durch: [[Visual style guidelines|visual style]]

&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>0d57bzg1kk4yn1hgwoui8f3sbn4im5e</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Contributor Call to Action/Mod development/de</title>
    <ns>10</ns>
    <id>931</id>
    <revision>
      <id>4473</id>
      <parentid>4472</parentid>
      <timestamp>2019-02-21T17:37:48Z</timestamp>
      <contributor>
        <username>Niwla</username>
        <id>191</id>
      </contributor>
      <origin>4473</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="541" sha1="o4zrt4z5wxmu6oto90mppa0xnspit0o" xml:space="preserve">'''Eine Mod erstellen'''

* Lies dir das durch: [https://github.com/minetest/minetest/blob/master/doc/lua_api.txt official modding API reference]
* und das [[Intro|introduced to the mod API]]
* Wie man Mods installiert: [[Installing_Mods|install mods]]
* Lerne über [[Global Minetest object|global Minetest object]] that enables most modding features
* Guck dir die Listen an: [[:Category:Methods|methods]], [[:Category:Objects|objects]], und [[:Category:Types|types]] die du benutzen kannst.
&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>o4zrt4z5wxmu6oto90mppa0xnspit0o</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Contributor Call to Action/de</title>
    <ns>10</ns>
    <id>929</id>
    <revision>
      <id>4977</id>
      <parentid>4470</parentid>
      <timestamp>2019-08-01T21:27:02Z</timestamp>
      <contributor>
        <username>DS-minetest</username>
        <id>195</id>
      </contributor>
      <minor/>
      <comment>add missing !</comment>
      <origin>4977</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="452" sha1="olqgzkmuubfe4e9gbv4duxwe40yf0i0" xml:space="preserve">&lt;div style="text-align: center; width: 100%;"&gt;'''Hilf mit bei Minetest!'''&lt;/div&gt;

{|class="wikitable" style="width: 100%;"
|-
|valign="top"|{{Contributor Call to Action/Core development/de}}
|valign="top"|{{Contributor Call to Action/Mod development/de}}
|valign="top"|{{Contributor Call to Action/Documentation, translation, and artwork/de}}
|valign="top"|{{Contributor Call to Action/Community/de}}
|}

&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>olqgzkmuubfe4e9gbv4duxwe40yf0i0</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Main Content Links/de</title>
    <ns>10</ns>
    <id>935</id>
    <revision>
      <id>4782</id>
      <parentid>4492</parentid>
      <timestamp>2019-03-11T19:03:50Z</timestamp>
      <contributor>
        <username>Niwla</username>
        <id>191</id>
      </contributor>
      <origin>4782</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1538" sha1="otkgwh6rzqi3tqek1gny1nlqfhzso13" xml:space="preserve">

&lt;div style="text-align: center; width: 100%;"&gt;'''Inhaltsverzeichnis'''&lt;/div&gt;

Dieses Wiki richtet sich hauptsächlich an Entwickler und fortgeschrittene Benutzer der Minetest Engine und der Mods. Bevor du beginnst, solltest du dir die [[terminology|Terminologie]] ansehen.
{|class="wikitable" style="width: 100%;"
|valign="top"|
'''Modding API'''
&lt;hr&gt;
* [[Intro]]
* [[:Category:Methods|Methoden]]
* [[:Category:Objects|Objekte]]
* [[:Category:Types|Typen]]
* [[formspec|Formspecs]]
* [[HUD]]
* [[Voxel_Manipulator|Voxel Manipulator]]
* [[Lua Optimization Tips]]
* [[Mod interoperability]]
* [[Modding FAQ]]
* [[:Category:Misc|''Vermischte Beiträge…'']]
|valign="top"|
'''Core'''
&lt;hr&gt;

&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;

* [[:Category:Core|Index]]
&lt;hr&gt;
* [[Basic data structures]]
* [[Core Architecture]]
* [[Engine structure|Klassen//Funktionen]]
* [[Network Protocol|Netzwerk Protokoll]]
'''Anleitungen'''
&lt;hr&gt;
* [[Code style guidelines]]
* [[Compiling Minetest]]
|valign="top"|
'''Entwicklung'''
&lt;hr&gt;
* [[All rules regarding to development|Entwickler-Regeln]]
* [[Git Guidelines]]
* [[Organisation]]
* [[Minetest Game development]]
'''Dev Docs'''
&lt;hr&gt;
* [[Proposals]]
* [[TODO]]
'''Dokumentationen für Benutzer'''
&lt;hr&gt;
* [[Community]]
* [[Changelog|öffentlicher Versionsverlauf]]
|valign="top"|
'''Arbeite am Wiki'''
&lt;hr&gt;
* [[MinetestWiki:Style_Guide|Style guide]]
* [[:Category:MissingExample|Articles without examples]]
* [[:Category:Incomplete|Incomplete articles]]
* [[:Category:Stub|Articles to be written]]
|}</text>
      <sha1>otkgwh6rzqi3tqek1gny1nlqfhzso13</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Contributor Call to Action/Community/ja</title>
    <ns>10</ns>
    <id>820</id>
    <revision>
      <id>3403</id>
      <timestamp>2015-11-23T12:08:20Z</timestamp>
      <contributor>
        <username>Rui</username>
        <id>144</id>
      </contributor>
      <comment>Created page with "'''優れたコミュニティーメンバーになるには'''  * Learn about [[How to communicate|how we communicate]] * Check out an explanation of our use of [[GitHub]] * ..."</comment>
      <origin>3403</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="304" sha1="jnxtrhqvo3uj1n5ixn39jec02wzxuf9" xml:space="preserve">'''優れたコミュニティーメンバーになるには'''

* Learn about [[How to communicate|how we communicate]]
* Check out an explanation of our use of [[GitHub]]
* Find out [[How to start contributing|how you can start contributing like a pro]]

&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>jnxtrhqvo3uj1n5ixn39jec02wzxuf9</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Contributor Call to Action/Core development/ja</title>
    <ns>10</ns>
    <id>821</id>
    <revision>
      <id>3409</id>
      <parentid>3408</parentid>
      <timestamp>2015-11-23T12:15:24Z</timestamp>
      <contributor>
        <username>Rui</username>
        <id>144</id>
      </contributor>
      <origin>3409</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="325" sha1="ddhj60cu10xku1xuotg9rpe9argd6es" xml:space="preserve">'''内部エンジンの開発'''

* [[Engine structure/ja|エンジンの構造]]を学ぶ
* [[Core Architecture|アーキテクチャの概要]]を読む
* [[Basic data structures|基本的なデータ構造]]を学ぶ
* [[Releasing Minetest|リリースの作成]]を支援

&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>ddhj60cu10xku1xuotg9rpe9argd6es</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Contributor Call to Action/Documentation, translation, and artwork/ja</title>
    <ns>10</ns>
    <id>822</id>
    <revision>
      <id>3405</id>
      <timestamp>2015-11-23T12:09:33Z</timestamp>
      <contributor>
        <username>Rui</username>
        <id>144</id>
      </contributor>
      <comment>Created page with "'''ドキュメント、翻訳、作成'''  * Help with the [[Engine documentation|engine documentation]] * Help complete this wiki by checking out the [[Project:Contribute|co..."</comment>
      <origin>3405</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="399" sha1="cglrh33xkl0ky74zmbv1n0zyo16fybf" xml:space="preserve">'''ドキュメント、翻訳、作成'''

* Help with the [[Engine documentation|engine documentation]]
* Help complete this wiki by checking out the [[Project:Contribute|contributors]] page
* Help [[Translation|translate Minetest]] into other languages
* Create artwork to help Minetest grow, following our [[Visual style guidelines|visual style]]

&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>cglrh33xkl0ky74zmbv1n0zyo16fybf</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Contributor Call to Action/Mod development/ja</title>
    <ns>10</ns>
    <id>823</id>
    <revision>
      <id>3406</id>
      <timestamp>2015-11-23T12:09:56Z</timestamp>
      <contributor>
        <username>Rui</username>
        <id>144</id>
      </contributor>
      <comment>Created page with "'''Modの開発'''  * Get [[Intro|introduced to the mod API]] * How to [[Installing_Mods|install mods]] * Learn about the [[Global Minetest object|global Minetest object]] tha..."</comment>
      <origin>3406</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="399" sha1="mavgjrwpl3xvwlf1duikolkkmiduiz7" xml:space="preserve">'''Modの開発'''

* Get [[Intro|introduced to the mod API]]
* How to [[Installing_Mods|install mods]]
* Learn about the [[Global Minetest object|global Minetest object]] that enables most modding features
* See the lists of '''[[:Category:Methods|methods]]''', [[:Category:Objects|objects]], and [[:Category:Types|types]] that are available for use

&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>mavgjrwpl3xvwlf1duikolkkmiduiz7</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Contributor Call to Action/ja</title>
    <ns>10</ns>
    <id>819</id>
    <revision>
      <id>3402</id>
      <timestamp>2015-11-23T12:06:08Z</timestamp>
      <contributor>
        <username>Rui</username>
        <id>144</id>
      </contributor>
      <comment>Created page with "&lt;div style="text-align: center; width: 100%;"&gt;'''Minetestに貢献！'''&lt;/div&gt;  {|class="wikitable" style="width: 100%;" |- |valign="top"|{{Contributor Call to Action/Core dev..."</comment>
      <origin>3402</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="450" sha1="e2hfv8b7f7ev7tficx166g6uhr7ro6z" xml:space="preserve">&lt;div style="text-align: center; width: 100%;"&gt;'''Minetestに貢献！'''&lt;/div&gt;

{|class="wikitable" style="width: 100%;"
|-
|valign="top"|{{Contributor Call to Action/Core development/ja}}
|valign="top"|{{Contributor Call to Action/Mod development/ja}}
|valign="top"|{{Contributor Call to Action/Documentation, translation, and artwork/ja}}
|valign="top"|{{Contributor Call to Action/Community/ja}}
|}

&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>e2hfv8b7f7ev7tficx166g6uhr7ro6z</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Main Content Links/ja</title>
    <ns>10</ns>
    <id>826</id>
    <revision>
      <id>3898</id>
      <parentid>3442</parentid>
      <timestamp>2017-06-19T12:04:22Z</timestamp>
      <contributor>
        <username>Red-001</username>
        <id>164</id>
      </contributor>
      <comment>remove dev-log since it was blanked</comment>
      <origin>3898</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1528" sha1="7v01tiquh42mw2axj3rrq6b4op9p3gp" xml:space="preserve">

&lt;div style="text-align: center; width: 100%;"&gt;'''コンテンツ一覧'''&lt;/div&gt;

このWikiは主にMinetest本体の開発者やModの開発者などの上級者を対象としています。まず、[[terminology|専門用語]]を見ておくべきです。

[http://old-api.minetest.ru/ ここ]から古いAPI一覧のサイトにアクセスできます。

{|class="wikitable" style="width: 100%;"
|valign="top"|
'''Mod開発API'''
&lt;hr&gt;
* [[Intro]]
* [[:Category:Methods|Methods]]
* [[:Category:Objects|Objects]]
* [[:Category:Types|Types]]
* [[:Category:Misc|Misc articles]]
* [[formspec|Formspecs]]
* [[HUD]]
* [[Voxel_Manipulator|Voxel Manipulator]]
* [[Lua Optimization Tips]]
* [[Modding FAQ]]
|valign="top"|
'''Core'''
&lt;hr&gt;

&lt;noinclude&gt;
[[Category:Templates]]
&lt;/noinclude&gt;

* [[:Category:Core|Index]]
&lt;hr&gt;
* [[Basic data structures]]
* [[Core Architecture]]
* [[Engine structure|Classes/functions]]
* [[Network Protocol]]
'''Instructions'''
&lt;hr&gt;
* [[Code style guidelines]]
* [[Compiling Minetest]]
|valign="top"|
'''Development'''
&lt;hr&gt;
* [[All rules regarding to development]]
* [[Git Guidelines]]
* [[Organisation]]
* [[minetest_game Development]]
'''Dev Docs'''
&lt;hr&gt;
* [[Proposals]]
* [[TODO]]
'''Docs for users'''
&lt;hr&gt;
* [[Community]]
* [[Changelog|Public Changelog]]
|valign="top"|
'''Contribute to this wiki'''
&lt;hr&gt;
* [[MinetestWiki:Style_Guide|Style guide]]
* [[:Category:MissingExample|Articles without examples]]
* [[:Category:Incomplete|Incomplete articles]]
* [[:Category:Stub|Articles to be written]]
|}</text>
      <sha1>7v01tiquh42mw2axj3rrq6b4op9p3gp</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Incomplete</title>
    <ns>10</ns>
    <id>67</id>
    <revision>
      <id>4832</id>
      <parentid>4830</parentid>
      <timestamp>2019-05-13T14:34:33Z</timestamp>
      <contributor>
        <username>Wuzzy</username>
        <id>104</id>
      </contributor>
      <comment>moar text</comment>
      <origin>4832</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="296" sha1="1yry7mb46791r4a95y0zno7rm0zjhe7" xml:space="preserve">&lt;includeonly&gt;{{Mbox|type=issue|text='''This article is incomplete.'''&lt;br/&gt;Please help expand this article to include more useful information.}}
[[Category:Incomplete]]&lt;/includeonly&gt;&lt;noinclude&gt;== Preview ==
{{Incomplete}}
== Usage ==
&lt;pre&gt;
{{Incomplete}}
&lt;/pre&gt;
[[Category:Templates]]
&lt;/noinclude&gt;</text>
      <sha1>1yry7mb46791r4a95y0zno7rm0zjhe7</sha1>
    </revision>
  </page>
</mediawiki>
