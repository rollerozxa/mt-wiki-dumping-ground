
<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Mods/basic robot/Turtle-Specs - Minetest Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":!1,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"e850fc217f87b8dff33572d1","wgCSPNonce":!1,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":!1,"wgNamespaceNumber":0,"wgPageName":"Mods/basic_robot/Turtle-Specs","wgTitle":"Mods/basic robot/Turtle-Specs","wgCurRevisionId":27685,"wgRevisionId":27685,"wgArticleId":3913,"wgIsArticle":!0,"wgIsRedirect":!1,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":[],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Mods/basic_robot/Turtle-Specs","wgRelevantArticleId":3913,"wgIsProbablyEditable":!1,"wgRelevantPageIsProbablyEditable":!1,"wgRestrictionEdit":[],"wgRestrictionMove":[]};RLSTATE={"site.styles":"ready"
,"noscript":"ready","user.styles":"ready","user":"ready","user.options":"loading","skins.vector.styles.legacy":"ready","mediawiki.toc.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.startup","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@1hzgi",function($,jQuery,require,module){/*@nomin*/mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});
});});</script>
<link rel="stylesheet" href="/load.php?lang=en&amp;modules=mediawiki.toc.styles%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.35.3"/>
<link rel="shortcut icon" href="/favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="Minetest Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="//wiki.minetest.net/api.php?action=rsd"/>
<link rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/"/>
<link rel="alternate" type="application/atom+xml" title="Minetest Wiki Atom feed" href="/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<!--[if lt IE 9]><script src="/resources/lib/html5shiv/html5shiv.js"></script><![endif]-->
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Mods_basic_robot_Turtle-Specs rootpage-Mods skin-vector action-view skin-vector-legacy">
<div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice" class="mw-body-content"></div>
	<div class="mw-indicators mw-body-content">
	</div>
	<h1 id="firstHeading" class="firstHeading" lang="en">Mods/basic robot/Turtle-Specs</h1>
	<div id="bodyContent" class="mw-body-content">
		<div id="siteSub" class="noprint">From Minetest Wiki</div>
		<div id="contentSub"><span class="subpages">&lt; <a href="/Mods" title="Mods">Mods</a>&lrm; | <a href="/Mods/basic_robot" title="Mods/basic robot">basic robot</a></span></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="#searchInput">Jump to search</a>
		<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="mw-parser-output"><div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Design_of_a_mini-language_.2F_minimal_instruction-set_for_a_turtlebot"><span class="tocnumber">1</span> <span class="toctext">Design of a mini-language / minimal instruction-set for a turtlebot</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Concept_of_Turtle-commands"><span class="tocnumber">1.1</span> <span class="toctext">Concept of Turtle-commands</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#Turtle-Programs"><span class="tocnumber">1.2</span> <span class="toctext">Turtle-Programs</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#Idea"><span class="tocnumber">1.3</span> <span class="toctext">Idea</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#Requirements"><span class="tocnumber">1.4</span> <span class="toctext">Requirements</span></a>
<ul>
<li class="toclevel-3 tocsection-6"><a href="#Simple_tasks"><span class="tocnumber">1.4.1</span> <span class="toctext">Simple tasks</span></a></li>
<li class="toclevel-3 tocsection-7"><a href="#More_complicated_tasks"><span class="tocnumber">1.4.2</span> <span class="toctext">More complicated tasks</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-8"><a href="#TurtleBot_using_inventory_as_code-editor"><span class="tocnumber">1.5</span> <span class="toctext">TurtleBot using inventory as code-editor</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-9"><a href="#Turtle-Commands"><span class="tocnumber">2</span> <span class="toctext">Turtle-Commands</span></a>
<ul>
<li class="toclevel-2 tocsection-10"><a href="#Instruction-set"><span class="tocnumber">2.1</span> <span class="toctext">Instruction-set</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="#Rules"><span class="tocnumber">2.2</span> <span class="toctext">Rules</span></a>
<ul>
<li class="toclevel-3 tocsection-12"><a href="#Variant1"><span class="tocnumber">2.2.1</span> <span class="toctext">Variant1</span></a>
<ul>
<li class="toclevel-4 tocsection-13"><a href="#Basics"><span class="tocnumber">2.2.1.1</span> <span class="toctext">Basics</span></a></li>
<li class="toclevel-4 tocsection-14"><a href="#Fuel"><span class="tocnumber">2.2.1.2</span> <span class="toctext">Fuel</span></a></li>
<li class="toclevel-4 tocsection-15"><a href="#Conditionals"><span class="tocnumber">2.2.1.3</span> <span class="toctext">Conditionals</span></a></li>
<li class="toclevel-4 tocsection-16"><a href="#Strings"><span class="tocnumber">2.2.1.4</span> <span class="toctext">Strings</span></a></li>
<li class="toclevel-4 tocsection-17"><a href="#Variables"><span class="tocnumber">2.2.1.5</span> <span class="toctext">Variables</span></a>
<ul>
<li class="toclevel-5 tocsection-18"><a href="#Counter"><span class="tocnumber">2.2.1.5.1</span> <span class="toctext">Counter</span></a></li>
<li class="toclevel-5 tocsection-19"><a href="#Real"><span class="tocnumber">2.2.1.5.2</span> <span class="toctext">Real</span></a></li>
</ul>
</li>
<li class="toclevel-4 tocsection-20"><a href="#Subroutines"><span class="tocnumber">2.2.1.6</span> <span class="toctext">Subroutines</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-2 tocsection-21"><a href="#Links"><span class="tocnumber">2.3</span> <span class="toctext">Links</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span id="Design_of_a_mini-language_/_minimal_instruction-set_for_a_turtlebot"></span><span class="mw-headline" id="Design_of_a_mini-language_.2F_minimal_instruction-set_for_a_turtlebot">Design of a mini-language / minimal instruction-set for a turtlebot</span></h2>
<p>based on basic_robots.
</p><p>The goal is to teach programming to children,
using turtle-like programmable robots in minetest.
</p><p><br />
We have turtleminer, with ambitious plans, but still in early development.
</p>
<dl><dd>One big item on that todo-list is a visual code-editor, like blockly or scratch.</dd></dl>
<p>We have basic-robots, that are working, really powerful, and can do almost everything.<br />
</p><p>They are programmable in lua, using an in-game texteditor.
</p><p>basic-robots should be 'more than good enough' to teach programming in general,<br />
but (for kids) the presentation may need some tweaks.
</p><p>It would be nice to have something like <a rel="nofollow" class="external text" href="https://wiki.education.minecraft.net/wiki/Programming_with_ComputerCraftEdu">ComputerCraftEdu</a> <br />
with a visual-editor like blockly or scratch for minetest, <br />
but implementing that would be a lot of work.
</p><p><br />
Maybe we can come up with smaller, simpler 'programming language'<br />
that is more easy to incorporate into the basic-robot<br />
that is still useful for an introduction to programming.
</p>
<h3><span class="mw-headline" id="Concept_of_Turtle-commands">Concept of Turtle-commands</span></h3>
<p>Turtles use commands like
move-forward, move-up, turn-right, dig-forward.<br />
</p><p>These commands can be represented in different ways, <br />
eg. as text, code, numbers, symbols, graphics/icons, etc..
</p><p>Graphic symbols look nice, but a system 
like blockly or scratch would need a lot of them
...
</p><p>For a limited number of simple actions this is easy,<br />
but gets much more complicated if you want to express variables, <br />
calculations, control-structures (if-then-else, for-loops) etc.) <br />
</p><p>There is a point where it becomes simpler to just write code, eg. for lua, in  a texteditor.
</p>
<h3><span class="mw-headline" id="Turtle-Programs">Turtle-Programs</span></h3>
<p>Some examples of existing programs that use basic_robots with turtle-commands:
</p>
<ul><li><a href="/Mods/basic_robot#Build4_-_House1" title="Mods/basic robot">Build4 - House1</a> - build a house / small hut.</li>
<li><a href="/Mods/basic_robot#Build5_-_another_housebuilder" title="Mods/basic robot">Build5 - another housebuilder</a> - builds a bigger house</li>
<li><a href="/Mods/basic_robot#Mining103_-_tunnel_2x1" title="Mods/basic robot">Mining103 - tunnel 2x1</a> - this is a small &amp; pretty basic turtle-program, that does not stop.</li>
<li><a href="/Server/TechWelt/RobotWorld#Robot_.2318_-_Demolition" title="Server/TechWelt/RobotWorld">Demolition-Turtle</a> - it clears the construction-site for robot #17, by digging away the old building.</li></ul>
<p>Note1: all of these programs have a different instruction-set,<br />
and no 'advanced features', like variables, calculation, or conditional execution.
</p><p>But I remember that rnd once made such an advanced turtle...
</p><p>Note2: all of the above example-program have the instructions of their turtle-scipt hardcoded.<br />
But it would be possible to change that script on the fly, eg. from a book, with a remote-control,<br />
by chat or via mail from another robot.
</p>
<h3><span class="mw-headline" id="Idea">Idea</span></h3>
<p>To minimize the work,
we design a mini-language, a minimal instruction-set for a turtlebot,<br />
that still introduces some basic concepts of programming.
</p><p>I want to keep the number of instructions down (say 10-20),<br />
as well as avoiding composite and variable-length instructions.
</p><p><br />
If the basics have been learned, move straight to 'real' coding,
with lua and texteditor.
</p>
<h3><span class="mw-headline" id="Requirements">Requirements</span></h3>
<ul><li>what kind of programs do we want to 'write' with that language&#160;?</li></ul>
<dl><dd>as in, what instructions, how many steps/statements in a program</dd></dl>
<ul><li>Other required features (as in variables / fuel, input/output, flowcontrol***...)&#160;?</li>
<li>(usecase-examples please: task, environment/terrain, program that solves the task)</li>
<li>When do we want/need it to be usable&#160;?</li></ul>
<p>For example, I would like to use those robots to do simple tasks such as
</p>
<h4><span class="mw-headline" id="Simple_tasks">Simple tasks</span></h4>
<ul><li>move the robot around</li></ul>
<dl><dd>need instructions: move-forward, move-up, move-down, turn-right, turn-left
<dl><dd>optional:  move-backward, move-right, move-left</dd></dl></dd></dl>
<ul><li><ul><li>press a button, activate = open/close a door</li></ul></li></ul>
<dl><dd>more instructions: activate-forward
<dl><dd>maybe other direcions too</dd></dl></dd></dl>
<ul><li>dig a straight tunnel, size 1x2  (width 1, heigth 2)</li></ul>
<dl><dd>more instructions: dig-forward</dd></dl>
<ul><li>dig bigger tunnels, eg. 1x3, 2x2, 3x3</li></ul>
<dl><dd>more instructions: dig-up, dig-down</dd></dl>
<ul><li>dig stairs up, dig stairs down</li></ul>
<dl><dd><dl><dd>nice-to-have, but optional: dig-forward-down and dig-forward-up</dd></dl></dd></dl>
<ul><li>dig a room, eg. 5x5</li></ul>
<ul><li>stop after x operations</li></ul>
<dl><dd>needs a counter (a variable), and operations for setting, counting up/down, checking</dd>
<dd>or some kind of 'fuel' that is used up by each operation
<dl><dd>that means counting, checking and stopping is done internally</dd></dl></dd></dl>
<ul><li>moving, and react to obstacles (eg. turn when hitting a wall)</li></ul>
<dl><dd>check for success, conditional execution / jump / exceptions ...</dd>
<dd>might also need block-start / block-end, or labels / markers</dd></dl>
<p>Also, it would be nice to have the instructions of several of those 'programs'
available at the same time.<br />
Eg. ability to select different starting-points within a program,<br />
or several remote-controls with different programs.
</p><p><br />
</p>
<h4><span class="mw-headline" id="More_complicated_tasks">More complicated tasks</span></h4>
<ul><li>build a wall</li></ul>
<dl><dd>needs an inventory for at least 1 type of material</dd>
<dd>needs instructions: build-forward</dd>
<dd>maybe build-backwards, or switch building on/off (for building a 'trail')
<dl><dd>like pen-up / pen-down of a logo-turtle</dd></dl></dd>
<dd>optional:  build-up, build-down</dd></dl>
<ul><li>build stairs up</li>
<li>build stairs down</li>
<li>build a bridge</li></ul>
<dl><dd>basic-robots can only move one space above ground,</dd>
<dd>so moving to the position for building a block might be a problem</dd>
<dd>maybe needs instructions:  build-forward-down, build-forward-up</dd></dl>
<ul><li>build a house</li></ul>
<dl><dd>needs bigger inventory (different materials for floor, walls etc.),</dd>
<dd>and a command to select</dd></dl>
<ul><li>look for ore</li></ul>
<dl><dd>needs an instruction for looking at nodes</dd>
<dd>and then do what&#160;?
<dl><dd>output a message ...</dd></dl></dd></dl>
<ul><li>plant &amp; harvest wheat, flowers, trees</li>
<li>goal-seeking/homing: use find_nodes() to find an item, eg. a flower</li></ul>
<dl><dd>this needs 2 real numbers (current- and old value), and a compare-instruction for them</dd></dl>
<p>These might be already too complicated for our 'simple' design.
</p><p>More ideas:
</p>
<ul><li>Subroutines</li></ul>
<h3><span class="mw-headline" id="TurtleBot_using_inventory_as_code-editor">TurtleBot using inventory as code-editor</span></h3>
<p>For example, it might be fairly easy to implement the 'turtle-instructions' 
move-Forward,Backward,Up,Down,turn-Left,turn-Right, Dig-forward, Activate-forward
(that makes a 'palette' of 8 instructions**, to fill the hotbar)
with programs of upto 30 steps, using the inventory of the robot
(That leaves 2 inventory-slots free for digging stone and ore).
</p><p>Simple, as in 1 block = 1 instruction - but it means no i/o, no flowcontrol, no vars, no extras.
</p><p>(**) The exact set of instruction can be discussed/modified somewhat:
Eg. we could do without turn-Right (just do 3* turn-Left instead),
or without move-Backward (do right-right-forward-right-right instead).
Also, we might want to add a check-instruction (eg. 'if ok then...'),
and perhaps one or more types of marker (start-, stop-marker).
The robot consuming 'fuel' would be much like having a stop-marker.
</p><p>(***) even without instructions for flowcontrol, at least we need to define the behaviour
</p>
<ul><li>when encountering an empty slot / an invalid instruction (such as dirt, stone etc.)</li>
<li>when reaching the last inventory-slot</li>
<li>when an instruction fails (eg. moving against a wall, diggging air, ...)</li></ul>
<p>Possible behaviour: 
</p>
<ul><li>indicate success/error (eg. with message, label, sound-effect...)</li>
<li>ignore / treat as success / treat as failure</li>
<li>stop program</li>
<li>continue with next instruction</li>
<li>continue with first instruction</li></ul>
<p>If we add markers to our instructionset, we get some more options, 
eg. 'continue at next start-marker'.
</p><p>For that, we 'just' need some blocks that represent those instructions/actions.
Without making nice new graphics, we could use the existing keyboard-blocks for that.
(see chars.png in the texture-directory of basic_robots)
</p><p>Give the kids a chest full of such blocks, and let them place 
these blocks into the robots inventory, as a turtle-script,
and we can think of a way to start the robot so that
it would interpret the contents of its inventory as a script.
(Eg. a special start-button, a special id, a special new command, 
look at the inventory for fuel or a start-marker...)
</p><p>Do you have some suitable graphics to use as textures for such blocks&#160;?
</p><p>As an alternative idea: using a special remotecontrol
as the visual-editor for the turtle-script (but that would need 
much more programming, formspec-design, rc-design, etc.).
</p><p>A 'turtlebot' that works pretty much like that
(but with its program represented as a text-script)
is already on TechWelt - see the <a href="/Server/TechWelt/RobotWorld#Robot_.2318_-_Demolition" title="Server/TechWelt/RobotWorld">Robot_#18</a>
</p>
<h2><span class="mw-headline" id="Turtle-Commands">Turtle-Commands</span></h2>
<h3><span class="mw-headline" id="Instruction-set">Instruction-set</span></h3>
<table class="wikitable">

<tbody><tr>
<th>Letter</th>
<th>Description</th>
<th>Code
</th></tr>
<tr>
<td>Arrow right</td>
<td>move-Forward</td>
<td>ok=move.forward()
</td></tr>
<tr>
<td>f
</td></tr>
<tr>
<td>Arrow up</td>
<td>move-Up
</td></tr>
<tr>
<td>u
</td></tr>
<tr>
<td>Arrow down</td>
<td>move-Down
</td></tr>
<tr>
<td>d
</td></tr>

<tr>
<td>l</td>
<td>move-Left  (optional)
</td></tr>
<tr>
<td>r</td>
<td>move-Right (optional)
</td></tr>

<tr>
<td>&lt;</td>
<td>turn-Left</td>
<td>turn.left()
</td></tr>
<tr>
<td>&gt;</td>
<td>turn-Right</td>
<td>turn.right()
</td></tr>

<tr>
<td>+/-</td>
<td>activate-Forward</td>
<td>ok=activate.forward(1)
</td></tr>
<tr>
<td>a
</td></tr>

<tr>
<td>-</td>
<td>dig-Forward</td>
<td>ok=dig.forward()
</td></tr>
<tr>
<td>-</td>
<td>
</td></tr>
<tr>
<td>Triangle-up</td>
<td>dig-Up
</td></tr>
<tr>
<td>~
</td></tr>
<tr>
<td>Triangle-down</td>
<td>dig-Down
</td></tr>
<tr>
<td>v
</td></tr>

<tr>
<td>1</td>
<td>select slot 1</td>
<td>mat=check_inventory.self(...,1); mat=...
</td></tr>
<tr>
<td>2</td>
<td>select slot 2
</td></tr>
<tr>
<td>3</td>
<td>select slot 3
</td></tr>
<tr>
<td>..</td>
<td></td>
<td>.. etc. ..
</td></tr>
<tr>
<td>7</td>
<td>select slot 7</td>
<td>mat="air"
</td></tr>
<tr>
<td>8</td>
<td>select slot 8</td>
<td>mat="farming:wheat_8"
</td></tr>

<tr>
<td>+</td>
<td>build-Forward</td>
<td>ok=place.forward(mat)
</td></tr>
<tr>
<td>^</td>
<td>build-Up
</td></tr>
<tr>
<td>.</td>
<td>build-Down
</td></tr>
<tr>
<td>_</td>
<td>build-Forward_Down (optional)
</td></tr>
<tr>
<td>&amp;</td>
<td>build-Backward on/off
</td></tr>

<tr>
<td>0 (Green)</td>
<td>marker-Start / marker-next
</td></tr>
<tr>
<td>0</td>
<td>
</td></tr>
<tr>
<td>9 (Red)</td>
<td>marker-Stop
</td></tr>
<tr>
<td>9</td>
<td>
</td></tr>
<tr>
<td>p (Yellow)</td>
<td>marker-Pause
</td></tr>
<tr>
<td>p</td>
<td>pause / pickup
</td></tr>
<tr>
<td>.!.</td>
<td>pause / pickup
</td></tr>

<tr>
<td>?</td>
<td>check</td>
<td>if ok then continue-with-next-marker
</td></tr>

<tr>
<td>n</td>
<td>look for node</td>
<td>s=read_node.forward()
</td></tr>
<tr>
<td>t</td>
<td>look for text</td>
<td>s=read_text.forward(); ok=...
</td></tr>
<tr>
<td>!</td>
<td>output string</td>
<td>say(s)
</td></tr>
<tr>
<td>=</td>
<td>compare string</td>
<td>if s~=mat then continue-with-next-marker
</td></tr>

<tr>
<td>#</td>
<td>(reserved) counter
</td></tr>
<tr>
<td>,</td>
<td>(reserved)
</td></tr>
<tr>
<td>:</td>
<td>(reserved) define label
</td></tr>
<tr>
<td>;</td>
<td>(reserved) marker-next
</td></tr>

<tr>
<td>~~</td>
<td>(reserved) compare string2&#160;??
</td></tr>
<tr>
<td>$</td>
<td>(reserved) compare real
</td></tr>
<tr>
<td>%</td>
<td>(reserved) counter#2 / random
</td></tr>
<tr>
<td>°</td>
<td>(reserved) look / find_nodes()
</td></tr>
<tr>
<td>@</td>
<td>(reserved) reset
</td></tr>

<tr>
<td>A</td>
<td>(reserved) Subroutines
</td></tr>
<tr>
<td>..</td>
<td></td>
<td>.. etc. ..
</td></tr>
<tr>
<td>Z</td>
<td>(reserved)
</td></tr>
<tr>
<td>(</td>
<td>block-Start / Subroutine-Start /&#160;:
</td></tr>
<tr>
<td>)</td>
<td>block-End / Subroutine-End /&#160;;
</td></tr>

</tbody></table>
<p>See also <a href="/Mods:Alphabet_Blocks#basic_robots" title="Mods:Alphabet Blocks">Alphabeth-blocks</a>
</p>
<h3><span class="mw-headline" id="Rules">Rules</span></h3>
<h4><span class="mw-headline" id="Variant1">Variant1</span></h4>
<h5><span class="mw-headline" id="Basics">Basics</span></h5>
<ul><li>There is a set of available instructions ('turtle-commands'), see above.</li>
<li>There is a script with a sequence of turtle-commands
<ul><li>This script can be represented as a string, or by items in the inventory</li></ul></li>
<li>Each turtle-command is represented by one character.</li></ul>
<dl><dd>eg. 'f' stands for 'move-Forward'</dd></dl>
<ul><li>If the script-string is empty, the inventory is used as the source for the script,</li>
<li>where the item in each slot represent one turtle-command (or building-materialsm etc.)</li></ul>
<dl><dd>eg. the block 'arrow-right' means 'move-Forward' - same as 'f' when expressed as string.</dd></dl>
<ul><li>There is a 'pause' variable. While true, execution of the script stops.</li>
<li>At the start, pause is set to false.</li></ul>
<dl><dd>This can be changed with a remotecontrol</dd></dl>
<ul><li>There is a variable 'mat', that contains the name of the current building-material.</li>
<li>At the start, mat is set to an empty string.</li></ul>
<dl><dd>maybe start with 'dirt', or contents of slot 1&#160;?</dd></dl>
<ul><li>mat can be set with the instructions 1,2, ... 8 to the name of the material in slots 1 .. 8.</li></ul>
<dl><dd>the item-count of the material is removed</dd>
<dd>Some slots might be reserved for fixed strings, such as "farming:wheat_8" or "air"</dd></dl>
<p>Note: this might allow some tricks, eg. building with instruction-blocks / selfmodifying code
</p>
<dl><dd>I'm not sure if/why we should restrict this
<dl><dd>(eg. start script at position 9 would waste 1/4 script-length)</dd></dl></dd></dl>
<ul><li>There is a variable 's', that is used as a temp. string, eg. for read_node().</li>
<li>At the start, s is set to an empty string.</li></ul>
<dl><dd>maybe set it to the name of the robot, or the version-number,</dd>
<dd>or some status, eg. "robot1, fuel=99"&#160;?</dd></dl>
<ul><li>There is an instruction-pointer 'ip' that keeps track of the current instruction</li></ul>
<dl><dd>i.e. the instruction-pointer starts at position 1.</dd></dl>
<ul><li>Every script starts at the begin.</li>
<li>Every second, one instruction is executed</li></ul>
<dl><dd>maybe only count actions like moving, digging, building&#160;?</dd></dl>
<ul><li>and the instruction-pointer advances one step</li></ul>
<ul><li>If the ip reaches the end of the script, it continues at the start.</li></ul>
<dl><dd>This repeats until fuel runs out, or an end-instruction is reached.</dd></dl>
<ul><li>Invalid instructions are ignored</li></ul>
<dl><dd>such as blanks / empty slots, fuel, building-materials etc.</dd></dl>
<ul><li>The turtle-interpreter scans forward until a valid instruction is found,</li>
<li>or the same position is reached again</li></ul>
<dl><dd>eg. if the script is complete garbage, or empty, etc.</dd>
<dd>? errormessage / failure-sound&#160;??</dd></dl>
<ul><li>? instruction for pickup() -- p is already used for pause</li></ul>
<dl><dd>also what range -- maybe first pickup(4), second pickup(8)&#160;?</dd></dl>
<h5><span class="mw-headline" id="Fuel">Fuel</span></h5>
<ul><li>A Turtle needs 'fuel' to run,</li></ul>
<dl><dd>eg. leaves (coal would be too valuable - think of mining coal with a coal-burning turtle&#160;:)
<dl><dd>maybe different types of fuel, eg. leaves for moving, wood or sticks for digging</dd></dl></dd>
<dd>maybe create a new fuel-item, with stacklimit &gt; 99</dd></dl>
<ul><li>Each step consumes 1 unit of fuel</li></ul>
<dl><dd>this stops endless loops, and allows precise stopping of the turtle</dd>
<dd>maybe only have 'actions' (move,dig,build) consume fuel, not 'steps'
<dl><dd>so internal processing would be free (look/read_node, check, output...)</dd></dl></dd></dl>
<ul><li>Check for fuel is done before/after ...</li>
<li>If fuel runs out, the turtle goes into pause-mode</li></ul>
<dl><dd>so the player can refill, and unpause with a remote-control</dd></dl>
<ul><li>maybe require that fuel is put into a certain slot, eg. the last slot&#160;?</li></ul>
<dl><dd>How to represent fuel when using a script from a string&#160;?</dd></dl>
<h5><span class="mw-headline" id="Conditionals">Conditionals</span></h5>
<ul><li>There is a global 'ok' variable that keeps track of the result of each operation, eg.</li></ul>
<pre>ok=move.forward()
</pre>
<dl><dd>Some instructions cannot fail, e.g. turning.</dd></dl>
<ul><li>The check-instruction tests this variable, and can skip forward to the next marker.</li></ul>
<dl><dd>Eg. this lua-code:</dd></dl>
<pre>ok=move.forward()
if not ok then turn.left() end
</pre>
<dl><dd>could be expressed as turtle-instructions</dd></dl>
<pre>f?&lt;0
</pre>
<dl><dd>or, using instruction-blocks in the inventory:</dd></dl>
<table class="wikitable">

<tbody><tr>
<td><a href="/File:026_(basic_robot).png" class="image" title="Arrow right"><img alt="Arrow right" src="/images/0/01/026_%28basic_robot%29.png" decoding="async" width="18" height="24" /></a></td>
<td><a href="/File:063_(basic_robot).png" class="image" title="?"><img alt="?" src="/images/a/a4/063_%28basic_robot%29.png" decoding="async" width="18" height="24" /></a></td>
<td><a href="/File:060_(basic_robot).png" class="image" title="&lt;"><img alt="&lt;" src="/images/c/c6/060_%28basic_robot%29.png" decoding="async" width="18" height="24" /></a></td>
<td><a href="/File:Robot_button_green_(basic_robot).png" class="image" title="green"><img alt="green" src="/images/2/29/Robot_button_green_%28basic_robot%29.png" decoding="async" width="32" height="32" /></a>
</td></tr></tbody></table>
<dl><dd><dl><dd>where 0 is the next (green) marker, and '&lt;' is executed when move-Forward failed</dd></dl></dd></dl>
<h5><span class="mw-headline" id="Strings">Strings</span></h5>
<ul><li>The instructions "n" does  s=read_node.forward()</li>
<li>The instructions "t" does  s=read_text.forward(); ok=...</li></ul>
<dl><dd>and also sets 'ok' if some text was found</dd>
<dd>so we can at least identify objects with text (sign, chest, door, furnace...) even without string-compare</dd></dl>
<ul><li>The instruction "=" compares s with mat, and (on mismatch) can skip forward to the next marker.</li></ul>
<p>Eg. this little harvester
</p>
<pre>if read_node.forward() == "farming:wheat_8" then dig.forward() end
if read_node.forward() == "air"             then place.forward("farming:seed_wheat") end
move.forward()
</pre>
<p>Could be expressed as
</p>
<pre>8n=-0 7n=1+0 f
</pre>
<dl><dd>or, as instruction-blocks in the inventory:</dd></dl>
<table class="wikitable">

<tbody><tr>
<td><a href="/File:056_(basic_robot).png" class="image" title="8"><img alt="8" src="/images/4/4d/056_%28basic_robot%29.png" decoding="async" width="18" height="24" /></a> <a href="/File:110_(basic_robot).png" class="image" title="n"><img alt="n" src="/images/6/6d/110_%28basic_robot%29.png" decoding="async" width="18" height="24" /></a></td>
<td><a href="/File:061_(basic_robot).png" class="image" title="="><img alt="=" src="/images/9/9c/061_%28basic_robot%29.png" decoding="async" width="18" height="24" /></a></td>
<td><a href="/File:016_(basic_robot).png" class="image" title="-"><img alt="-" src="/images/8/86/016_%28basic_robot%29.png" decoding="async" width="18" height="24" /></a></td>
<td><a href="/File:Robot_button_green_(basic_robot).png" class="image" title="green"><img alt="green" src="/images/2/29/Robot_button_green_%28basic_robot%29.png" decoding="async" width="32" height="32" /></a></td>
<td><a href="/File:055_(basic_robot).png" class="image" title="7"><img alt="7" src="/images/c/ce/055_%28basic_robot%29.png" decoding="async" width="18" height="24" /></a></td>
<td><a href="/File:110_(basic_robot).png" class="image" title="n"><img alt="n" src="/images/6/6d/110_%28basic_robot%29.png" decoding="async" width="18" height="24" /></a></td>
<td><a href="/File:061_(basic_robot).png" class="image" title="="><img alt="=" src="/images/9/9c/061_%28basic_robot%29.png" decoding="async" width="18" height="24" /></a></td>
<td><a href="/File:049_(basic_robot).png" class="image" title="1"><img alt="1" src="/images/f/f6/049_%28basic_robot%29.png" decoding="async" width="18" height="24" /></a></td>
<td><a href="/File:043_(basic_robot).png" class="image" title="+"><img alt="+" src="/images/7/7d/043_%28basic_robot%29.png" decoding="async" width="18" height="24" /></a></td>
<td><a href="/File:Robot_button_green_(basic_robot).png" class="image" title="green"><img alt="green" src="/images/2/29/Robot_button_green_%28basic_robot%29.png" decoding="async" width="32" height="32" /></a></td>
<td><a href="/File:026_(basic_robot).png" class="image" title="Arrow right"><img alt="Arrow right" src="/images/0/01/026_%28basic_robot%29.png" decoding="async" width="18" height="24" /></a>
</td></tr></tbody></table>
<p>where slot 8 has "farming:wheat_8", slot 7 has "air", slot 1 has "farming:wheat", and 0 is a (green) marker.
</p>
<dl><dd>slot 1 needs to be setup by the user, slot 7 &amp; 8 are fixed strings built into the turtle-interpreter.</dd></dl>
<p>Note: in this harvester-example, we cannot check for soil, because we have no turtle-instructions for 'read_node.down()' or 'read_node.forward_down()'
</p>
<dl><dd>Also, 'farming:soil' would need an additional special string</dd></dl>
<ul><li>? store / recall strings&#160;?</li>
<li>? random&#160;?</li></ul>
<h5><span class="mw-headline" id="Variables">Variables</span></h5>
<p>It would be nice to have variables and arithmetic, but with a small instruction-set, <br />
and very little room (&lt;30) for scripts, it seems not practical.
</p><p>Eg. it would need instructions to set a value, add, substract, check, specify which var,<br />
and represent values.
</p><p>A simpler type of variable are flags and counters.
</p>
<ul><li>flag (aka boolean) - true and false (such as our internal 'ok'-variable)</li>
<li>counter with a specific max-value. Only needs an instruction 'decrement&amp;test-for-zero'.</li></ul>
<dl><dd>after reaching 0, the counter is restored to its max-value.
<dl><dd>with a max-value of 1, a counter works just like a flag</dd></dl></dd></dl>
<ul><li>to reset it, just repeat reading, until it reaches zero</li></ul>
<h6><span class="mw-headline" id="Counter">Counter</span></h6>
<p>The turtle only gets two counters (using the instructions # and&#160;%), <br />
the max-value is specified by their stackcount in the inventory.
</p>
<dl><dd>That means the max-value must be 1..99</dd></dl>
<p>To represent this when using a script from a string,<br />
we can extend the script-string, eg. append ";#=5&#160;%=3 fuel=99"
</p>
<ul><li>The instruction "#" decrements the current value of counter1 , and sets the ok-value:
<ul><li>ok=true:  success means the value of the counter was &gt; 0, anc could be decremented</li>
<li>ok=fail:  value was = 0, and is now set to its max-value again</li></ul></li>
<li>The instruction "%" works likewise on counter2</li></ul>
<p>Such counters are also useful to keep trace of some state-of-processing.
</p>
<h6><span class="mw-headline" id="Real">Real</span></h6>
<p>There is a specific usage for real numbers I would like to include with turtles: <br />
finding the distance to something via find_nodes(), compare old &amp; new distance-value, <br />
with the goal of moving closer to it.
</p>
<dl><dd>Eg. finding flowers on a plain of grass, without visiting each square.</dd></dl>
<p>That would need a special instruction like 'compare &amp; store-when-less',<br />
and a way to clear the old value, for the next search.
</p>
<dl><dd>Maybe reset when find_nodes() returns nil, meaning 'no such node in range'&#160;?</dd></dl>
<h5><span class="mw-headline" id="Subroutines">Subroutines</span></h5>
<p>This is optional, but really nice-to-have:
</p>
<ul><li>Uppercase letters are reserved as names for subroutines</li>
<li>To define a subroutines:</li></ul>
<pre>A(-~f)
</pre>
<dl><dd>dig-Forward, dig-Up, move-Forward</dd></dl>
<ul><li>To call a subroutines:</li></ul>
<pre>A
</pre>
<dl><dd>If an uppercase letter is followed by '(', the body of the subroutine followes, ended by ')'.</dd>
<dd>Otherwise, the interpreter tries to find &amp; execute that subroutine</dd></dl>
<ul><li>If not found, the program stops</li></ul>
<dl><dd>? errormessage&#160;?</dd></dl>
<ul><li>The call-stack is only 1 level deep, so calls from a subroutine, and recursion are not allowed (yet).</li></ul>
<ul><li>If a '(' is encountered outside of a subroutine-definition, the interpreter ignores all following instructions upto the next ')'</li></ul>
<dl><dd>So, (..) also serves as a block-comment.</dd></dl>
<p>...
</p>
<h3><span class="mw-headline" id="Links">Links</span></h3>
<p>Forum:
</p>
<ul><li><a rel="nofollow" class="external text" href="https://forum.minetest.net/viewtopic.php?f=9&amp;t=15689">TurtleMiner ... programmable turtles in Minetest</a></li>
<li>basic_robot <a rel="nofollow" class="external text" href="https://forum.minetest.net/viewtopic.php?f=9&amp;t=15850">forum</a> <a href="/Mods/basic_robot" title="Mods/basic robot">wiki</a></li></ul>
<p>Resources:
</p>
<ul><li><a rel="nofollow" class="external free" href="https://developers.google.com/blockly">https://developers.google.com/blockly</a>
<ul><li><a rel="nofollow" class="external free" href="http://blockly-lua.appspot.com/static/apps/code/index.html">http://blockly-lua.appspot.com/static/apps/code/index.html</a></li></ul></li>
<li><a rel="nofollow" class="external free" href="https://scratch.mit.edu/developers">https://scratch.mit.edu/developers</a></li></ul>
<ul><li><a rel="nofollow" class="external text" href="https://wiki.education.minecraft.net/wiki/Programming_with_ComputerCraftEdu">Introduction to ComputerCraftEdu</a> - another approach to 'teaching programming to kids'</li>
<li><a rel="nofollow" class="external text" href="https://www.robomindacademy.com/go/robomind/help">RoboMind Academy</a> - another system for teaching programming / "Computational thinking" using robots</li></ul>
<!-- 
NewPP limit report
Cached time: 20230709183019
Cache expiry: 86400
Dynamic content: false
Complications: []
CPU time usage: 0.249 seconds
Real time usage: 0.772 seconds
Preprocessor visited node count: 109/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key minetest_wiki:pcache:idhash:3913-0!canonical and timestamp 20230709183019 and revision id 27685
 -->
</div></div><div class="printfooter">Retrieved from "<a dir="ltr" href="http://wiki.minetest.net/index.php?title=Mods/basic_robot/Turtle-Specs&amp;oldid=27685">http://wiki.minetest.net/index.php?title=Mods/basic_robot/Turtle-Specs&amp;oldid=27685</a>"</div>
		<div id="catlinks" class="catlinks catlinks-allhidden" data-mw="interface"></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		<!-- Please do not use role attribute as CSS selector, it is deprecated. -->
<nav id="p-personal" class="vector-menu" aria-labelledby="p-personal-label" role="navigation" 
	 >
	<h3 id="p-personal-label">
		<span>Personal tools</span>
	</h3>
	<!-- Please do not use the .body class, it is deprecated. -->
	<div class="body vector-menu-content">
		<!-- Please do not use the .menu class, it is deprecated. -->
		<ul class="vector-menu-content-list"><li id="pt-login"><a href="/index.php?title=Special:UserLogin&amp;returnto=Mods%2Fbasic+robot%2FTurtle-Specs" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li></ul>
		
	</div>
</nav>


		<div id="left-navigation">
			<!-- Please do not use role attribute as CSS selector, it is deprecated. -->
<nav id="p-namespaces" class="vector-menu vector-menu-tabs vectorTabs" aria-labelledby="p-namespaces-label" role="navigation" 
	 >
	<h3 id="p-namespaces-label">
		<span>Namespaces</span>
	</h3>
	<!-- Please do not use the .body class, it is deprecated. -->
	<div class="body vector-menu-content">
		<!-- Please do not use the .menu class, it is deprecated. -->
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected"><a href="/Mods/basic_robot/Turtle-Specs" title="View the content page [c]" accesskey="c">Page</a></li><li id="ca-talk" class="new"><a href="/index.php?title=Talk:Mods/basic_robot/Turtle-Specs&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t">Discussion</a></li></ul>
		
	</div>
</nav>


			<!-- Please do not use role attribute as CSS selector, it is deprecated. -->
<nav id="p-variants" class="vector-menu-empty emptyPortlet vector-menu vector-menu-dropdown vectorMenu" aria-labelledby="p-variants-label" role="navigation" 
	 >
	<input type="checkbox" class="vector-menu-checkbox vectorMenuCheckbox" aria-labelledby="p-variants-label" />
	<h3 id="p-variants-label">
		<span>Variants</span>
	</h3>
	<!-- Please do not use the .body class, it is deprecated. -->
	<div class="body vector-menu-content">
		<!-- Please do not use the .menu class, it is deprecated. -->
		<ul class="menu vector-menu-content-list"></ul>
		
	</div>
</nav>


		</div>
		<div id="right-navigation">
			<!-- Please do not use role attribute as CSS selector, it is deprecated. -->
<nav id="p-views" class="vector-menu vector-menu-tabs vectorTabs" aria-labelledby="p-views-label" role="navigation" 
	 >
	<h3 id="p-views-label">
		<span>Views</span>
	</h3>
	<!-- Please do not use the .body class, it is deprecated. -->
	<div class="body vector-menu-content">
		<!-- Please do not use the .menu class, it is deprecated. -->
		<ul class="vector-menu-content-list"><li id="ca-view" class="collapsible selected"><a href="/Mods/basic_robot/Turtle-Specs">Read</a></li><li id="ca-viewsource" class="collapsible"><a href="/index.php?title=Mods/basic_robot/Turtle-Specs&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></li><li id="ca-history" class="collapsible"><a href="/index.php?title=Mods/basic_robot/Turtle-Specs&amp;action=history" title="Past revisions of this page [h]" accesskey="h">View history</a></li></ul>
		
	</div>
</nav>


			<!-- Please do not use role attribute as CSS selector, it is deprecated. -->
<nav id="p-cactions" class="vector-menu-empty emptyPortlet vector-menu vector-menu-dropdown vectorMenu" aria-labelledby="p-cactions-label" role="navigation" 
	 >
	<input type="checkbox" class="vector-menu-checkbox vectorMenuCheckbox" aria-labelledby="p-cactions-label" />
	<h3 id="p-cactions-label">
		<span>More</span>
	</h3>
	<!-- Please do not use the .body class, it is deprecated. -->
	<div class="body vector-menu-content">
		<!-- Please do not use the .menu class, it is deprecated. -->
		<ul class="menu vector-menu-content-list"></ul>
		
	</div>
</nav>


			<div id="p-search" role="search">
	<h3 >
		<label for="searchInput">Search</label>
	</h3>
	<form action="/index.php" id="searchform">
		<div id="simpleSearch">
			<input type="search" name="search" placeholder="Search Minetest Wiki" title="Search Minetest Wiki [f]" accesskey="f" id="searchInput"/>
			<input type="hidden" name="title" value="Special:Search">
			<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton"/>
			<input type="submit" name="go" value="Go" title="Go to a page with this exact name if it exists" id="searchButton" class="searchButton"/>
		</div>
	</form>
</div>

		</div>
	</div>
	
<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a  title="Visit the main page" class="mw-wiki-logo" href="/Main_Page"></a>
	</div>
	<!-- Please do not use role attribute as CSS selector, it is deprecated. -->
<nav id="p-navigation" class="vector-menu vector-menu-portal portal portal-first" aria-labelledby="p-navigation-label" role="navigation" 
	 >
	<h3 id="p-navigation-label">
		<span>Navigation</span>
	</h3>
	<!-- Please do not use the .body class, it is deprecated. -->
	<div class="body vector-menu-content">
		<!-- Please do not use the .menu class, it is deprecated. -->
		<ul class="vector-menu-content-list"><li id="n-mainpage-description"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li><li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li><li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li><li id="n-help-mediawiki"><a href="https://www.mediawiki.org/wiki/Special:MyLanguage/Help:Contents">Help about MediaWiki</a></li></ul>
		
	</div>
</nav>


	<!-- Please do not use role attribute as CSS selector, it is deprecated. -->
<nav id="p-tb" class="vector-menu vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation" 
	 >
	<h3 id="p-tb-label">
		<span>Tools</span>
	</h3>
	<!-- Please do not use the .body class, it is deprecated. -->
	<div class="body vector-menu-content">
		<!-- Please do not use the .menu class, it is deprecated. -->
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/Mods/basic_robot/Turtle-Specs" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li><li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/Mods/basic_robot/Turtle-Specs" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li><li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li><li id="t-print"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li><li id="t-permalink"><a href="/index.php?title=Mods/basic_robot/Turtle-Specs&amp;oldid=27685" title="Permanent link to this revision of the page">Permanent link</a></li><li id="t-info"><a href="/index.php?title=Mods/basic_robot/Turtle-Specs&amp;action=info" title="More information about this page">Page information</a></li></ul>
		
	</div>
</nav>


	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info" >
		<li id="footer-info-lastmod"> This page was last edited on 14 February 2023, at 15:28.</li>
		<li id="footer-info-copyright">Content is available under <a class="external" rel="nofollow" href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution Share Alike</a> unless otherwise noted.</li>
	</ul>
	<ul id="footer-places" >
		<li id="footer-places-privacy"><a href="/Minetest_Wiki:Privacy_policy" title="Minetest Wiki:Privacy policy">Privacy policy</a></li>
		<li id="footer-places-about"><a href="/Minetest_Wiki:About" title="Minetest Wiki:About">About Minetest Wiki</a></li>
		<li id="footer-places-disclaimer"><a href="/Minetest_Wiki:General_disclaimer" title="Minetest Wiki:General disclaimer">Disclaimers</a></li>
	</ul>
	<ul id="footer-icons" class="noprint">
		<li id="footer-copyrightico"><a href="http://creativecommons.org/licenses/by-sa/3.0/"><img src="/resources/assets/licenses/cc-by-sa.png" alt="Creative Commons Attribution Share Alike" width="88" height="31" loading="lazy"/></a></li>
		<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="/resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
	</ul>
	<div style="clear: both;"></div>
</footer>



<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.249","walltime":"0.772","ppvisitednodes":{"value":109,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":40},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":0,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20230709183019","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":1791});});</script></body></html>
